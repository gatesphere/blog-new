<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<?xml-stylesheet ekr_test?>
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="peckj.20140121082121.6593" a="E"
expanded="peckj.20140127083227.10220,peckj.20140121082121.6639,peckj.20140123082920.4919,"><vh>@file sitebuilder.py</vh></v>
<v t="peckj.20140929120632.5053"><vh>@path pages</vh>
<v t="peckj.20140929120632.6871"><vh>@ignore old articles</vh>
<v t="peckj.20140929120632.5054"><vh>@path 2010</vh>
<v t="peckj.20140929120632.5055"><vh>@path 08</vh>
<v t="peckj.20140929120632.5056"><vh>@path 23</vh>
<v t="peckj.20140929120632.5057"><vh>@edit blahgger-first-alpha.md</vh></v>
<v t="peckj.20140929120632.5058"><vh>@edit welcome-to-my-dev-blog.md</vh></v>
<v t="peckj.20140929120632.5059"><vh>@edit white-noise-generator-for-the-msp430.md</vh></v>
</v>
<v t="peckj.20140929120632.5060"><vh>@path 25</vh>
<v t="peckj.20140929120632.5061"><vh>@edit msphere-framework.md</vh></v>
</v>
<v t="peckj.20140929120632.5062"><vh>@path 26</vh>
<v t="peckj.20140929120632.5063"><vh>@edit quick-msphere-update.md</vh></v>
</v>
<v t="peckj.20140929120632.5064"><vh>@path 27</vh>
<v t="peckj.20140929120632.5065"><vh>@edit launchpad-74hc595-shift-register-demo.md</vh></v>
<v t="peckj.20140929120632.5066"><vh>@edit quick-blahgger-update.md</vh></v>
</v>
<v t="peckj.20140929120632.5067"><vh>@path 31</vh>
<v t="peckj.20140929120632.5068"><vh>@edit minor-blahgger-update-and-other-musings.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5069"><vh>@path 09</vh>
<v t="peckj.20140929120632.5070"><vh>@path 06</vh>
<v t="peckj.20140929120632.5071"><vh>@edit texas-instruments-tlv5620-library-for-msp430-launchpad.md</vh></v>
</v>
<v t="peckj.20140929120632.5072"><vh>@path 08</vh>
<v t="peckj.20140929120632.5073"><vh>@edit msphere-update.md</vh></v>
</v>
<v t="peckj.20140929120632.5074"><vh>@path 12</vh>
<v t="peckj.20140929120632.5075"><vh>@edit connecting-a-parallax-pir-sensor-module-to-the-launchpad.md</vh></v>
<v t="peckj.20140929120632.5076"><vh>@edit minor-blahgger-update.md</vh></v>
</v>
<v t="peckj.20140929120632.5077"><vh>@path 15</vh>
<v t="peckj.20140929120632.5078"><vh>@edit msphere-initial-release.md</vh></v>
</v>
<v t="peckj.20140929120632.5079"><vh>@path 19</vh>
<v t="peckj.20140929120632.5080"><vh>@edit idea-corewars-meets-the-launchpad.md</vh></v>
</v>
<v t="peckj.20140929120632.5081"><vh>@path 20</vh>
<v t="peckj.20140929120632.5082"><vh>@edit first-msphere-auxiliary-library-tlv5620.md</vh></v>
</v>
<v t="peckj.20140929120632.5083"><vh>@path 23</vh>
<v t="peckj.20140929120632.5084"><vh>@edit launchpad-based-glitchamin.md</vh></v>
</v>
<v t="peckj.20140929120632.5085"><vh>@path 24</vh>
<v t="peckj.20140929120632.5086"><vh>@edit launchpad-based-glitchamin-take-2.md</vh></v>
</v>
<v t="peckj.20140929120632.5087"><vh>@path 25</vh>
<v t="peckj.20140929120632.5088"><vh>@edit msphere-documentation-updated-finally.md</vh></v>
</v>
<v t="peckj.20140929120632.5089"><vh>@path 29</vh>
<v t="peckj.20140929120632.5090"><vh>@edit another-blahgger-update.md</vh></v>
</v>
<v t="peckj.20140929120632.5091"><vh>@path 30</vh>
<v t="peckj.20140929120632.5092"><vh>@edit yet-another-blahgger-update.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5093"><vh>@path 10</vh>
<v t="peckj.20140929120632.5094" a="E"><vh>@path 05</vh>
<v t="peckj.20140929120632.5095"><vh>@edit oh-my-god-another-blahgger-update.md</vh></v>
<v t="peckj.20140929120632.5096"><vh>@edit texas-instruments-tlv5618a-library-for-msp430-launchpad.md</vh></v>
</v>
<v t="peckj.20140929120632.5097" a="E"><vh>@path 17</vh>
<v t="peckj.20140929120632.5098"><vh>@edit compiling-code-offline-for-the-mbed-nxp-lpc1768.md</vh></v>
</v>
<v t="peckj.20140929120632.5099" a="E"><vh>@path 18</vh>
<v t="peckj.20140929120632.5100"><vh>@edit i-just-keep-tweaking-blahgger.md</vh></v>
</v>
<v t="peckj.20140929120632.5101" a="E"><vh>@path 22</vh>
<v t="peckj.20140929120632.5102"><vh>@edit hardware-hack-diy-3-contact-micpiezo-pickup.md</vh></v>
<v t="peckj.20140929120632.5103"><vh>@edit yabu---yet-another-blahgger-update.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5104"><vh>@path 11</vh>
<v t="peckj.20140929120632.5105" a="E"><vh>@path 08</vh>
<v t="peckj.20140929120632.5106"><vh>@edit msp430g2xxx-based-tea-timer.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5107"><vh>@path 12</vh>
<v t="peckj.20140929120632.5108" a="E"><vh>@path 01</vh>
<v t="peckj.20140929120632.5109"><vh>@edit property-of-the-university-hacking-music-life-of-blocks-and-other-things.md</vh></v>
</v>
<v t="peckj.20140929120632.5110" a="E"><vh>@path 10</vh>
<v t="peckj.20140929120632.5111"><vh>@edit potential-information-on-new-msp430g2xxx-value-line-chips.md</vh></v>
</v>
</v>
</v>
<v t="peckj.20140929120632.5112"><vh>@path 2011</vh>
<v t="peckj.20140929120632.5113" a="E"><vh>@path 02</vh>
<v t="peckj.20140929120632.5114" a="E"><vh>@path 04</vh>
<v t="peckj.20140929120632.5115"><vh>@edit an-update-on-life.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5116" a="E"><vh>@path 03</vh>
<v t="peckj.20140929120632.5117" a="E"><vh>@path 23</vh>
<v t="peckj.20140929120632.5118"><vh>@edit this-surely-was-a-triumph.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5119" a="E"><vh>@path 04</vh>
<v t="peckj.20140929120632.5120" a="E"><vh>@path 15</vh>
<v t="peckj.20140929120632.5121"><vh>@edit another-im-sorry-from-me.md</vh></v>
</v>
<v t="peckj.20140929120632.5122" a="E"><vh>@path 20</vh>
<v t="peckj.20140929120632.5123"><vh>@edit featured-on-tis-site-and-free-nxp-board.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5124" a="E"><vh>@path 05</vh>
<v t="peckj.20140929120632.5125" a="E"><vh>@path 03</vh>
<v t="peckj.20140929120632.5126"><vh>@edit ideas-ideas.md</vh></v>
</v>
<v t="peckj.20140929120632.5127" a="E"><vh>@path 15</vh>
<v t="peckj.20140929120632.5128"><vh>@edit jeclap-released.md</vh></v>
</v>
<v t="peckj.20140929120632.5129" a="E"><vh>@path 21</vh>
<v t="peckj.20140929120632.5130"><vh>@edit adventures-in-roguelike-development-chapter-1-the-quest-begins.md</vh></v>
</v>
<v t="peckj.20140929120632.5131" a="E"><vh>@path 28</vh>
<v t="peckj.20140929120632.5132"><vh>@edit adventures-in-roguelike-development-chapter-2-gathering-supplies.md</vh></v>
</v>
<v t="peckj.20140929120632.5133" a="E"><vh>@path 29</vh>
<v t="peckj.20140929120632.5134"><vh>@edit new-colors.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5135" a="E"><vh>@path 06</vh>
<v t="peckj.20140929120632.5136" a="E"><vh>@path 04</vh>
<v t="peckj.20140929120632.5137"><vh>@edit adventures-in-roguelike-development-chapter-3-bumps-in-the-road.md</vh></v>
</v>
<v t="peckj.20140929120632.5138" a="E"><vh>@path 12</vh>
<v t="peckj.20140929120632.5139"><vh>@edit adventures-in-roguelike-development-chapter-4-beginning-to-see.md</vh></v>
</v>
<v t="peckj.20140929120632.5140" a="E"><vh>@path 30</vh>
<v t="peckj.20140929120632.5141"><vh>@edit elocalc---an-elo-ratings-calculator.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5142" a="E"><vh>@path 09</vh>
<v t="peckj.20140929120632.5143" a="E"><vh>@path 20</vh>
<v t="peckj.20140929120632.5144"><vh>@edit reverse-engineering-a-simple-software-licensing-scheme.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5145" a="E"><vh>@path 10</vh>
<v t="peckj.20140929120632.5146" a="E"><vh>@path 26</vh>
<v t="peckj.20140929120632.5147"><vh>@edit musings-and-an-impromptu-introduction-to-io.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5148" a="E"><vh>@path 11</vh>
<v t="peckj.20140929120632.5149" a="E"><vh>@path 04</vh>
<v t="peckj.20140929120632.5150"><vh>@edit quick-update-and-introducing-iobin.md</vh></v>
</v>
<v t="peckj.20140929120632.5151" a="E"><vh>@path 10</vh>
<v t="peckj.20140929120632.5152"><vh>@edit iobin-is-official-and-other-musings.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5153" a="E"><vh>@path 12</vh>
<v t="peckj.20140929120632.5154" a="E"><vh>@path 05</vh>
<v t="peckj.20140929120632.5155"><vh>@edit iobook-update-and-other-things.md</vh></v>
</v>
</v>
</v>
<v t="peckj.20140929120632.5156"><vh>@path 2012</vh>
<v t="peckj.20140929120632.5157"><vh>@path 01</vh>
<v t="peckj.20140929120632.5158"><vh>@path 10</vh>
<v t="peckj.20140929120632.5159"><vh>@edit introducing-jedi.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5160"><vh>@path 02</vh>
<v t="peckj.20140929120632.5161" a="E"><vh>@path 14</vh>
<v t="peckj.20140929120632.5162"><vh>@edit introducing-silica.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5163"><vh>@path 03</vh>
<v t="peckj.20140929120632.5164" a="E"><vh>@path 20</vh>
<v t="peckj.20140929120632.5165"><vh>@edit stegio-a-brief-example-of-steganography.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5166"><vh>@path 04</vh>
<v t="peckj.20140929120632.5167" a="E"><vh>@path 28</vh>
<v t="peckj.20140929120632.5168"><vh>@edit demi-16-a-dcpu-16-emulator.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5169"><vh>@path 06</vh>
<v t="peckj.20140929120632.5170" a="E"><vh>@path 01</vh>
<v t="peckj.20140929120632.5171"><vh>@edit welcome-to-a-ab.md</vh></v>
</v>
<v t="peckj.20140929120632.5172" a="E"><vh>@path 04</vh>
<v t="peckj.20140929120632.5173"><vh>@edit computer-science-for-mere-mortals-an-introductory-course-in-cs-theory-with-some-programming.md</vh></v>
</v>
<v t="peckj.20140929120632.5174" a="E"><vh>@path 07</vh>
<v t="peckj.20140929120632.5175"><vh>@edit csmm---lesson-11-introduction-to-the-lambda-calculus.md</vh></v>
</v>
<v t="peckj.20140929120632.5176" a="E"><vh>@path 14</vh>
<v t="peckj.20140929120632.5177"><vh>@edit csmm---lesson-12-arithmetic-in-the-lambda-calculus.md</vh></v>
</v>
<v t="peckj.20140929120632.5178" a="E"><vh>@path 18</vh>
<v t="peckj.20140929120632.5179"><vh>@edit jliquid---the-jedi-backend-in-java.md</vh></v>
</v>
<v t="peckj.20140929120632.5180" a="E"><vh>@path 19</vh>
<v t="peckj.20140929120632.5181"><vh>@edit the-enigma-a-look-at-the-ww2-german-cypher-machine.md</vh></v>
</v>
<v t="peckj.20140929120632.5182" a="E"><vh>@path 26</vh>
<v t="peckj.20140929120632.5183"><vh>@edit csmm---lesson-13-boolean-logic-in-the-lambda-calculus.md</vh></v>
</v>
<v t="peckj.20140929120632.5184" a="E"><vh>@path 29</vh>
<v t="peckj.20140929120632.5185"><vh>@edit csmm---lesson-14-advanced-logic-and-arithmetic-in-the-lambda-calculus.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5186"><vh>@path 07</vh>
<v t="peckj.20140929120632.5187" a="E"><vh>@path 03</vh>
<v t="peckj.20140929120632.5188"><vh>@edit csmm---lesson-15-flow-control-and-recursion-in-the-lambda-calculus.md</vh></v>
</v>
<v t="peckj.20140929120632.5189" a="E"><vh>@path 05</vh>
<v t="peckj.20140929120632.5190"><vh>@edit blix---a-puzzle-game.md</vh></v>
</v>
<v t="peckj.20140929120632.5191" a="E"><vh>@path 13</vh>
<v t="peckj.20140929120632.5192"><vh>@edit csmm---lesson-21-natural-and-formal-languages.md</vh></v>
<v t="peckj.20140929120632.5193"><vh>@edit pila---a-stack-based-language.md</vh></v>
<v t="peckj.20140929120632.5194"><vh>@edit reverse-engineering-the-paper-jamz-pro-instrument-files.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5195"><vh>@path 09</vh>
<v t="peckj.20140929120632.5196" a="E"><vh>@path 10</vh>
<v t="peckj.20140929120632.5197"><vh>@edit a-monologue-on-api-flexibility.md</vh></v>
</v>
<v t="peckj.20140929120632.5198" a="E"><vh>@path 12</vh>
<v t="peckj.20140929120632.5199"><vh>@edit using-mobile-processing-on-the-blackberry.md</vh></v>
</v>
<v t="peckj.20140929120632.5200" a="E"><vh>@path 21</vh>
<v t="peckj.20140929120632.5201"><vh>@edit adventures-with-a-raspberry-pi.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5202"><vh>@path 10</vh>
<v t="peckj.20140929120632.5203" a="E"><vh>@path 04</vh>
<v t="peckj.20140929120632.5204"><vh>@edit a-simplistic-introduction-to-diffie-hellman-key-exchange.md</vh></v>
</v>
<v t="peckj.20140929120632.5205" a="E"><vh>@path 05</vh>
<v t="peckj.20140929120632.5206"><vh>@edit a-proposition-for-a-small-purely-functional-typeless-language.md</vh></v>
<v t="peckj.20140929120632.5207"><vh>@edit blog-resources-now-hosted-on-github.md</vh></v>
</v>
<v t="peckj.20140929120632.5208" a="E"><vh>@path 19</vh>
<v t="peckj.20140929120632.5209"><vh>@edit theory-time-a-pure-lambda-calculus-foundation-for-prototype-based-oop.md</vh></v>
</v>
<v t="peckj.20140929120632.5210" a="E"><vh>@path 30</vh>
<v t="peckj.20140929120632.5211"><vh>@edit a-few-quick-blackberry-apps.md</vh></v>
</v>
<v t="peckj.20140929120632.5212" a="E"><vh>@path 31</vh>
<v t="peckj.20140929120632.5213"><vh>@edit a-tale-of-three-telnets.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5214"><vh>@path 11</vh>
<v t="peckj.20140929120632.5215" a="E"><vh>@path 12</vh>
<v t="peckj.20140929120632.5216"><vh>@edit stupid-tricks-bash.md</vh></v>
</v>
<v t="peckj.20140929120632.5217" a="E"><vh>@path 13</vh>
<v t="peckj.20140929120632.5218"><vh>@edit webtally---a-stupid-webapp.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5219"><vh>@path 12</vh>
<v t="peckj.20140929120632.5220" a="E"><vh>@path 26</vh>
<v t="peckj.20140929120632.5221"><vh>@edit blog-and-website-redesign.md</vh></v>
</v>
</v>
</v>
<v t="peckj.20140929120632.5222"><vh>@path 2013</vh>
<v t="peckj.20140929120632.5223"><vh>@path 01</vh>
<v t="peckj.20140929120632.5224" a="E"><vh>@path 08</vh>
<v t="peckj.20140929120632.5225"><vh>@edit a-quick-prototyping-grid-in-processing.md</vh></v>
</v>
<v t="peckj.20140929120632.5226" a="E"><vh>@path 14</vh>
<v t="peckj.20140929120632.5227"><vh>@edit a-few-artistic-processing-sketches.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5228" a="E"><vh>@path 02</vh>
<v t="peckj.20140929120632.5229" a="E"><vh>@path 01</vh>
<v t="peckj.20140929120632.5230"><vh>@edit leo-is-love.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5231" a="E"><vh>@path 03</vh>
<v t="peckj.20140929120632.5232" a="E"><vh>@path 19</vh>
<v t="peckj.20140929120632.5233"><vh>@edit a-few-bits-of-news.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5234" a="E"><vh>@path 04</vh>
<v t="peckj.20140929120632.5235" a="E"><vh>@path 04</vh>
<v t="peckj.20140929120632.5236"><vh>@edit fudge-is-logarithmic.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5237"><vh>@path 09</vh>
<v t="peckj.20140929120632.5238" a="E"><vh>@path 20</vh>
<v t="peckj.20140929120632.5239"><vh>@edit its-been-so-long.md</vh></v>
<v t="peckj.20140929120632.5240"><vh>@edit leo-things-done.md</vh></v>
</v>
<v t="peckj.20140929120632.5241" a="E"><vh>@path 30</vh>
<v t="peckj.20140929120632.5242"><vh>@edit ltd-week-one.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5243"><vh>@path 10</vh>
<v t="peckj.20140929120632.5244" a="E"><vh>@path 07</vh>
<v t="peckj.20140929120632.5245"><vh>@edit decktet-game-idea.md</vh></v>
<v t="peckj.20140929120632.5246"><vh>@edit ltd-week-two.md</vh></v>
<v t="peckj.20140929120632.5247"><vh>@edit on-poetic-forms.md</vh></v>
</v>
<v t="peckj.20140929120632.5248" a="E"><vh>@path 15</vh>
<v t="peckj.20140929120632.5249"><vh>@edit decktet-game-idea-revised.md</vh></v>
<v t="peckj.20140929120632.5250"><vh>@edit ltd-week-three.md</vh></v>
</v>
<v t="peckj.20140929120632.5251" a="E"><vh>@path 21</vh>
<v t="peckj.20140929120632.5252"><vh>@edit ltd-week-four.md</vh></v>
<v t="peckj.20140929120632.5253"><vh>@edit modifying-rpg-adventures-for-a-sword-and-sorcery-feel.md</vh></v>
</v>
<v t="peckj.20140929120632.5254" a="E"><vh>@path 28</vh>
<v t="peckj.20140929120632.5255"><vh>@edit ltd-week-five.md</vh></v>
<v t="peckj.20140929120632.5256"><vh>@edit passing-a-comparison-operator-in-python.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5257"><vh>@path 11</vh>
<v t="peckj.20140929120632.5258" a="E"><vh>@path 04</vh>
<v t="peckj.20140929120632.5259"><vh>@edit ltd-week-six.md</vh></v>
<v t="peckj.20140929120632.5260"><vh>@edit nodewatch-for-productivity.md</vh></v>
</v>
<v t="peckj.20140929120632.5261" a="E"><vh>@path 12</vh>
<v t="peckj.20140929120632.5262"><vh>@edit jedi-reimagined.md</vh></v>
<v t="peckj.20140929120632.5263"><vh>@edit ltd-week-seven.md</vh></v>
</v>
<v t="peckj.20140929120632.5264" a="E"><vh>@path 18</vh>
<v t="peckj.20140929120632.5265"><vh>@edit leo-things-done-revised.md</vh></v>
<v t="peckj.20140929120632.5266"><vh>@edit ltd-week-eight.md</vh></v>
</v>
<v t="peckj.20140929120632.5267" a="E"><vh>@path 25</vh>
<v t="peckj.20140929120632.5268"><vh>@edit ltd-week-nine.md</vh></v>
</v>
<v t="peckj.20140929120632.5269" a="E"><vh>@path 26</vh>
<v t="peckj.20140929120632.5270"><vh>@edit exploring-acme.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5271"><vh>@path 12</vh>
<v t="peckj.20140929120632.5272"><vh>@path 02</vh>
<v t="peckj.20140929120632.5273"><vh>@edit a-simplified-schelling-model.md</vh></v>
<v t="peckj.20140929120632.5274"><vh>@edit ltd-week-ten.md</vh></v>
</v>
<v t="peckj.20140929120632.5275"><vh>@path 09</vh>
<v t="peckj.20140929120632.5276"><vh>@edit ltd-week-eleven.md</vh></v>
<v t="peckj.20140929120632.5277"><vh>@edit mark-and-sweep-in-python.md</vh></v>
</v>
<v t="peckj.20140929120632.5278"><vh>@path 16</vh>
<v t="peckj.20140929120632.5279"><vh>@edit ltd-week-twelve.md</vh></v>
</v>
<v t="peckj.20140929120632.5280"><vh>@path 17</vh>
<v t="peckj.20140929120632.5281"><vh>@edit thoughts-on-silica2.md</vh></v>
</v>
<v t="peckj.20140929120632.5282"><vh>@path 24</vh>
<v t="peckj.20140929120632.5283"><vh>@edit ltd-week-thirteen.md</vh></v>
</v>
<v t="peckj.20140929120632.5284"><vh>@path 30</vh>
<v t="peckj.20140929120632.5285"><vh>@edit book-review---dark-guest-training-games-for-cyber-warfare.md</vh></v>
<v t="peckj.20140929120632.5286"><vh>@edit ltd-week-fourteen.md</vh></v>
</v>
</v>
</v>
</v>
<v t="peckj.20140929120632.5287" a="E"><vh>@path 2014</vh>
<v t="peckj.20140929120632.5288"><vh>@path 01</vh>
<v t="peckj.20140929120632.5289" a="E"><vh>@path 06</vh>
<v t="peckj.20140929120632.5290"><vh>@edit ltd-week-2014-01.md</vh></v>
<v t="peckj.20140929120632.5291"><vh>@edit tag-cloud-replaced-by-tags.md</vh></v>
</v>
<v t="peckj.20140929120632.5292" a="E"><vh>@path 07</vh>
<v t="peckj.20140929120632.5293"><vh>@edit book-review---finite-and-infinite-games.md</vh></v>
</v>
<v t="peckj.20140929120632.5294" a="E"><vh>@path 13</vh>
<v t="peckj.20140929120632.5295"><vh>@edit ltd-week-2014-02.md</vh></v>
<v t="peckj.20140929120632.5296"><vh>@edit strange-dice.md</vh></v>
</v>
<v t="peckj.20140929120632.5297" a="E"><vh>@path 20</vh>
<v t="peckj.20140929120632.5298"><vh>@edit ltd-week-2014-03.md</vh></v>
</v>
<v t="peckj.20140929120632.5299" a="E"><vh>@path 21</vh>
<v t="peckj.20140929120632.5300"><vh>@edit idiotpie.md</vh></v>
</v>
<v t="peckj.20140929120632.5301" a="E"><vh>@path 27</vh>
<v t="peckj.20140929120632.5302"><vh>@edit ltd-week-2014-04.md</vh></v>
</v>
<v t="peckj.20140929120632.5303" a="E"><vh>@path 28</vh>
<v t="peckj.20140929120632.5304"><vh>@edit intro-to-leo-scripting.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5305"><vh>@path 02</vh>
<v t="peckj.20140929120632.5306" a="E"><vh>@path 03</vh>
<v t="peckj.20140929120632.5307"><vh>@edit ltd-week-2014-05.md</vh></v>
</v>
<v t="peckj.20140929120632.5308" a="E"><vh>@path 04</vh>
<v t="peckj.20140929120632.5309"><vh>@edit book-review---code.md</vh></v>
</v>
<v t="peckj.20140929120632.5310" a="E"><vh>@path 10</vh>
<v t="peckj.20140929120632.5311"><vh>@edit ltd-week-2014-06.md</vh></v>
</v>
<v t="peckj.20140929120632.5312" a="E"><vh>@path 12</vh>
<v t="peckj.20140929120632.5313"><vh>@edit on-overdoing-it.md</vh></v>
</v>
<v t="peckj.20140929120632.5314" a="E"><vh>@path 17</vh>
<v t="peckj.20140929120632.5315"><vh>@edit ltd-week-2014-07.md</vh></v>
</v>
<v t="peckj.20140929120632.5316" a="E"><vh>@path 18</vh>
<v t="peckj.20140929120632.5317"><vh>@edit on-time.md</vh></v>
</v>
<v t="peckj.20140929120632.5318" a="E"><vh>@path 25</vh>
<v t="peckj.20140929120632.5319"><vh>@edit ltd-week-2014-08.md</vh></v>
<v t="peckj.20140929120632.5320"><vh>@edit whitewhale---a-multiplayer-elo-rating-system.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5321"><vh>@path 03</vh>
<v t="peckj.20140929120632.5322" a="E"><vh>@path 03</vh>
<v t="peckj.20140929120632.5323"><vh>@edit ltd-week-2014-09.md</vh></v>
</v>
<v t="peckj.20140929120632.5324" a="E"><vh>@path 04</vh>
<v t="peckj.20140929120632.5325"><vh>@edit tek-siege-mode.md</vh></v>
</v>
<v t="peckj.20140929120632.5326" a="E"><vh>@path 10</vh>
<v t="peckj.20140929120632.5327"><vh>@edit ltd-week-2014-10.md</vh></v>
<v t="peckj.20140929120632.5328"><vh>@edit on-legacy-lock-in.md</vh></v>
</v>
<v t="peckj.20140929120632.5329" a="E"><vh>@path 17</vh>
<v t="peckj.20140929120632.5330"><vh>@edit ltd-week-2014-11.md</vh></v>
</v>
<v t="peckj.20140929120632.5331" a="E"><vh>@path 18</vh>
<v t="peckj.20140929120632.5332"><vh>@edit cool-idea---liquid-democracy.md</vh></v>
</v>
<v t="peckj.20140929120632.5333" a="E"><vh>@path 25</vh>
<v t="peckj.20140929120632.5334"><vh>@edit ltd-week-2014-12.md</vh></v>
</v>
<v t="peckj.20140929120632.5335" a="E"><vh>@path 26</vh>
<v t="peckj.20140929120632.5336"><vh>@edit gift-giving-in-games.md</vh></v>
</v>
<v t="peckj.20140929120632.5337" a="E"><vh>@path 31</vh>
<v t="peckj.20140929120632.5338"><vh>@edit ltd-week-2014-13.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5339"><vh>@path 04</vh>
<v t="peckj.20140929120632.5340" a="E"><vh>@path 02</vh>
<v t="peckj.20140929120632.5341"><vh>@edit anonymous-microblogging-strikes-again.md</vh></v>
</v>
<v t="peckj.20140929120632.5342" a="E"><vh>@path 07</vh>
<v t="peckj.20140929120632.5343"><vh>@edit ltd-week-2014-14.md</vh></v>
</v>
<v t="peckj.20140929120632.5344" a="E"><vh>@path 14</vh>
<v t="peckj.20140929120632.5345"><vh>@edit ltd-week-2014-15.md</vh></v>
</v>
<v t="peckj.20140929120632.5346" a="E"><vh>@path 16</vh>
<v t="peckj.20140929120632.5347"><vh>@edit on-grinding-in-games.md</vh></v>
</v>
<v t="peckj.20140929120632.5348" a="E"><vh>@path 22</vh>
<v t="peckj.20140929120632.5349"><vh>@edit ltd-week-2014-16.md</vh></v>
<v t="peckj.20140929120632.5350"><vh>@edit you-are-what-you-wield.md</vh></v>
</v>
<v t="peckj.20140929120632.5351" a="E"><vh>@path 29</vh>
<v t="peckj.20140929120632.5352"><vh>@edit ltd-week-2014-17.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5353"><vh>@path 05</vh>
<v t="peckj.20140929120632.5354" a="E"><vh>@path 05</vh>
<v t="peckj.20140929120632.5355"><vh>@edit ltd-week-2014-18.md</vh></v>
</v>
<v t="peckj.20140929120632.5356" a="E"><vh>@path 06</vh>
<v t="peckj.20140929120632.5357"><vh>@edit google-failed-me-use-python.md</vh></v>
</v>
<v t="peckj.20140929120632.5358" a="E"><vh>@path 13</vh>
<v t="peckj.20140929120632.5359"><vh>@edit ltd-week-2014-19.md</vh></v>
</v>
<v t="peckj.20140929120632.5360" a="E"><vh>@path 27</vh>
<v t="peckj.20140929120632.5361"><vh>@edit ltd-week-2014-20.md</vh></v>
<v t="peckj.20140929120632.5362"><vh>@edit ltd-week-2014-21.md</vh></v>
</v>
</v>
<v t="peckj.20140929120632.5363"><vh>@path 06</vh>
<v t="peckj.20140929120632.5364"><vh>@path 10</vh>
<v t="peckj.20140929120632.5365"><vh>@edit ltd-week-2014-22.md</vh></v>
<v t="peckj.20140929120632.5366"><vh>@edit ltd-week-2014-23.md</vh></v>
</v>
</v>
</v>
</v>
<v t="peckj.20140121082121.6594"><vh>@edit README.md</vh></v>
<v t="peckj.20140121082121.6601"><vh>@path static</vh>
<v t="peckj.20140121082121.6598" a="E"><vh>@path assets</vh>
<v t="peckj.20140121082121.6599" a="E"><vh>@path css</vh>
<v t="peckj.20140121082121.6600"
expanded="peckj.20130219112325.1714,"><vh>@file style.css</vh></v>
</v>
<v t="peckj.20140121082121.6635"><vh>@path img</vh>
<v t="peckj.20140121082121.6636"><vh>@image bg.png</vh></v>
<v t="peckj.20150324125338.1"><vh>@image rss.png</vh></v>
</v>
</v>
</v>
<v t="peckj.20140121082121.6602" a="E"><vh>@path templates</vh>
<v t="peckj.20140121082121.6612" a="E"><vh>partials</vh>
<v t="peckj.20140121082121.6603"><vh>@file _footer.html</vh></v>
<v t="peckj.20140121082121.6604"><vh>@file _header.html</vh></v>
<v t="peckj.20140121082121.6605"><vh>@file _js.html</vh></v>
<v t="peckj.20140121082121.6648"><vh>@file _endjs.html</vh></v>
<v t="peckj.20140121082121.6606"><vh>@file _list.html</vh></v>
<v t="peckj.20140121082121.6607"><vh>@file _meta.html</vh></v>
<v t="peckj.20140121082121.6608"><vh>@file _style.html</vh></v>
</v>
<v t="peckj.20140123082920.4914"><vh>@file archives.html</vh></v>
<v t="peckj.20140121082121.6609"><vh>@file index.html</vh></v>
<v t="peckj.20140123082920.4909"><vh>@file about.html</vh></v>
<v t="peckj.20140121082121.6610"><vh>@file page.html</vh></v>
<v t="peckj.20140121082121.6611"><vh>@file tag.html</vh></v>
<v t="peckj.20140123082920.4924"><vh>@file tags.html</vh></v>
<v t="peckj.20140121082121.6614"><vh>@file base.html</vh></v>
<v t="peckj.20140121082121.6644"><vh>@file error.html</vh></v>
</v>
<v t="peckj.20140929120632.5367"><vh>@ignore old code</vh>
<v t="peckj.20140929083759.4142"><vh>import-old-articles</vh></v>
<v t="peckj.20140929083759.4143"><vh>clean empty directories</vh></v>
<v t="peckj.20140929083759.4144"><vh>add articles to leo</vh></v>
<v t="peckj.20140929120632.5368"><vh>format-dates-and-tags</vh></v>
</v>
<v t="peckj.20140123082920.4925" a="E"><vh>to do</vh>
<v t="peckj.20140127083227.9752"><vh>RSS feed</vh></v>
<v t="peckj.20150324125826.1"><vh>add favicon</vh></v>
<v t="peckj.20150324125832.1"><vh>add robots</vh></v>
</v>
</vnodes>
<tnodes>
<t tx="peckj.20140121082121.6598"></t>
<t tx="peckj.20140121082121.6599"></t>
<t tx="peckj.20140121082121.6601"></t>
<t tx="peckj.20140121082121.6602"></t>
<t tx="peckj.20140121082121.6612"></t>
<t tx="peckj.20140121082121.6635"></t>
<t tx="peckj.20140121082121.6636"></t>
<t tx="peckj.20140123082920.4925"></t>
<t tx="peckj.20140127083227.9752" annotate="7d71002855087072696f7269747971014b64550a707269736574646174657102550a323031352d30332d32347103752e" lineYOffset="4b032e" icons="5d71007d71012855026f6e71025505766e6f646571035504747970657104550466696c6571055507796f666673657471064b005508636c656f49636f6e7107550131710868055843000000433a5c63796777696e5c686f6d655c5065636b4a5c7265706f735c6c656f5c6c656f2d656469746f725c6c656f5c49636f6e735c636c656f5c63686b626c6b2e706e677109550478706164710a4b0155057768657265710b550e6265666f7265486561646c696e65710c5507786f6666736574710d4b02550772656c50617468710e580f000000636c656f5c63686b626c6b2e706e67710f75612e">@url http://flask.pocoo.org/snippets/10/</t>
<t tx="peckj.20140929083759.4142">@language python

import os

importdir = 'to-be-sorted'
destdir = 'pages'

# get list of files in importdir
files = os.listdir(importdir)

# operate on one file at a time
for article in files:
  # move to proper directory
  datestamp = article[:10]
  year = datestamp[:4]
  month = datestamp[5:7]
  day = datestamp[8:]
  
  path = os.path.join(destdir,year,month,day)
  try:
    os.makedirs(path)
  except:
    pass
  
  # rename the file
  newname = article[11:-4] + '.md'
  g.es(newname)
  os.rename(os.path.join(importdir,article), os.path.join(path,newname))</t>
<t tx="peckj.20140929083759.4143">@language python

import os

scandir = 'pages'

years = os.listdir(scandir)

for y in years:
  p = os.path.join(scandir, y)
  months = os.listdir(p)
  
  for m in months:
    p = os.path.join(scandir,y, m)
    days = os.listdir(p)
    if len(days) == 0:
      os.rmdir(p)
      g.es('deleted %s' % p)

</t>
<t tx="peckj.20140929083759.4144">@language python

import os

scandir = 'pages'

years = os.listdir(scandir)

for y in years:
  p = os.path.join(scandir, y)
  months = os.listdir(p)
  year = '@path %s' % y
  c.createNodeHierarchy(['@path pages', year])
  
  for m in months:
    p = os.path.join(scandir,y, m)
    month = '@path %s' % m
    c.createNodeHierarchy(['@path pages', year, month])
    days = os.listdir(p)
    
    for d in days:
      p = os.path.join(scandir, y, m, d)
      day = '@path %s' % d
      c.createNodeHierarchy(['@path pages', year, month, day])
      articles = os.listdir(p)
      
      for a in articles:
        p = os.path.join(scandir, y, m, d, a)
        article = '@edit %s' % a
        pos = c.createNodeHierarchy(['@path pages', year, month, day, article])
        c.selectPosition(pos)
        c.k.simulateCommand('refresh-from-disk')
        

c.redraw_now()
    
</t>
<t tx="peckj.20140929120632.5053"></t>
<t tx="peckj.20140929120632.5054"></t>
<t tx="peckj.20140929120632.5055"></t>
<t tx="peckj.20140929120632.5056"></t>
<t tx="peckj.20140929120632.5057">@language md
---
title: blahgger First Alpha
date: 2010-08-23

Hello all.

The blog that you are reading is running the first alpha version of my blogging 
software, blahgger.

blahgger is being developed as a lightweight, single-file (with external stylesheet)
 PHP/MySQL blogging solution. I undertook this as a bit of a personal challenge, 
 although I mainly wanted to avoid the bloat associated with the major-name 
 blogging CMS's (*cough*WordPress*cough*), which although provides modularity 
 and impressive features, just feels a bit too heavy for my needs: getting 
 things posted. So, I decided to write my own.

Current features include:

Full HTML posting
Commenting
Pagination
External Stylesheet
Simple edit-generate tables-edit-done installation process
Single-file portability
Auto-formatting
Sanitizing and HTML scraping for comments, to prevent abuse
Post permalinks
Unfortunately, I only have the front-end worked on. Once I have worked on the 
back-end to the point where it's usable (and I don't have to manually edit my
 MySQL tables to post and moderate), I will release it under the GPL.

Oh, it also has a logo, released under the Creative Commons 3.0-by-nd-nc license. 
Here it is:

![blahgger logo](https://github.com/gatesphere/blog-resources/raw/master/downloads/images/blahgger.png)


Leave a comment, tell me what you think, and suggest any future features that you would like to see! </t>
<t tx="peckj.20140929120632.5058">@language md
---
title: Welcome to my dev blog.
date: 2010-08-23

Hello, everybody. This is my dev blog.
I intend to use this blog to post updates about my progress with my various
development efforts and projects. All my programming and development will be
discussed here, including web apps, traditional software, and
microcontroller projects.

I hope you enjoy your stay. Feel free to look around and leave a comment. 

</t>
<t tx="peckj.20140929120632.5059">@language md
---
title: White Noise Generator for the MSP430
date: 2010-08-23
tags: [code-dump]

For my first project with the TI LaunchPad MSP-EXP430G2 device, I ported a simple 
white noise generator from an Arduino sketch. 

This specific code is for the G2231 
that comes preinstalled on the LP, but the code is light enough that it should 
work with any MSP430G2xxx uC. Just change the header file.

The circuit is simple. A piezo buzzer or mono output from P1.0 to GND. If you 
want to, you can remove the P1.0 jumper from J5, though it's not necessary.

The original Arduino sketch is available [here](https://code.google.com/p/greennoisehttps://github.com/gatesphere/blog-resources/raw/master/downloads/detail?name=prbsGen.pde).

And on to my code:

[click here](https://github.com/gatesphere/blog-resources/raw/master/downloads/source/launchpadwhitenoise.c).

This code could be easily modified into a pseudo random bit generator, or into 
using PWM for producing tones on an output pin.

This code got me thinking about working on a set of Arduino-like libraries for 
the MSP430G2xxx line uC's (should also work with the F2xxx line). I have made 
some progress in this endeavor, with pinMode(), digitalRead(), and digitalWrite() 
working. I will post with more info as it progresses.
</t>
<t tx="peckj.20140929120632.5060"></t>
<t tx="peckj.20140929120632.5061">@language md
---
title: MSPhere Framework
date: 2010-08-25

I have been developing a framework of helper functions for the TI MSP430 microcontrollers, with the aim of making the Arduino function collection available for the LaunchPad environment. So far, I have accomplished quite a bit of progress, but also hit a few walls.

First up, for the progress:

  - Created a core header file which defines main() and init(), and the HIGH, LOW, INPUT, and OUTPUT constants, and declares setup() and loop().
  - Mapped the GPIO pins to single numbers, like Arduino (P1.0-P1.7 are pins 0-7, P2.0-P2.7 are 8-15... meaning the 14 pin devices only have pins 0-7,14, and 15, but still...)
  - Created a header file defining the Arduino digital I/O functions (pinMode, digitalRead, digitalWrite) and tested.
  - Created a header file defining some of the Arduino math functions (min, max, abs, constrain, and map).

Now for the walls. It appears that including all of these functions in the code leads to severe overhead. My basic test program (blinks leds at intervals, and samples the math functions into variables) clocks in at

    Code Size - Text: 1166 bytes  Data: 2 bytes
    
so I am making the code modular, so that if one doesn't need a particular set of functions, they won't be adding bloat to the codebase. I will, however, also be looking into ways to condense these functions to take up less code space.

Oh, about the name. I had originally called it MSPduino, but [NJC](http://msp430launchpad.com/) suggested that I call it msphere, as a subtle way to include my web name. I recapitalized it as MSPhere, and realized that when capitalized this way, it emphasizes MSP and "here", signifying ease of use and control, while still giving me a subtle ego boost.

Where do I see this going? Potentially a free IDE ala Arduino, but that would be a long way down the road. Due to the current code bloat, I don't see myself using it for many of my own projects--once I get bit masking down, it'll become rather useless to me--but I do want to help the user community as much as possible, and all of this is a good exercise to introduce myself more fully to the MSP430 architecture and the LaunchPad platform.

Anyways, once I get a bit more done on it, I will release it to the community under the GNU GPLv3 license, and continue to update it as time allows. I will also encourage anyone who wishes to build upon it, so long as I am informed in some manner. I want to see it grow and prosper :)

Thanks for reading, and until next time, keep hacking. </t>
<t tx="peckj.20140929120632.5062"></t>
<t tx="peckj.20140929120632.5063">@language md
---
title: Quick MSPhere Update
date: 2010-08-26

I have set up a wiki for my site, and included a large section on the MSPhere framework. I will keep working on it as the framework progresses, and also intend on creating an "official" sort of webpage/landing/portal for MSPhere as well.
Linkity:

[MSPhere @ wiki.suspended-chord.info](http://wiki.suspended-chord.info/wikka.php?wakka=MSPhere)

[MSPhere homepage (future address, currently empty)](http://msphere.suspended-chord.info/)

That's all. Peace out. </t>
<t tx="peckj.20140929120632.5064"></t>
<t tx="peckj.20140929120632.5065">@language md
---
title: LaunchPad 74HC595 Shift Register Demo
date: 2010-08-27
tags: [code-dump]

Hey all. I wrote up a quick bit of code today to use a '595 shift register. It's a binary counter that counts from 0 to 255 and then restarts.
Code:

[click here](https://github.com/gatesphere/blog-resources/raw/master/downloads/source/launchpad595.c).

Basically, you set up the circuit as follows: (all pin numbers are in regards to the '595 chip, information available at [http://www.msarnoff.org/chipdb/74595](http://www.msarnoff.org/chipdb/74595))

Q0-Q7 (pins 1-7, 15): LED to ground, with suitable resistor in series.

GND (pin 8): ground, obviously.

Vcc (pin 16): Vcc, obviously :P

MR (pin 10): Vcc.

OE (pin 13): ground.

DS (pin 14): P1.0 on the LaunchPad

RCK (pin 12): P1.1 on the LaunchPad

SCK (pin 11): P1.2 on the LaunchPad

What the code does is count from 0 to 255, with each count setting the latch pin (RCK, P1.1) low to prevent flashing of the LEDs while shifting bits, and then calls shiftOut(), which breaks the value down into bits, writing them out to DS one at a time, while pulsing SCK low-high in the process to allow the bits to be shifted out. After that, the RCK is brought high again, allowing the LEDs to light in unison. Then there is a delay of 25000 clock cycles to allow the count to be followed by the human eye.

This was written in an attempt to prototype the shiftOut() function of the MSPhere framework, which is coming along swimmingly, and was recently featured on [43oh](http://43oh.com/)! Check the feature [here](http://www.43oh.com/2010/08/msp430-msphere-framework/trackback/).

Thanks for reading, and keep tweaking. </t>
<t tx="peckj.20140929120632.5066">@language md
---
title: Quick blahgger Update
date: 2010-08-27

I just updated blahgger to send an administrator configurable email address a message when a comment is posted on a post. This will help me keep track of comments here.
I'm also still working on the MSPhere documentation and coding. The wiki is coming along nicely, and I will have the MSPhere homepage up as soon as I get a few more of my ducks in a row involving a few things with the community (namely, a forum).

Thanks for reading, and keep tweaking.

That's all. </t>
<t tx="peckj.20140929120632.5067"></t>
<t tx="peckj.20140929120632.5068">@language md
---
title: Minor blahgger update and other musings.
date: 2010-08-31

My blogging platform blahgger now requires users to complete a reCAPTCHA challenge to successfully post a comment. This was added in response to spam comments I received today. I had intended to place a reCAPTCHA challenge into the comment system initially, but I figured it could wait a bit. But I'd rather not have any more spam. It feels like an invasion of my time (as I have to moderate comments manually) as well as my reading space. So, no more spam, hopefully. Sorry if this causes any inconvenience.
In other news, class has started up again, so I am working slower and slower on my personal projects. I am however going to continue to tinker and code whenever I can, so please stay tuned.

I also intend to have a small, simple homepage up for MSPhere by the end of the night, but don't be surprised if I don't. It'll be [here](http://msphere.suspended-chord.info/).

I have some TLV5620's coming from TI, and I intend to work on an audio synthesis shield for the MSP430 LaunchPad (and possibly the Arduino) focusing around this chip. This might take a while, but I will have a small library released for this chip for MSP430 uC's at the very least by the end of September.

That's enough of my ramblings for now. Keep tweaking. </t>
<t tx="peckj.20140929120632.5069"></t>
<t tx="peckj.20140929120632.5070"></t>
<t tx="peckj.20140929120632.5071">@language md
---
title: Texas Instruments TLV5620 library for MSP430 LaunchPad
date: 2010-09-06
tags: [code-dump]

Hey all.
I've written a library for the TLV5620 8-bit quad-channel DAC from TI. This is a wonderful little chip which works on the SPI interface and supports simultaneous update of all four channels of the DAC. Datasheet available from TI [here](http://www.ti.com/litv/pdf/slas110b).

The library is available for download from this very blog. The link is at the end of this post.

I have also coded up an example application showing all the features of the chip. Code available:

[click here](https://github.com/gatesphere/blog-resources/raw/master/downloads/source/launchpad5620waveform.c).

This example application is a simple quad-waveform generator operating on all four DACs the 5620 has, and updating them all simultaneously. The circuit is as follows (pin numbers refer to pins on the TLV5620):

pin 1 - GND (gnd)

pin 2 - VCC (vref for DACA)

pin 3 - VCC (vref for DACB)

pin 4 - VCC (vref for DACC)

pin 5 - VCC (vref for DACD)

pin 6 - P1.0 (data)

pin 7 - P1.2 (clock)

pin 8 - P1.3 (load, like data latch)

pin 9 - DACD output

pin 10 - DACC output

pin 11 - DACB output

pin 12 - DACA output

pin 13 - P1.1 (ldac, controls simultaneous update)

pin 14 - VCC (VDD)

The use of the library is relatively self-explanatory, by looking at the example code. One thing to note is that the function tlv5620_simultaneousUpdate() only should be called if you are using the simultaneous update feature of the TLV5620. Otherwise, I would suggest calling tlv5620_updateMode(ASYNCHRONOUS, LDACPIN, LDACPORT) at the beginning of your program to initialize the LDAC pin to LOW.

To compile this example, make sure the source file and the two source files in the library are in the same directory, and within whichever environment you use (untested outside of CCS4), that the symbol pertaining to whichever MSP430 you are using is defined. For example, make sure that __MSP430G2231__ is defined if you're using the G2231.

If anyone has any questions, just let me know either here or at the [43oh forums](http://www.43oh.com/forum/viewtopic.php?f=10&amp;t=66).

Download MSP430_TLV5620lib:

[version 20100906](https://github.com/gatesphere/blog-resources/raw/master/downloads/source/MSP430_TLV5620lib_20100906.zip)

Keep tweaking

EDIT: featured on 43oh, again! Link [here](http://www.43oh.com/2010/09/msp430-interface-to-a-ti-tlv5620-dac/)! </t>
<t tx="peckj.20140929120632.5072"></t>
<t tx="peckj.20140929120632.5073">@language md
---
title: MSPhere update
date: 2010-09-08

Hello all,
I've been busy at work at MSPhere, seeing as I have a relatively short class week due to Labor Day and Rosh Hashanah. So in between my light homework load, I've been coding a bit. Here's what I have so far, and what I have left to do before I feel it's fit for an initial release.

"Completed": (I use the term lightly, it's subject to change at a moment's notice)

  - MSPhere core lib
  - Digital I/O module
  - shiftOut() function for dealing with SPI, in the Advanced I/O module.
  - Math module
  - resistorMode() function for controlling internal pullup/down resistors

To be implemented before initial release:

  - functions for setting various LPMs
  - interrupt helper functions
  - timer/clock functions
  - delay() function, ala Arduino
  - pulseIn()... possibly

What will NOT be included in the initial release: ADC functions, for sure. Nor will flash memory functions. Those will come at a later date.

I will also offer an MSPhere-ized version of my TLV5620lib mentioned in the previous post as an additional library in a separate download. I feel that this chip-specific library doesn't belong in the main library, but that it could be useful to some people working with the MSPhere framework, so I will have a collection of add-on libraries to go along with the main framework, with my TLV5620lib being the first.

That's the current status. So, yeah. It's coming soon-ish, but not too soon.

Thanks for reading!

Keep tweaking </t>
<t tx="peckj.20140929120632.5074"></t>
<t tx="peckj.20140929120632.5075">@language md
---
title: Connecting a Parallax PIR Sensor module to the LaunchPad
date: 2010-09-12
tags: [code-dump]

Hello all.
A few days ago, I went to RadioShack to purchase a few parts. Among the components in the "sensors" drawer, I stumbled upon a PIR sensor from Parallax, datasheet available [here](http://www.parallax.com/sites/default/files/downloads/910-28027-PIR-Sensor-REV-A-Documentation-v1.4.pdf).

I thought, "hey, what the heck? I've wanted to toy around with one of these for a while, and it's only $10. Why not?". So I bought it.

I also thought, "I should be able to use this with both the LaunchPad and the Arduino due to the input voltage range." I was only partially correct on that last point.

So, I purchased the sensor, took it home, and started playing with it. At first, I didn't use it with anything but an LED. It was fun, lit the LED, and did it's job in detecting motion. Nice, simple, compact, and neat. Then I wrote a simple Arduino sketch to interface with the data output to light the LED on pin D13. It worked like a charm.

Then, I tried to do the same with the LaunchPad. It didn't work.

Well, it did, but not in a way that the datasheet made clear at all. The datasheet has absolutely no electrical characteristics listed at all. It simply states that the output is one-bit HIGH or LOW.

This is kind of hit or miss. The sensor outputs about 2/3 of the input voltage and calls it "HIGH". LOW, however, is tied to ground perfectly. I didn't discover this until I compared output to the full voltage reading on my oscilloscope (which is in reality a re-purposed Arduino), and it turns out that this is the missing link in the chain.

The LaunchPad operates at 3.3V, whereas the Arduino (or, at least, the Arduino Duemilanove) operates at 5V. When operating from a 5V source, the output pin pulses at ~3V. But when operating from a 3.3V source, such as the LaunchPad, the pulse is a mere ~1.7V. The MSP430 line, as juani_c from the [43oh! Forums](http://43oh.com/forum/) points out, requires 0.7*Vcc, or ~2.31V at Vcc=3.3V, to register as HIGH. (It seems the ATMEL uC's are much more sensitive) So clearly, powering from the LaunchPad's standard 3.3V is not going to be a valid option.

So, what I did, was tap in the the tie points on the LaunchPad, labeled TP1 and TP3. They are located near the USB port, and left unpopulated on the boards as shipped. According to the schematics found in the LaunchPad User's Guide, TP1 is connected to VBUS (USB's Voltage, which happens to be 5V), and TP3 is connected to the USB's GND.

So, I soldered a few one pin headers into these tie points (not an easy task, for one with unsteady hands... helping hands are a must) and used those to power the PIR. And guess what, it works!

So, after I made sure the sensor was working, I wrote up a simple little code example to share with you all.

Code available:

[click here](https://github.com/gatesphere/blog-resources/raw/master/downloads/source/launchpadpirsensor.c).

This is just a small example. The code sets up P1.5 as the input of the PIR sensor, and takes an interrupt on that pin to toggle LED1 when motion is detected by the PIR. LED2 is always on to indicate power. After everything is set up, the uC goes into LPM4 to conserve power, waking up on an interrupt on P1.5. It's rather simple, actually, but I think it could come in handy for some people to get a jump start on a motion detecting application of some sort.

Anyways, I hope you have enjoyed this, and that you find this helpful. As always, feel free to ask questions and leave comments. I will answer them as soon as I get them.

Thanks for reading!

Keep tweaking

EDIT: Now, photos!

1: Close up on TP1 and TP3 near the USB port. I also added headers to the other TP pins, just because I might need them in the future should I want to toy around with the emulator.
![1](https://github.com/gatesphere/blog-resources/raw/master/downloads/images/launchpadpir/LaunchPadPIR_01.png)

2: Solder points for TP1 and TP3. Ignore the bad soldering.
![2](https://github.com/gatesphere/blog-resources/raw/master/downloads/images/launchpadpir/LaunchPadPIR_02.png)

3: The full setup.
![3](https://github.com/gatesphere/blog-resources/raw/master/downloads/images/launchpadpir/LaunchPadPIR_03.png)

4: Close up on the 5V and GND connections. Alligator clips are sloppy, but it's all I had on hand.
![4](https://github.com/gatesphere/blog-resources/raw/master/downloads/images/launchpadpir/LaunchPadPIR_04.png)

5: In action, no movement (no red LED1 lit).
![5](https://github.com/gatesphere/blog-resources/raw/master/downloads/images/launchpadpir/LaunchPadPIR_05.png)

6: In action, movement detected (red LED1 is lit).
![6](https://github.com/gatesphere/blog-resources/raw/master/downloads/images/launchpadpir/LaunchPadPIR_06.png)

EDIT 2: Featured on [43oh](http://www.43oh.com/) for the third time. Link [here](http://www.43oh.com/2010/09/interface-the-launchpad-to-a-parallax-pir-sensor/). Thanks bluehash! </t>
<t tx="peckj.20140929120632.5076">@language md
---
title: Minor blahgger update
date: 2010-09-12

Another minor update:
I had logic errors in the page bar and the content printing for pages beyond the first. It just cropped up because last post is the first time the blog went beyond the first page (10 posts per page).

I also added a link to the front page under the header. I've been meaning to do that for a while.

That's it.

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5077"></t>
<t tx="peckj.20140929120632.5078">@language md
---
title: MSPhere initial release!
date: 2010-09-15
tags: [code-dump]

I am pleased to announce the initial release of the MSPhere framework for the TI LaunchPad platform! I have decided that it was time to let this code breathe, and find new life.

This release comes with a few caveats, however. It is an initial release, meaning that much of the planned functionality is missing. It also does not support MSPGCC4 at the moment, though it is easily portable. And, lastly, it does not have many of the features I outlined in my last MSPhere post. I decided that due to classes, and lack of free time, it would be more of a motivation to release this now and give me incentive to continue working on it, rather than let it stagnate on my hard drive. That being said, it does contain a lot of functionality, with 4 modules outside of the main module. It does not contain ADC code, TIMERA code, LPM code, or WDT+ code outside of a simple wdtHold() function. Also, the documentation is incomplete, but will be worked on as I find time. But I felt that if I didn't release it now, it would be buried under my studies, and neglected until the winter, or even later. So, here it is.

It does contain two demo programs, showcasing the features of the library: a simple '595 based binary counter, and a push-button led toggling program to show off interrupt handling and the internal pullup/pulldown resistor code.

Those of you who would wish to try it are invited to download it at the MSPhere site, [here](http://msphere.suspended-chord.info/).

Thanks for reading!

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5079"></t>
<t tx="peckj.20140929120632.5080">@language md
---
title: "Idea: CoreWars meets the LaunchPad"
date: 2010-09-19

Hello all,
I stumbled upon a really cool project called [Battle Droids](http://battledroids.net/) for the Atmel AVR microcontrollers. Basically, you build a physical representation of a battle droid by building a circuit of sensors around an AVR, then program it with their firmware, connect it to your computer, and have it do battle online through a client software. Your droid would gain experience, level up, and be able to purchase upgrades by winning fights. Unfortunately, this project has stagnated and seems to be out of development, and stuck in pre-beta with nothing of any note released.

Now, years ago, as a kid, I used to play [Core War](http://en.wikipedia.org/wiki/Core_War) (or CoreWars, how I say it). Basically, in CoreWars, you write a program in Red Code, a modified version of ASM, and have it do battle on a virtual "hill" to claim the title King of the Hill.

Here's where the idea is... I would like to something smimilar to CoreWars (with the emphasis on programming), but add in a physical layer like Battle Droids. Basically, you would choose a core, build a circuit of sensors and other input devices, write a program to control it, and have it fight other internet-connected bots. I think I'd call it something like "LaunchBots" or something else equally cheesy.

Here are some basic rules:

  1. All programs would have to be submitted to the administrator of the hill for verification and compilation. This is to allow the administrator to add a bit of security code to the file to allow the program to be authenticated by the server, to help prevent cheating. All programs will be checked against the guidelines set forth in the bot protocol document, and against the hill it was submitted for. An approved program will be sent back, compiled, with a secret security code added into the binary. This compiled binary is what the commander would upload to their bot.
  2. All programs must be written in C or MSP430 ASM, and have specific notes regarding which compiler to use. Programs which do not compile will not be accepted for obvious reasons.
  3. All bots would need to have a photo and a schematic submitted along with the program.
  4. All bots would need to connect using the client software, unmodified. This is to allow the authentication of bots and programs, and to prevent cheating. The client software will be open source, but will contain obfusticated encryption algorithms to help preserve the integrity of the competition.
  5. All commanders would be required to have their bot connected and the client software running during the entirety of the scheduled battle time. Any bots not connected when the battle is scheduled to begin will be disqualified, as will any who lose connection more than twice in a match. Disqualified bots will recieve maximum negative points for their leaderboard standings.
  
There will be a bot protocol document describing the various items to take into consideration during programming, including specifications which must be adhered to. There will be different speed classes (directly proportional to baud rate)- 4800 baud, 2400 baud, 1200 baud, 600 baud, 300 baud, 110 baud for stock, higher classes may be created for those using an external serial or usb-serial converter (such as an FTDI). Such classes would be subject to approval by a judge. Speed class is directly related to how quick your bot would be able to issue commands, but comes at a price of code size and efficiency.

There will also be various core classes, depending on the MSP430 device used (only ones supported directly by the LaunchPad's 14/20 pin socket will be allowed to compete).

The server software will be open source, allowing for people to run their own hills with or without the verification steps, and also to allow the builders/coders to test their bot before submitting it.

That's it for the basic idea. I'm going to look into this as a serious idea, and I welcome any suggestions/help from anyone else who thinks this would be a cool idea. If anything comes of this, it would be a LONG way away, but it would still be a really fun thing, I think. Let me know below!

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5081"></t>
<t tx="peckj.20140929120632.5082">@language md
---
title: "First MSPhere Auxiliary Library: TLV5620"
date: 2010-09-20
tags: [code-dump]

Hi all,

I did a port of [my previous library for the TLV5620](/?c=9) to the MSPhere framework, including the demo. This is classified as an "auxiliary library" since it depends upon the core framework, yet is a bit too specific to be included with it.

Anyways, you can get it at the [MSPhere website](http://msphere.suspended-chord.info/).

Development on the main library and documentation is coming. I am currently busy with classes, but I have some free time this week. I will use that to update the documentation on the [wiki](http://wiki.suspended-chord.info/).

Thanks for reading!

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5083"></t>
<t tx="peckj.20140929120632.5084">@language md
---
title: LaunchPad-based Glitchamin
date: 2010-09-23
tags: [code-dump]

Hey all,

I did a quick port of my [Arduino-based glitchamin](http://suspended-chord.info/portfolio/micros/glitchamin-arduino-2010/) to the LaunchPad. I did this mostly as a way to test out a way to write ADC10 code, which I will need for the MSPhere library in the near future.

Anyways, it works, it sounds a bit funky, and it's nowhere near as high fidelity as its Arduino cousin. But it is a start for both ADC code and audio genesis with the LP.

The circuit is pretty simple. It consists of the following:

P1.0 -&gt; voltage divider formed by a CDS cell and a 10k resistor
P1.1 -&gt; a 1k linear pot
P1.2 -&gt; a 10k linear pot
P1.5 -&gt; 8ohm speaker
The values on the three analog parts don't really matter, and if you wanted to, you could replace them with any analog components. And the speaker can be replaced by a piezo buzzer or a mono jack output. The circuit is rather flexible.

The code is available:

[here](https://github.com/gatesphere/blog-resources/raw/master/downloads/source/launchpadglitchamin.c).

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5085"></t>
<t tx="peckj.20140929120632.5086">@language md
---
title: LaunchPad-based Glitchamin, Take 2
date: 2010-09-24
tags: [code-dump]

Hello all.

So, I made a major mistake in the code for my [last post](/?c=16). It turns out that ignoring warnings about integers being truncated due to conversions is a bad idea. Basically, my code was reading the sensor pin correctly (INCH_0 = 0), but the CUTTER and CYCLE potentiometer pins (INCH_1 and INCH_2) were outside the range of a signed integer, and therefore the ADC was returning garbage data for those two pins. I swear, sometimes it's the smallest stuff that gets you.

Aside from fixing that major problem, I also sped up the sampling process a tad by telling the ADC to use MCLK, and by only holding for 4 cycles.

These fixes brought the LP-glitchamin right up to par with it's Arduino cousin.

Updated code available:

[click here](https://github.com/gatesphere/blog-resources/raw/master/downloads/source/launchpadglitchamin2.c).

Photos available:

1: The full setup, a bit messy.
![1](https://github.com/gatesphere/blog-resources/raw/master/downloads/images/launchpadglitchamin/LaunchPadGlitchamin_01.png)

2: Closeup on the breadboard side.
![2](https://github.com/gatesphere/blog-resources/raw/master/downloads/images/launchpadglitchamin/LaunchPadGlitchamin_02.png)

3: The CdS cell voltage divider in all its glory. :P I love CdS cells, they're awesome.
![3](https://github.com/gatesphere/blog-resources/raw/master/downloads/images/launchpadglitchamin/LaunchPadGlitchamin_03.png)

Soundclip available:

[(de)Modulator2](https://github.com/gatesphere/blog-resources/raw/master/downloads/sounds/deModulator2.mp3) - .mp3, 3:03, a bit painful but it gives you an idea of the range of sounds the instrument is capable of making.

That's about it! Thanks for reading.

Keep tweaking~

EDIT: Featured on [43oh!](http://43oh.com/), again! Check it out [here](http://www.43oh.com/2010/09/make-noise-with-the-launchpad-do-a-led-zep/). </t>
<t tx="peckj.20140929120632.5087"></t>
<t tx="peckj.20140929120632.5088">@language md
---
title: MSPhere Documentation Updated (finally)
date: 2010-09-25

Hi all,

Just writing to let you know that I've updated the MSPhere documentation so that it matches the current state of the library. Still to do is write up the "how to create a new MSPhere project in CCSv4" article, but the framework itself is now fully documented.

Check it out [here](http://wiki.suspended-chord.info/wikka.php?wakka=MSPhere).

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5089"></t>
<t tx="peckj.20140929120632.5090">@language md
---
title: Another blahgger update
date: 2010-09-29

Hello all,
I've pushed out a new version of blahgger to the server. This release contains very minor changes to the appearance of certain aspects of the blog, but add some interesting functionality in the form of a user-definable top-bar.

The bar at the top with the links is dual purpose. Using the same table in the MySQL database, the user can define either a static link to an external site, or a link to an internal custom content page. By setting a flag (called "link") to 1, it is marked as a link by the DB parser and generates a link out of the value of "content". However, if "link" is set to 0, the value of "content" is used to generate a hidden page of sorts, and the top-bar links to this page. This all happens in a simple 4 field table. The thought occurred to me today, and I somehow found enough free time to implement it.

This feature will also be making its way (under the hood) into ceekrt, sometime in the future, to remove the dependency on external pages for the "contact", "disclaimer", and "about" pages.

I still need to write a backend, and re-format the comment form before I'll be comfortable in releasing the source, but until then, I think that this blog (and blahgger) is looking good and shaping into something really professional and minimalist.

That's all for now. Any comment is appreciated :)

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5091"></t>
<t tx="peckj.20140929120632.5092">@language md
---
title: Yet another blahgger update
date: 2010-09-30

Hello all,

Two days in a row I have updated blahgger. Today I fixed a few bugs still lurking in the system, as well as reformatted the comment form, documented the code with comments, and removed any trace of the URL rewriting facility, as I have deemed it unnecessary and cumbersome.

Just some small edits, but basically all I have left before an initial release is to implement the category system and write a backend. Yeah, I just said "all" I have left. It'll still be a while, but the system is very usable and very stable (and thanks to the reCAPTCHA, pretty spam-free) as of now.

Let me know what you think!

Keep tweaking~</t>
<t tx="peckj.20140929120632.5093"></t>
<t tx="peckj.20140929120632.5094"></t>
<t tx="peckj.20140929120632.5095">@language md
---
title: Oh my god, another blahgger update
date: 2010-10-05

Third one in a row, but this one is really minor.

I've simply added support for [ASCIIMathML](http://www1.chapman.edu/~jipsen/mathml/asciimath.html). I have found the need to embed mathematical formulas in my posts occasionally, so this will help me format them nicely.

That's all.

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5096">@language md
---
title: Texas Instruments TLV5618A library for MSP430 LaunchPad
date: 2010-10-05
tags: [code-dump]

Hello all,

I have written up another library for the MSP430G2xxx value line chips, this time targeting the TLV5618A 12-bit dual-channel DAC from TI. (Datasheet available [here](http://www.ti.com/litv/pdf/slas230h).)

It has been written in much the same way as [my previous library for the TLV5620](/?c=9). I also plan to port it to the MSPhere framework as I did the [other one](/?c=15).

Anyways, there are a few important things to point out about the TLV5618A. Firstly, the '5618A has a "feature" of applying a 2X gain to the reference voltage, meaning that the input to the REF pin (pin 6 on the DIP) has to be half of the maximum range of whatever you are interfacing the DAC with. To get around this "feature", I used a simple voltage divider formed by two resistors of equal value.

[Aside: For those of you unfamiliar with a voltage divider, I'd suggest reading the [Wikipedia article](http://en.wikipedia.org/wiki/Voltage_divider) on them. But to sum up, by using two resistors between ground and your voltage source, tapping between the two resistors supplies a voltage based upon the values of the two resistors, and consistent with the following equation: Vo = (R2 / (R1 + R2)) * Vi, where Vo is the output voltage, Vi is the input voltage, and R1 and R2 are the values of the resistors. It can be shown that when R1 and R2 are the same (lets call it Rx), then the equation simplifies further, to Vo = (Rx / (Rx + Rx)) * Vi = (Rx / (2 * Rx)) * Vi = 0.5 * Vi.

Another thing to mention about the TLV5618A is that it has a power-down feature, in order to help preserve power and reduce consumption. However, one (undocumented, it seems) side effect of this is that putting it into power-down mode resets the value of BUFFER and DACB to CODE_4095 (full-on), causing undesirable effects if you are using both DAC channels the chip offers.

Also, to update the two channels simultaneously, you simply write the value for DACB to BUFFER (DACBUFFER in my library), and then write to DACA. Updating DACA also updates DACB with the value in BUFFER. To use the two separately, simply write to DACB rather than DACA. Writing to DACB also writes to DACBUFFER, so that when DACA is written, DACB is effectively unchanged.

And, last, but in my case also least, the '5618A has two speeds it can operate in, appropriately called SLOW and FAST. This refers to the setting time of each individual channel. But with the speeds that the MSP430G2xxx chips operate at, this is a non-factor. So, use FAST or SLOW to write. I wrote both into the code simply because I like to expose every aspect of a chip via a library, even if it is useless to the application I have in mind. This also makes porting to other architectures easier.

I have written an example application using the library.

Code available:

[click here](https://github.com/gatesphere/blog-resources/raw/master/downloads/source/launchpad5618awaveform.c).

This is a modified version of my quad waveform generator for the TLV5620. This one simply produces two waves, updated simultaneously. DACA is a rising sawtooth, and DACB is a falling sawtooth. The circuit is simple, and outlined in the schematic available at the bottom of the post.

So, without further stalling and rambling, here are associated files.

Images:

O'scope capture of output
![o'scope capture](https://github.com/gatesphere/blog-resources/raw/master/downloads/images/launchpad5618a/o-scope.png)

schematic

![schematic](https://github.com/gatesphere/blog-resources/raw/master/downloads/images/launchpad5618a/schematic.png)

Download MSP430_TLV5618Alib:

[version 20101005](https://github.com/gatesphere/blog-resources/raw/master/downloads/source/MSP430_TLV5618Alib_20101005.zip)

Thanks for reading!

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5097"></t>
<t tx="peckj.20140929120632.5098">@language md
---
title: Compiling code offline for the mbed NXP LPC1768
date: 2010-10-17

Hello all.

A while back on the [43oh!](http://43oh.com/) forums, bluehash posted a [link to a contest](http://www.circuitcellar.com/nxpmbeddesignchallenge/kit.htm) for the [mbed microcontroller platform](http://mbed.org/), including an application for a free evaluation mbed module. I applied, thinking that I wouldn't receive one, but it appears that NXP and Circuit Cellar are very generous and handed one out to me even though I specifically stated that I was a student (not a company), did this as a hobby (not a job), and had no idea what I would end up doing with it. They shipped one out to me, no questions asked. Unfortunately, free boards are no longer available, but I have to say, with the specs it has, it is a [very nice kit](http://mbed.org/handbook/mbed-NXP-LPC1768) for the price (~$60US).

Anyway, all that niceness comes with a hitch. The mbed platform was designed around a "cloud compiler", a web-based IDE which operates in the cloud, compiling your code and handing you a downloadable binary file to drop onto the mbed's storage module. This works well, and the API that the mbed organization has developed is very easy to use and rather thorough (even compared to the offering from the [Arduino](http://arduino.cc/) team), and with an online compiler, you never have to download new versions of software... everyone will be using the same version, pushed out to the server whenever there's an update.

But this approach has several drawbacks. Firstly, your code is stored on the cloud. This is fine for most home tinkerers like myself, but for someone using the mbed to simply have an easy to access LPC1768 while prototyping a product or something could have issues with this. Secondly, the mbed API is closed source. I am a major proponent of free libre open source software. Yes, I use TI's CCS, but that's because at the moment I don't have the time to delve into setting up mspgcc4. Thirdly, and this is the biggie for me, if you don't have an active or reliable internet connection, you are left out in the cold. The device, as presented by mbed, is unprogrammable without the internet. This point to me seems a bit ridiculous.

So, upon receiving my mbed and confirming that it works by burning the "hello world" blinky program to it, I decided to find a reliable, easy way to compile code for it offline, with free libre open source software if possible. After a bit of digging and a few dead ends, I found a dead-simple solution.

The mbed is nothing more than a (slightly neutered, slightly enhanced) LPC1768 platform. There is nothing stopping this thing from running any ARM Cortex-M3 code you throw at it. So, I simply looked around for a solution using gcc-arm. Turns out, there is a similar product called the [LPCXpresso](http://ics.nxp.com/lpcxpresso/) (which I am considering purchasing), and there is a free version of the Code Red Suite IDE available for it called (uncreatively enough) the LPCXpresso IDE. This IDE is Eclipse based, so it is familiar to a lot of people (including those who use TI's CCS, which is also Eclipse based), and also very powerful. This one also has the advantage of using gcc-arm for the backend. The IDE is limited when using the LPCXpresso boards, as the free version (once registered) has a flash download limit of 128k. But because it uses arm-gcc as the backend, it has an unlimited compile size. And, as the mbed cannot be flashed in the traditional way thanks to it's "innovative" drag2flash magic-chip (their terms, not mine), this effectively renders the LPCXpresso IDE limitless when it comes to compiling code for the mbed.

So, enough of my bantering, on to how to do it. I'll list steps in an ordered list here to simplify the process as much as possible. Note, all of my instruction comes from working with a Windows machine. I do not know how the Linux version of the LPCXpresso IDE differs from the Windows version other than the obvious path names and such.

  1. Get an mbed.
  2. Go to the [LPCXpresso IDE](http://lpcxpresso.code-red-tech.com/LPCXpresso/) page, and register an account. Once that is done, download the appropriate version of the IDE for your platform.
  3. Install the IDE. During setup, you might be asked if you want to install the Debug drivers and the NXP-link drivers. These are completely un-necessary if you are going to be using this IDE strictly for the mbed. The mbed unfortunately cannot be debugged, nor can the chip be completely reflashed, as the mbed module lacks the JTAG breakouts.
  4. Once installed, run the IDE. To stop the annoying nag message, you should activate your product (it's free). To do this, go to Help&gt;Product Activation&gt;Create Serial number and Activate. This will give you a serial number. On the LPCXpresso IDE site, you can click My Registrations, and enter this serial number. Once you do that, check your email. You will have received an activation code. Go to Help&gt;Product Activation&gt;Enter Activation Code and paste in the code emailed to you. This will register your IDE. Again, this step is optional, but it prevents a nag-box from appearing every time you open the IDE.
  
And that's all you need to get the IDE.

Now on to some code. The IDE comes with several examples to get you started. To import these examples, go to the button at the top of the IDE that looks like a blue circle with a lightbulb in it. From there, click browse, then go to NXP&gt;LPC1000&gt;LPC17xx&gt;RDB1768cmsis.zip. On the next screen, deselect all, then choose the first one (CMSIS) and the one called LEDflash. This will help us get a simple hello-world up and going. These projects will import, and be ready to compile.

Well, almost. This project (LEDflash, the CMSIS one is a low-level interface library between the C code and the registers in assembly which the LEDflash project depends upon) was designed for Code Red's LPC1768 board, which has LEDs on different pins than the mbed. So a few small changes to the code are in order. Open up "leds.h" and replace the first chunk with the correct pin numbers of the LEDs (change LED_5 to LED_1 wherever it appears in this file). According to the [mbed schematic](http://mbed.org/media/uploads/chris/mbed-005.1.pdf), The user LEDs are connected to P1.18 (LED1), P1.20 (LED2), P1.21 (LED3), and P1.23 (LED4). Change the values of the #defines accordingly. Save, now open up "main_ledflash.c". Wherever LED_5 appears, replace it with LED_1. Save, and you're ready to compile.

Go to Project&gt;Build Project. The project will build. There's one last step to getting it mbed-ready. Over in the left hand panel, click on binaries (under LEDflash), then right click on the .axf file, go to Binary Utilities&gt;Create binary. This will take almost no time at all, and the status bar at the bottom of the IDE will display "Successful". Now find the folder where your workspace is located (right click&gt;properties on the .axf file, and look under Location). In that folder will be a .bin file (created in the last step). Copy that .bin file to your mbed, hit the reset button, and enjoy your (extended) hello-world blinky example!

This has been a long post, but an enlightening one, I hope. I may end up developing an LPChere framework similar to my MSPhere framework, but not at this moment in time. For now, I'm just happy that I was able to find a solution, and I hope this has helped anyone who actually took time out of their day to read it. Thanks for reading, and comments are always appreciated :)

Keep tweaking~

**EDIT (21 May 2011):** Daniel Marks just emailed me the following information that might be helpful for others:

I just read your blog entry from Oct 17 and I wanted to let you know that you can just use Codesourcery G++ lite ([http://www.codesourcery.com/sgpp/lite/arm](http://www.codesourcery.com/sgpp/lite/arm)) or just compile arm-non-eabi-gcc toolchain yourself to use with the mbed. I did this for use with my open source project Jumentum ([http://jumentum.sourceforge.net/](http://jumentum.sourceforge.net/)). My project is an open source BASIC language for LPC microcontrollers that resides on the microcontroller.

If you download the source code for Jumentum you will find ported CMSIS and other sample source code for LPC1768, or you could just try the mbed port of Jumentum directly.

Dan </t>
<t tx="peckj.20140929120632.5099"></t>
<t tx="peckj.20140929120632.5100">@language md
---
title: I just keep tweaking blahgger
date: 2010-10-18

Hi all,

Another small update for blahgger. I changed the text to justify alignment for posts and custom user content, and also moved the reCAPTCHA library into a module in order to allow more flexibility to blog maintainers if they don't wish to use the reCAPTCHA system. All a user has to do is set $enablemodule_recaptcha = FALSE; and this will prevent any reCAPTCHA related things from happening.

It's shaping up, I just wish I had more time to work on it... :(

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5101"></t>
<t tx="peckj.20140929120632.5102">@language md
---
title: "Hardware Hack: DIY $3 contact mic/piezo pickup"
date: 2010-10-22

Hello all,

Just thought I'd do a post about a hardware hack I threw together. I have built a contact mic out of $3 of parts from RadioShack. Less if you buy the parts online somewhere. Here's what it entails:

Parts and equipment:

  - Piezo transducer element with two lead wires (I used RadioShack part 273-073)
  - 1/4" mono jack
  - Soldering iron and solder
  - Wire (optional)
  - Electrical tape or heat-shrink tubing (I used electrical tape as I have no heat-shrink)
  - That's all you need. The first step is optional, and just increases the length between the mic and the output plug.

Instructions:

  1. (optional) Solder lead wire to desired length to the two terminals of the mono jack.
  2. If your piezo element came in a plastic or metal housing of some sort, break it out of the housing carefully without damaging the piezo disk inside.
  3. Solder the positive lead (red on the RS parts, the one attached to the silvery/white part of the piezo disk) to the tip terminal on the mono jack (or lead wire).
  4. Solder the negative lead (black on the RS parts, attached to the gold-colored rim of the piezo disk) to the barrel terminal on the mono jack (or lead wire).
  5. Tape or shrink tube the two solder points.
  6. Tape or shrink tube the wires together to add stability.
  7. Add a small amount of electrical tape over the solder dots on the piezo disk to protect the joints.

That's it!

It works fantastically, just tape the gold side of the disk to whatever you want to record/amplify. It even works on throats, rather nicely (my roommate is rather awesome and suggested that). Pictures and demo recording below.

Photos:

Parts 

![parts](https://github.com/gatesphere/blog-resources/raw/master/downloads/images/piezomic/PiezoMic_01.png)

Assembled, pre-soldering 

![assembled, pre-soldering](https://github.com/gatesphere/blog-resources/raw/master/downloads/images/piezomic/PiezoMic_02.png)

Finished product (version with lead wires)

![finished product](https://github.com/gatesphere/blog-resources/raw/master/downloads/images/piezomic/PiezoMic_03.png)

Demo recording:

[Piezo Mic Demo](https://github.com/gatesphere/blog-resources/raw/master/downloads/sounds/piezomic_demo.mp3) - recorded from my guitar, just to show the range

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5103">@language md
---
title: YABU - Yet another blahgger update
date: 2010-10-22

Hello all,

I did another quick update to blahgger. This time I added the name of the individual post or custom content page being viewed to the html &amp;lt;title&amp;gt; tag. If no individual piece of content is being viewed, the title remains the same. That's it.

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5104"></t>
<t tx="peckj.20140929120632.5105"></t>
<t tx="peckj.20140929120632.5106">@language md
---
title: MSP430G2xxx based Tea Timer
date: 2010-11-08

Hello all,

I am an avid tea drinker. As such, I make many cups of various kinds of tea, each with their own optimal steep times. Usually, I just keep track of the time, but I have found that I can make the best cup of tea by setting a timer to go off after a certain amount of time, depending on the style of tea that I am brewing. I find the best results come from going by the following table (based on personal preference and experimentation):

&lt;table&gt;&lt;p&gt;
  &lt;tr&gt;&lt;p&gt;
    &lt;td&gt;&lt;b&gt;Tea Variety&lt;/b&gt;&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;&lt;b&gt;Recommended Steep Time&lt;/b&gt;&lt;/td&gt;&lt;p&gt;
  &lt;/tr&gt;&lt;p&gt;
  &lt;tr&gt;&lt;p&gt;
    &lt;td&gt;White tea&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;2 minutes&lt;/td&gt;&lt;p&gt;
  &lt;/tr&gt;&lt;p&gt;
  &lt;tr&gt;&lt;p&gt;
    &lt;td&gt;Green tea&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;3 minutes&lt;/td&gt;&lt;p&gt;
  &lt;/tr&gt;&lt;p&gt;
  &lt;tr&gt;&lt;p&gt;
    &lt;td&gt;Black/Oolong tea&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;4 minutes&lt;/td&gt;&lt;p&gt;
  &lt;/tr&gt;&lt;p&gt;
  &lt;tr&gt;&lt;p&gt;
    &lt;td&gt;Herbal tea/infusions (most varieties)&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;5 minutes&lt;/td&gt;&lt;p&gt;
  &lt;/tr&gt;&lt;p&gt;
  &lt;tr&gt;&lt;p&gt;
    &lt;td&gt;Rooibos tea (African redbush)&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;6 minutes&lt;/td&gt;&lt;p&gt;
  &lt;/tr&gt;&lt;p&gt;
  &lt;tr&gt;&lt;p&gt;
    &lt;td&gt;Chai tea (regardless of base)&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;8 minutes&lt;/td&gt;&lt;p&gt;
  &lt;/tr&gt;&lt;p&gt;
  &lt;tr&gt;&lt;p&gt;
    &lt;td&gt;Kukicha twig tea and other varieties&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;in intervals of 1 minute&lt;/td&gt;&lt;p&gt;
  &lt;/tr&gt;&lt;p&gt;
&lt;/table&gt;

With this in mind, I decided that I should make a tea timer. This seems simple enough, and it has been on my to-do list for a while anyway, and [43oh!](http://43oh.com/) is having an [MSP430 Project of the Month Contest](http://www.43oh.com/forum/viewtopic.php?f=13&amp;t=166), so I decided to hack it together. Turned out rather simple.

The full part count is as follows:

  - 3 toggle switches (or a 3-switch DIP, as I used)
  - 4 10k resistors
  - 1 5mm green LED
  - 1 piezo buzzer with integrated driver circuit
  - 1 tact switch/push button
  - wire
  - Any MSP430 uC with at least 1k flash and a TimerA module (though I could have hacked the WDT to work)
  
So, I assembled the circuit on my breadboard, following the schematic at the end of my post, and programmed the MSP430.

For the code, I borrowed [beretta's](http://mspsci.blogspot.com/) TimerA code example, and tweaked it to fit the needs of my timer. The timer is to read the input value of the three switches as a binary value to determine tea type, set a "goal" amount of half-second ticks based upon the user's request, and when the user presses the "start" button, go into a waiting period. While the uC is waiting, the LED will be flashed slowly at first, but increasingly faster as the timer ticks closer to the goal. Once the goal amount of ticks has been reached, the LED will be turned on, and the buzzer will sound (mine sounds reminiscent of an old-fashioned tea kettle, so it's suitable). The buzzing can be stopped by pressing the "start" button again to reset the device, and allow another time to be set. Simple enough, right?

The code is available:

[click here](https://github.com/gatesphere/blog-resources/raw/master/downloads/source/g2xxx-teatimer.c).

Basically, as I stated above, the user selects a mode (tea type) by way of the three switches, and then presses a button to start the timer. When the tea is done steeping, the buzzer goes off, and the user can press the button again to reset it. The switch positions corresponding to the tea types are as follows:

&lt;table&gt;&lt;p&gt;
  &lt;tr&gt;&lt;p&gt;
    &lt;td&gt;&lt;b&gt;P1.6&lt;/b&gt;&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;&lt;b&gt;P1.5&lt;/b&gt;&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;&lt;b&gt;P1.4&lt;/b&gt;&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;&lt;b&gt;Tea type (time)&lt;/b&gt;&lt;/td&gt;&lt;p&gt;
  &lt;/td&gt;&lt;p&gt;
  &lt;tr&gt;&lt;p&gt;
    &lt;td&gt;0&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;0&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;0&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;White Tea (2 minutes)&lt;/td&gt;&lt;p&gt;
  &lt;/tr&gt;&lt;p&gt;
  &lt;tr&gt;&lt;p&gt;
    &lt;td&gt;0&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;0&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;1&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;Green Tea (3 minutes)&lt;/td&gt;&lt;p&gt;
  &lt;/tr&gt;&lt;p&gt;
  &lt;tr&gt;&lt;p&gt;
    &lt;td&gt;0&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;1&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;0&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;Black/Oolong Tea (4 minutes)&lt;/td&gt;&lt;p&gt;
  &lt;/tr&gt;&lt;p&gt;
  &lt;tr&gt;&lt;p&gt;
    &lt;td&gt;0&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;1&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;1&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;Herbal Tea/Infusions (5 minutes)&lt;/td&gt;&lt;p&gt;
  &lt;/tr&gt;&lt;p&gt;
  &lt;tr&gt;&lt;p&gt;
    &lt;td&gt;1&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;0&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;0&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;Chai Tea (8 minutes)&lt;/td&gt;&lt;p&gt;
  &lt;/tr&gt;&lt;p&gt;
  &lt;tr&gt;&lt;p&gt;
    &lt;td&gt;1&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;0&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;1&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;Rooibos Tea (6 minutes)&lt;/td&gt;&lt;p&gt;
  &lt;/tr&gt;&lt;p&gt;
  &lt;tr&gt;&lt;p&gt;
    &lt;td&gt;1&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;1&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;0&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;Other1 (1 minute)&lt;/td&gt;&lt;p&gt;
  &lt;/tr&gt;&lt;p&gt;
  &lt;tr&gt;&lt;p&gt;
    &lt;td&gt;1&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;1&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;1&lt;/td&gt;&lt;p&gt;
    &lt;td&gt;Other2 (30 seconds)&lt;/td&gt;&lt;p&gt;
  &lt;/tr&gt;&lt;p&gt;
&lt;/table&gt;

Now, this isn't the most accurate timer, as I'm not using the crystal, but it's accurate enough to steep a good cup of tea (believe me, I've used it a lot since I hacked it together), and my stopwatch tells me it's accurate to within around 6 seconds on average.

In the future, I'd like to use a better input mechanism (I might be geeky enough to remember binary codes for tea types, but most are not, so a rotary switch or something would be perfect), maybe a cheap LCD for a status indicator, even showing how much time remains, and potentially having the last two codes (110 and 111) be user programmable for any time in second increments up to half of an unsigned long (as the ticks are half-second ticks). Maybe even shove it all into an Altoids tin for portability and the geek-chic factor. Who knows?

Anyways, here's the schematic, and a photo of it in action:

Tea-Timer in action! (notice the LaunchPad is only used as a power supply here... I don't have a battery clip yet.)

![tea-timer in action!](https://github.com/gatesphere/blog-resources/raw/master/downloads/images/g2xxxteatimer/teatimer.png)

schematic

![schematic](https://github.com/gatesphere/blog-resources/raw/master/downloads/images/g2xxxteatimer/schematic.png)

Thanks for reading!

Keep tweaking~

**EDIT:** Featured on 43oh! again! Check it [here](http://www.43oh.com/2010/11/msp430_tea_timer_steep/)!

**EDIT THE SECOND:** Ended up tied for 4th place. Congratulations to the winners, AMagill and simpleavr! Check out the results [here](http://43oh.com/forum/viewtopic.php?f=9&amp;t=167&amp;start=0). </t>
<t tx="peckj.20140929120632.5107"></t>
<t tx="peckj.20140929120632.5108"></t>
<t tx="peckj.20140929120632.5109">@language md
---
title: Property of the University, hacking, music, life of blocks, and other things...
date: 2010-12-01

Hello all,

I've been awful silent lately. Well, sorry about that. School's been making me it's property, so I haven't had much time to do anything else. Oh, and I've been playing [Minecraft Alpha](http://www.minecraft.net/) a lot lately. But, there's only a week and a half left of class, and then finals, and I will be free again (for about a month). So, I'll be doing more cool things over my short break. Just stay tuned.

I have been thinking about some of my projects, mostly software related. Here's what I would like to accomplish during my break.

Firstly, I intend to make a backend for both blahgger and the current iteration of ceekrt (yes, current iteration... I'll come back to this). Currently, I am administering both of these projects by editing the MySQL databases directly, so this will have to change. Also, make the category system in both blahgger and ceekrt, and add permalinks to the current iteration of ceekrt.

Secondly, from playing Minecraft, and realizing that it is a clone of [Infiniminer](http://thesiteformerlyknownas.zachtronicsindustries.com/?p=713), something in me was compelled to play an old game I used to love, [Dark Signs](http://www.darksignsonline.com/forum/viewtopic.php?f=18&amp;t=922). (sorry, only link I could find for it, it's truly a dead game, which is a shame). Dark Signs is a "hacking simulation game", meaning that you are dumped into a console, with an email message requesting help to complete a "sensitive mission". It is crazy fun, if you're interested in computer security and puzzles. Well, I've decided that I'd like to make a cross-platform "clone" of sorts. I'd like to keep the same basic gameplay (connect, exploit, profit), but make it more real-world, and perhaps more complex. I have settled on Java as the language to program this in, with a partial list of features scribbled down haphazardly in my notebook. I have a feeling it's going to be a good thing, if I can actually follow through with it. I'm going to be using the (sadly abandoned, but still rather usable) [Enigma Console](http://sourceforge.net/projects/enigma-shell/) Java library to handle console display in a cross-platform way - anything with a JVM that can handle Swing will be able to run this game. I'm calling it "coldnet" for now, and the shell is going to be called "blash" for "BLAck SHell" or something like that. Silly, I know, but it's a game. I know that I will not come anywhere near a finished version of this over a 1 month break, but I would like to at least get it started.

Thirdly, I started on a little something yesterday that I'm calling "fileslave". It's a single-file PHP file manager for running a personal or shared file-drop service. Think of it as [PHPDL](http://greg-j.com/phpdl/) with upload/download capability, password protection, and other fancy features. It'll be open source, of course. And yeah, the name isn't exactly politically correct, but this will never be a commercial product, so I don't honestly care. Plus I think it sounds cool, and accurately purveys what the app will do.

Fourthly, I will continue work on MSPhere and start work on LPChere if at all possible.

Fifthly, I'll post here on a quick little build I did of what I'm calling "stickies", modified versions of the throwies that people post about all over the place. My build is much cheaper, costing only pennies per sticky, but at the cost of having to physically place them rather than throw them. Lots of room for improvement, but a cool idea nonetheless.

Sixthly, I might release (after a bit more work) a simple Java library I wrote to make parsing argument strings easier. I will definitely be using this in coldnet, so I might as well release it on it's own right. I call it JEclap, for Java Easy Command Line Argument Parser, but really, it works on any string of tokens.

Finally, and this is something for next semester, not over break, I will be rewriting the ceekrt engine and opening the site with a proper domain name. The site will no longer be called ceekrt (though the codebase will), but I cannot say what it will be called here. The reason for this is that ceekrt is my first major project that I have seen even a tiny bit of success with, and I am taking a web services course next semester, which requires students to come up with an idea for a web app and build it. I figured I'd take this opportunity to both make ceekrt something I can really be proud of, and also to add something to my resume. I'm slowly making a name for myself in the internet world, which will be all the more helpful when it comes time to find a real job.

However, all of this takes back seat to my Honors Thesis on Algorithmic Composition. I've come up with some clever ideas for that already, but I have a lot of research to do with that still. If you're interested, you can look at my work thus far at [my thesis page](http://thesis.suspended-chord.info/). Also, I will be working at least one day a week, most likely more. But, I at least have a to-do list.

That's it for me.

Happy December! And thanks for reading.

Keep tweaking~</t>
<t tx="peckj.20140929120632.5110"></t>
<t tx="peckj.20140929120632.5111">@language md
---
title: Potential information on new MSP430G2xxx Value Line chips?
date: 2010-12-10

Hello everybody.

I might have stumbled upon some new information for chips coming to the MSOP430G2xxx Value Line series soon. In a recent update of TI's CCSv4, a bunch of new headers were (stealthily) installed. I just happened upon these headers, and decided to take a look. What I found was four new families of chips, each available in 4 flash sizes (or so I assume) for a total of 16 new chips. These new chips are also (not very stealthily) available in the CCS New Project Wizard after the update. But, from scouring the headers, here is what I've found. Please note, all flash sizes are just speculations, based upon educated observation of TI's numbering schema. These could probably be confirmed by looking in the linker files, but I'm not educated in their makeup, so I did not try to confirm any of this. Also, x in a part number anywhere below can be replaced with your choice of 1, 2, 3, or 4.

Family 1: The MSP430G2x02 Family

  - Flash2 (1 / 2 / 4 / 8k?)
  - TimerA_3
  - USI
  - Calibration data for 16/12/8/1MHz

Family 2: The MSP430G2x12 Family

  - Comparator A+
  - Flash2 (1 / 2 / 4 / 8k?)
  - TimerA_3
  - USI
  - Calibration data for 16/12/8/1MHz

Family 3: The MSP430G2x32 Family

  - ADC10
  - Flash2 (1 / 2 / 4 / 8k?)
  - TimerA_3
  - USI
  - Calibration data for 16/12/8/1MHz

Family 4: The MSP430G2x52 Family

  - ADC10
  - Comparator A+
  - Flash2 (1 / 2 / 4 / 8k?)
  - TimerA_3
  - USI
  - Calibration data for 16/12/8/1MHz

Three important things to note. First, if my speculations for flash size hold true, then this batch would mark the first value line devices that reach more than 2k. Second, all of these chips have calibration data for speeds above 1MHz, making these the first value line devices that don't have to be [hacked](http://naturetm.com/?p=91) to add the "missing" calibration data. Third, the G2x52 family chips are the first in the value line to contain both the ADC10 and Comparator A+ modules. One other small note is the switch from TimerA_2 used in all the previous value line chips to the TimerA_3 module. I'm not sure what change, if any, this will have on TimerA code (all the usual registers are defined), but it's worth noting, if only on a technical level.

Searching for any of these part numbers on TI's website currently gives a valid product page, but without any information at all, including data sheets and samples. They are also unlisted on the MSP430G2xxx Value Line page.

I, for one, am really looking forward to the G2432 and G2452 chips. Hopefully these will give me a bit more room to breathe, code-wise.

Keep tweaking~

**EDIT:** I have done some snooping around in the lnk_msp430g2xx2.cmd files, and confirmed the flash sizes for these new chips. Also, NatureTM pointed out that they all have 256 bytes of RAM, always a good thing. So, according to the linker files, the G2102, G2112, G2132, and G2152 all have 1k, the G2202, G2212, G2232, and G2252 all have 2k, the G2302, G2312, G2332, and G2352 all have 4k, and the G2402, G2412, G2432, and G2452 all have 8k of flash space. Thanks to OCY for pointing me in the right direction, and to NatureTM for noticing the RAM size.

**EDIT 2:** Featured on 43oh!, [here](http://www.43oh.com/2010/12/new-ti-msp430g2xxx-parts-on-their-way/). </t>
<t tx="peckj.20140929120632.5112"></t>
<t tx="peckj.20140929120632.5113"></t>
<t tx="peckj.20140929120632.5114"></t>
<t tx="peckj.20140929120632.5115">@language md
---
title: An update on life
date: 2011-02-04

Hello all,

I've been away for far too long, it seems. Unfortunately, I was unable to do most of the things on that to-do list that I posted a while back. Life got in the way. I'm sure you all know how that is.

However, I am working on several projects right now. First and foremost is my thesis, which I am also using as a part of my AI course at the moment. Aside from that, I am working on a project for Web Services, which entails me rewriting ceekrt in JavaEE. Fun times :P

However, I do have some code for MSPhere to release, and I still have the TLV5618A library to port to it. Thanks to a few others, I have some submissions to add and make it more community based. So, be on the lookout for that. Also, I would absolutely love to release JEclap sometime soon. But that requires more work still.

Blahgger and the current iteration of ceekrt have taken a back seat for now, along with fileslave (which is still an early prototype). Work will resume on those as time permits (maybe this weekend?).

That's all I've got for now, just wanted to let you all know I'm still alive and kicking. :)

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5116"></t>
<t tx="peckj.20140929120632.5117"></t>
<t tx="peckj.20140929120632.5118">@language md
---
title: This surely was a triumph
date: 2011-03-23

Hello all,

I'm sorry I keep neglecting this blog, but I simply have been up to my ears in work. But, the wheels keep turning.

Since the last time I wrote, I've accomplished nothing in the domain of MSPhere or JEclap. As far as MSPhere goes, I might end up collaborating with the author of ["friendly launchpad"](https://github.com/chrishulbert/friendly_launchpad) in order to streamline the whole process. Things are still up in the air.

As far as development goes, I'm tied down with classes at the moment, but I have decided that I am going to get some serious work done this summer on my various projects, maybe even bringing [Muscover](http://suspended-chord.info/portfolio/inprogress/muscover-computing/) to life. Pretty much the only personal development I've been able to do is my brief step into the realm of algorithmic art, via the use of the [Processing](http://processing.org/) language. Those of you who follow my [deviantART page](http://suspended-chord.deviantart.com/) have seen some of the results of that, and I intend to have a larger gallery for display on my portfolio soon, possibly even later today.

In non-development related news:

I have also decided to place a donate button on my portfolio page, in an unobtrusive manner. This is not a way to beg for money, but just a way for me to potentially fund my endeavors. So far, everything I've done has been at personal cost to me. I have no problems with any of this, but from this point on, if anyone else feels like assisting, there is now that option available. There may even be a small perk in it for you, who knows... ;)

I have also started to work on my next release in the A Question Malformed series, Fluid, in earnest. I have some surprises in store, and also a lot of work ahead of me. Fluid will be my first full-length that was actually conceived as an album (the stuff in //shards was just a collection of songs that didn't fit anywhere else), but I hope to have the whole shebang finished by the end of August. I have already recorded 2 out of 12 tracks, and I have around 3 others written. This release is looking to cost me around $170 for the 10 physical copies, so there's another reason for the donate button.

Anyways, thanks for reading.

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5119"></t>
<t tx="peckj.20140929120632.5120"></t>
<t tx="peckj.20140929120632.5121">@language md
---
title: Another "I'm sorry" from me
date: 2011-04-15

Hello all,

So, recently I had to close the alpha test of ceekrt. I'm thinking of doing a postmortem, but basically, never invite friends to test.

I'm swamped at the moment still, but I see the light at the end of finals week approaching about a month away. So I will begin to work in earnest then. I get too wrapped up in my school work to really get anything else done. But, I have a few ideas for 43oh! Project of the Month entries, and I want to see them through this summer. I just need to get my hands on some continuous rotation servos and some more piezo elements.

I've also recently set up the development platform for my next major project, Muscover. I'm not going to say much about it, other than that my dev platform uses XAMPP, MongoDB, JQuery, and the 960 grid system. It involves a lot of learning, but I hope to have a very presentable product at the end of it.

And, that's that I suppose. I'll come back and work more soon, I promise!

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5122"></t>
<t tx="peckj.20140929120632.5123">@language md
---
title: Featured on TI's site, and free NXP board
date: 2011-04-20

Hello everyone,

Just thought I'd post that I've been featured on TI's site, twice.

The first was for my [TLV5620 work](http://e2e.ti.com/group/msp430launchpad/m/project/373466.aspx), although they used the pic from my TLV5618A post :P

The second was for my [LaunchPad based Glitchamin](http://e2e.ti.com/group/msp430launchpad/m/project/373478.aspx).

I also received an LPCXpresso LPC1114 board in the mail free, a day ago or so. Neat :)

That's all.

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5124"></t>
<t tx="peckj.20140929120632.5125"></t>
<t tx="peckj.20140929120632.5126">@language md
---
title: Ideas, ideas...
date: 2011-05-03

So, this is the last week of classes for me, and I already have a list a mile long of things I want to do this summer, development wise. What will actually get accomplished is to be seen.

One thing that I know I'm working on will be a small web app that members of [43oh](http://43oh.com/) should appreciate... It's web based, and I'll offer them access to the beta test.

Aside from that, research opportunities have opened up all around me. I'm working on a small project involving cellular automata and networks that I'd like to expand once the semester is over. And I'm loving the Processing language.

Oh, and I'd love to write a roguelike for the Barnes &amp; Noble nook (classic, not color). It'd be a neat intro to Android development, and fill a niche that is sorely empty on that platform. Of course, it would only run on rooted nooks, but it's still a neat project that I'll probably take up in my spare time.

Anyways, just thought I'd do a small update. Thanks for reading :)

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5127"></t>
<t tx="peckj.20140929120632.5128">@language md
---
title: JEClap released!
date: 2011-05-15
tags: [code-dump]

The first version of JEclap has been released. It's minor, and probably useless to most people. And doesn't catch many errors. But, it's available, under the public domain.

Check it out: [JEclap official home page](http://jeclap.suspended-chord.info/).

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5129"></t>
<t tx="peckj.20140929120632.5130">@language md
---
title: "Adventures in Roguelike Development, Chapter 1: The Quest Begins!"
date: 2011-05-21

Hello all,

This is the first post in a multi-part series chronicling my efforts in creating a roguelike game. For those of you unfamilliar with the roguelike genre, you can read more about them on [RogueBasin's "What a roguelike is"](http://roguebasin.roguelikedevelopment.org/index.php?title=What_a_roguelike_is) page.

In order to give myself some guidance for this project, I've decided to adopt (with some slight variations) the development path laid out in [How to Write a Roguelike in 15 Steps](http://roguebasin.roguelikedevelopment.org/index.php?title=How_to_Write_a_Roguelike_in_15_Steps). And, each part of this series will be broken down into a number of these steps.

Step 1: Decide to Write a game
------------------------------

Well, for this, I've pretty much decided the bare minimum. I want a basic roguelike game, with one screen maps (no scrolling), with a console only interface (I don't personally like tiles, they distract me). That was simple.

Step 2: Hello world!
--------------------

I've chosen to write this in C++, using GCC compilers whenever possible, which should be on any of the three major platforms. To assist with console work, I've chosen to use (and subsequently modified) [rlutil](http://tapio.github.com/rlutil/). Everything else, I've decided to roll on my own using the C++ standard library and the STL. After writing a few test programs, I've determined that everything works (with some minor modifications to rlutil--to be released at a later date).

Step 3: It's a boy!
-------------------

For the screen layout, I've decided that the top two lines are to be messages, the bottom three lines are to be status, and the map itself will take up the middle twenty, with one column of buffer on both the left and right, to a total size of 78x20. This brings the console window to the standard 80x25, and looks quite nice as a layout (screenshot later).

From then on, I built a basic "@ running around a screen demo" (the roguelike hello world, as it were), and then added message handling. I then decided that the player will be the '@' symbol, walls will be '#', closed doors will be '+', open doors will be '/', and open ground will be '.'. Everything else didn't need to be settled yet, and in fact, the open door symbol is pointless at this stage as well.

Step 4: The map
---------------

Here's where I diverged from the path a bit. I started off with a hard-coded map (just an array of chars at first, later expanded into MapEntity instances), and allowed the player to walk overtop of the map, ignoring collision. I then added collision detection (along with a proper message in the message buffer), at first just to walls, and then to closed doors. Other entities (such as creatures) will be easy to add later to this collision detection scheme.

At this point, I began thinking of how to implement field of view. I've decided that a part of the player's map will remain drawn on the screen in dark grey after it has been visited, but it will be out of the range of vision, leaving monsters and items and the like unseeable. For things in direct vision, I've decided to go with a modified version of Rogue's field of view. In Rogue, the player is able to see the entire contents of any room they are in, even if they're just standing in the door way. In corridors, they are able to see just one tile ahead and behind them. My version of this will light up entire rooms of contents while they are in the room, and light up a longer range of tiles in corridors, maybe 4 or 5 in each direction, to allow for a bit more strategic play.

In order to implement this, I need to implement rooms (already done) and corridors (next on my todo list), and I decided that just for fun, I should implement a random level generator in the process, just to do something fun before I dive back into the nuts and bolts work. So, I'm going to write a rough level generator, then work on field of view, and then go back to the path.

And there's my progress thus far. I have 6 basic commands implemented (4 movement - bound to the arrow keys, rest - bound to 'r', and exit - bound to 'ESC'). There is also a turn counter, just as a rudamentary system for time (to be extremely expanded later, I'm thinking in the style of [DoomRL](http://doom.chaosforge.org/)). When the player tries to do something it can't, there is an appropriate message pushed to the message buffer, and the turn count isn't incremented. Resting does nothing at the moment but push "You rest." to the buffer and increment the turn count, but in future versions, it will act as it does in most roguelikes to restore health and mana while allowing monsters to move.

Here's a screenshot:

Roguelike Prototype screenshot 1

![rl-proto-1](https://github.com/gatesphere/blog-resources/raw/master/downloads/images/roguelike/roguelike-1.png)

And as I've found these resources to be helpful, here's a list of good places for people who are looking to get into roguelike dev to check out:

  - [RogueBasin](http://roguebasin.roguelikedevelopment.org/index.php?title=Main_Page)
  - [RoguelikeDevelopment.org](http://roguelikedevelopment.org/)
  - [Temple of the Roguelike](http://www.roguetemple.com/)
  - [rec.games.roguelike.development newslist](http://groups.google.com/group/rec.games.roguelike.development/topics) (on Google Groups)
  - [GameDev subreddit](http://www.reddit.com/r/gamedev)
  - [Roguelikes subreddit](http://www.reddit.com/r/roguelikes/)
  - [RoguelikeDev subreddit](http://www.reddit.com/r/roguelikedev/) (moderated by me, in the efforts of full disclosure)
  
Thanks for reading, and comments are always welcome! Oh, and yes, I do intend to opensource most of this project (if not all) when I'm done with it, including my modified rlutil.

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5131"></t>
<t tx="peckj.20140929120632.5132">@language md
---
title: "Adventures in Roguelike Development, Chapter 2: Gathering Supplies"
date: 2011-05-28
tags: [code-dump]

Hello all,

Welcome to part two of my roguelike development journal. (You can read part 1 [here](/?c=36).) This week, I take a divergent path from the guide I started to follow in the first post, but only to get some important steps out of the way. And I even have a source snapshot for you! So, let's begin.

In the last post I mentioned that I was going to work on a random map generator. Well, I've decided to keep that until a later date. However, I have implemented most of the features that I will require to make that work at a base level. This week, I instead chose to focus on cleaning up the code and making it cross-platform from an early stage (and I hope to keep it that way) while implementing some minor features.

New features
------------

Firstly, I added a scrolling message log, which is accessed when the user presses `M`. This outputs all of the messages that the player has received to the screen, starting at the most recent, and working up towards the beginning of the game. The user can scroll this list with `up arrow` and `down arrow` one line at a time, and arrows show up at the top right and bottom right of the screen indicating whether or not there are more messages to see. There is a screenshot at the end of the post to view this in action.

From then, I implemented room drawing (which is bugged, rooms end up being one more tile wide and tall than desired; I will fix it in the next week). To test this, I used randomly generated rooms (without regards to staying within the bounds of the map) and ended up with some interesting cases of collisons. And, as I now was spawing sometimes within solid rock, I decided to implement a `findInitialPosition()` method for the Player class, which looks randomly for an initial position that is not solid. So, at this point I had random rooms filling up a dungeon and I could walk around in them (and sometimes off the map due to how I handle collision).

After this, I added corridors and corridor drawing (which suffers the same bug as room drawing, in respects to length), and added doors to the ends of corridors. This is fine, but the player couldn't open doors yet, so I added that in as well. If the player tries to move onto a location occupied by a door, it is replaced by an open one, and a message is printed to the message buffer, and the player is moved. Simple as pie, but coded inflexibly. I'll touch this up in a later week.

Finally, I added a test map, just to check out if moving between rooms through corridors worked, and it did. The code snapshot below ships with this static map enabled. The player will start out in a random location every time, but the map will remain the same.

Adventures in cross-platform coding
-----------------------------------

I'm sad to say that most of the time that I spent this week was on getting the code to run on my Linux box as easily as it runs on my Windows machine. This was fairly easy due to rlutil's awesome capabilities, but I did hit a few speedbumps along the way. Since this game expects to be run in an 80x25 terminal, I modified the script that came with the Linux version of [DoomRL](http://doom.chaosforge.org/) to run the program in an xterm window of the correct size. This is included in the snapshot as `rl_xterm`.

Due to my own stupidity, I was parsing input in a way that would work perfectly under Windows (due to the arrow keys being single keycodes rather than escape sequences as in *nix) but would fail miserably under Linux. When I first ran the game, it would exit every time an arrow key was pressed. This is partially due to the way that rlutil implements it's `rlutil::getkey()` method, which reads how many characters are waiting to be parsed, and then calls the blocking version of `getch()` on it. Essentially, if you call `getkey()` without checking first to see that there is input to parse, it will call `getch()`, and block, making it seem to act normally. But, because the buffer is checked before the call to `getch()`, the method won't know that there are multiple characters to be examined, and will just examine the first, which in the case of the arrow keys on Linux, end up being the escape character. On Windows, this problem didn't show up, thanks to the fact that arrow keys report one character on Windows machines. But, a simple empty while loop to check `kbhit()` before the call to `getkey()` saved the day.

And one more hurdle to jump, it seems that on Linux consoles, sometimes the output of keyboard interaction is echoed to the console. To work around this, I simply placed the cursor in a location that I know will be overwritten in the next frame. Simple, but kludgy. I'll look for other ways around this.

A word on setting
-----------------

Lastly, I finally came up with a setting for this game. Well, actually two, but only one that I'm sharing with you. It will be an infinite rogue clone. Basically, a coffee break roguelike, you create a character and see just how many levels you can progress down the dungeons of doom/peril/strange sounds. There will be no end-game to speak of, just insane difficulties in lower levels, and maybe a shop every 20 floors or so to restock.

The other setting/game idea I have is much more interesting, but I want to try the basics first. :)

A word on the code
------------------

Thanks to the prodding of jimdoescode and hugoblack on [/r/roguelikedev](http://reddit.com/r/roguelikedev), I'm including a snapshot with each post from now on. The build instructions are simple, and should work on any system with a decent GCC installation (excepting Cygwin, rlutil won't compile on Cygwin witout serious modification, and MinGW works so much nicer anyway). Simply gunzip and untar the archive, and do a `make`. You might want to check your system's compatibility with rlutil first by running `make test &amp; ./rlutil-test`. Either way, the roguelike itself will be named `rl` (unique, huh?). If you're on a Linux box, I recommend running `./rl_xterm` to run it for now, but feel free to run it in anything you like. Oh, and I also included a small utility I used to test keycodes in rlutil. To compile it, run `make key`. It will check for input, and print out the keycode as they're pressed. `^C` to kill it. And as always, `make clean` will clean it all up for you.

The license is in the header of the `main.cpp` file, and rlutil is released under the [WTFPL](http://tapio.github.com/rlutil/docs/License.txt).

Screenshots: 

the message buffer

![message buffer](https://github.com/gatesphere/blog-resources/raw/master/downloads/images/roguelike/roguelike-messagebuffer.png)

random rooms

![random rooms](https://github.com/gatesphere/blog-resources/raw/master/downloads/images/roguelike/roguelike-randomrooms.png)

random corridors

![random corridors](https://github.com/gatesphere/blog-resources/raw/master/downloads/images/roguelike/roguelike-randomcorridors.png)

test map

![test map](https://github.com/gatesphere/blog-resources/raw/master/downloads/images/roguelike/roguelike-firstmap.png)

Code: [snapshot 20110528](https://github.com/gatesphere/blog-resources/raw/master/downloads/source/rlprototype-20110528.tgz)

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5133"></t>
<t tx="peckj.20140929120632.5134">@language md
---
title: New colors
date: 2011-05-29

Hello all,

I've changed the color scheme to a bit more readable color collection. In the future I may slightly alter the layout of the page, but I'm unsure as of yet. I kind of like how freeform this is.

But anyway, I'll be redesigning most of my site to follow this scheme.

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5135"></t>
<t tx="peckj.20140929120632.5136"></t>
<t tx="peckj.20140929120632.5137">@language md
---
title: "Adventures in Roguelike Development, Chapter 3: Bumps in the Road"
date: 2011-06-04
tags: [code-dump]

Hello all,

Welcome to the (short) third installment of my roguelike development chronicle. You can read the previous posts below:

  - [Chapter 1: The Quest Begins!](/?c=36)
  - [Chapter 2: Gathering Supplies](/?c=37)

So, to start things off, let me first apologize that this post is so short. Unfortunately, due to some family medical issues, I have been unable to work on much of anything this week, and most of what I am about to report on is simply housekeeping and maintainance stuff. Also, I preemptively apologize for any late entries in the future.

So, what did I manage to get done this week? For starters, I started keeping a changelog, which will help keep me on track and organized for when I write these posts. It's available in the snapshot below, see `changelog.txt`.

I then dived into some maintainance issues. First on the list was splitting rlutil into two files, a header and an implementation file, in order to prevent multiple definitions of functions without inlining everything. As I was doing this, I also decided to include a temporary fix for rlutil's `getkey()` for *nix machines; the same empty `while(1){}` that I previously had defined in my roguelike's code. This is just a temporary fix, until I can wrap my head around the internals of *nix systems calls. I also mucked around a bit with the makefile, adding a timestamp to the code snapshots, the `-O3` flag to the compile flags, and restructuring the source tree to organize my code.

In the way of actual code, I just fixed the room/corridor drawing and contains logic to make more sense.

Next up, should I ever find a break, is FoV :)

Thanks for reading! I have no screenshots this week, but here's the source snapshot, as usual.

Code: [snapshot 20110604](https://github.com/gatesphere/blog-resources/raw/master/downloads/source/rlprototype-20110604.tgz)

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5138"></t>
<t tx="peckj.20140929120632.5139">@language md
---
title: "Adventures in Roguelike Development, Chapter 4: Beginning to See"
date: 2011-06-12
tags: [code-dump]

Hello all,

Welcome to the fourth installment of my roguelike development journal. You can read the previous parts below:

  - [Chapter 1: The Quest Begins!](/?c=36)
  - [Chapter 2: Gathering Supplies](/?c=37)
  - [Chapter 3: Bumps in the Road](/?c=39)
  
This week, I was able to add very basic, buggy FoV and map drawing. I still have to clean the code up a lot, but it works... slowly. The problem with it is that it draws the entire map, every frame. This shouldn't be too much of an issue to work around, but it's annoying right now. But, it works.

When the player is in a room or a corridor, the entire room/corridor lights up (simplified Rogue style). As the player explores the map, it gets saved and when out of range, displayed in a darker grey. This allows for automated map making, while at the same time preventing everything from showing up.

Screenshot: 

Basic FoV

![basic FoV](https://github.com/gatesphere/blog-resources/raw/master/downloads/images/roguelike/roguelike-fov1.png)

Code: [snapshot 20110612](https://github.com/gatesphere/blog-resources/raw/master/downloads/source/rlprototype-20110612.tgz)

Thanks for reading, and

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5140"></t>
<t tx="peckj.20140929120632.5141">@language md
---
title: ELOCALC - an ELO ratings calculator
date: 2011-06-30
tags: [code-dump]

Hi all.

I wrote up a quick and dirty ELO ratings calculator in Common Lisp. It assumes a K value of 24, but that can be modified by rebinding the `*k*` symbol.

Code available: [here](https://github.com/gatesphere/blog-resources/raw/master/downloads/source/elocalc.l).

In other news, my development efforts have ground to a halt recently, as my father passed away just over a week ago. I'm taking some time to heal and mend, and we'll see where I'm at when I come back to this stuff. Thanks for understanding :)

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5142"></t>
<t tx="peckj.20140929120632.5143"></t>
<t tx="peckj.20140929120632.5144">@language md
---
title: Reverse-engineering a simple software licensing scheme
date: 2011-09-20

Hello all,

This post should have the subtitle "or, DON'T DO THIS". So, today I was curious about what makes independently developed commercial software licensing work. My target software shall remain unnamed (I'll call it X here), but lets say that it is a drawing tool of some sort, and programmed in Java. Java is relatively easy to decompile, with the right tools, providing next to no security if your validation scheme is embedded in the code itself. But how else is one to check licensing keys? I'll move on to that one later. First, onto the goods.

So, X comes in two versions: free and paid. The free version is more than most people will ever need or use, but the paid version offers some nice functionality. The free version and the paid version are the same executable, simply feature-locked without a valid license key. Hmm...

Decompiling the code was easy. Finding the validation section was even easier (it was clearly labled "VALIDATE CODE"). Finding this section of the code revealed all I needed to know about the license key to craft one myself that would give me a perpetual license to the paid version.

Here's what I found in X's validation section:

The license key must be exactly 16 characters.

All characters in the license key must be numbers.

The sum of the first twelve characters modulo 10 must exactly equal the 14th digit (first checksum).

The sum of the first twelve characters and the first checksum must equal exactly the two digit number formed by the 15th digit\*10 + the 16th digit (second checksum).

There is a license expiration date encoded into the above characters, formed by the value of the 3rd digit\*1000 + 5th digit\*100 + 8th digit\*10 + 13th digit.

This expiration date is a 4 digit number that corresponds to a certain number of days from January 1st, 2000.

If this expiration date manages to add up to a number between 7581 inclusive and 7694 inclusive, a perpetual license is granted.

With this in mind, I worked with pencil and paper to generate the following code:

0070600403000020

As you see, the value of X3\*1000 + X5\*100 + X8\*10 + X13 = 7640, a number chosen at random to fall in the perpetual license range. The value of X1 + ... + X12 = 20. 20 % 10 = 0, which equals X14, satisfying the first checksum. 20 + 0 = 20, which is X15\*10 + X16, satisfying the second checksum. So, in theory, this should work. And trying it in the software (which doesn't "phone home" except to pull updates) gives a successful update of license, and unlocks the paid version's features. Simple as pie.

But that's not all that reversing X's license did. X happens to be one of a family of software, also containing product Y. The validation code for Y's licenes is essentially the same thing, with the digit order scrambled around. So for Y, the following code grants perpetual paid access:

0070603400200000

You'll notice that the 7640 is embedded in the same location. The checksums have moved, such that X10 is the first checksum and X11*10 + X12 is the second checksum. The sum to compare these against is formed by X1 + ... + X8 + X13 + ... + X16. Like I said, just re-arranging numbers. This code was tested and verified to unlock Y perpetually.

Now, for the bad. THIS IS INCREDIBLY STUPID. Granted, most users won't have the knowhow to do this, but coding a simple verification scheme like this allows those with knowhow to generate licenses on demand with little more than pencil and paper, as well as distribute them to whomever they wish, reducing your profits and dilluting your efforts. Granted, for a software like X (and it's cousin Y), this is simple enough. The target demographic isn't usually the technically minded. X (and to a lesser extent, Y) is a very nicely presented software, and is almost bug free. The free version is way more than what one would expect for a crippled version of a shareware. But, this is still an issue if one is attempting to maintain a strong level of security in their licensing scheme.

What could have been done better? Well, for one, length doesn't typically matter, if you're simply using a checksum or two with embedded data like this. Once the algorithm is figured out, any number of keys can be generated regardless of length. So, short keys like the above are acceptable for this purpose.

Using all numeric characters is also fine, in as much as if your licensing scheme relies upon checksums and encoded data, numbers or not if it is cracked, keys can be generated. The same argument as above applies.

Not phoning home is the lynchpin of safe licensing. Each license should be generated and added to a master database, and checked upon entry for validity against the home server. Each license should also have a limited amount of legal activations before the license no longer unlocks a piece of software. But this is a minor point.

Essentially, the problem with licensed software is that there is nearly always a way to break it. If it is downloadable to the user's own computer, an intrepid cracker will find a way around the registration. If it is a web-service, someone will share a validated account. So, I suppose, the only way to win in software licensing and use-limiting, is to not play at all.

Just my two cents.

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5145"></t>
<t tx="peckj.20140929120632.5146"></t>
<t tx="peckj.20140929120632.5147">@language md
---
title: Musings, and an impromptu introduction to Io
date: 2011-10-26

Hello all.

Sorry it's been a while. I've been involved in a lot of projects lately, all school related. I was able to finish my honors thesis on algorithmic composition recently, and it is available online for anyone who would like to read it [here](http://cs.oswego.edu/~jpeck2/). It is actually going to end up being an assignment for a class here at SUNY Oswego next year titled Cognitive Musicology, which I am acting as TA for, so I'm kind of pumped.

I've also been working on a sort of paid internship position with a professor here, working with some bleeding edge technology from IBM (sorry, can't disclose any more information about that). That's been exciting and frustrating at the same time, but I'm very happy that I'm able to work with the tech.

Recently, in my concurrency course (taught by the legendary [Doug Lea](http://en.wikipedia.org/wiki/Doug_lea)), I had an opportunity to benchmark one of the new concurrent data structures proposed for inclusion in Java 8 - ConcurrentHashMapV8. If you're interested in seeing how this stacks up to the current Java 7 implementation of ConcurrentHashMap, feel free to view the results [here](http://cs.oswego.edu/~jpeck2/375/). Note the server names... SUNY Oswego's CS department has an interesting collection of personalities, and I think they're all awesome.

As far as programming and development go, I've been working with Prolog a lot lately as a part of my Computational Modelling of Cognitive Processes course, and I find it both beautiful and clunky. But it works, and that's more than you can say about certain other languages. For things like brute-force pattern matching, Prolog can't be beat.

In my spare time, I've endeavored to learn the language Io. It's beautiful. You can read more about it in several other places, but allow me to mention the salient points here: it's purely object-oriented, meaning that everything is an object, including numbers, booleans, and even methods; it's prototype-based, meaning that there is no true distinction between instance and class (e.g. you can have two objects of type "Cat", and have one who has an additional method or slot without creating a subclass); it's a message passing language, allowing the entire core of the syntax to be summed up in 5 basic pieces (statement form, blocking with parens, assignment operators, separating disparate statements in a block with a semicolon, and comments in 3 forms); and it has a Lisp-like representation of data and instruction, meaning that data is stored in the Iovm's working memory identically to the way it is delivered in code, allowing real-time manipulation of any object.

To that end, I have built several simple data structures and even a basic non-reentrant lock in Io (source available below... didn't think I'd mention a new language without providing some code, did you?). Along the way, I've discovered some fascinating things that I never thought of before, such as the way Io handles multiple inheritance. Instead of being statically defined, ancestors are simply references to objects stored in a list, meaning that you can add and remove ancestor ojects dynamically at runtime. That floored me. I can't imagine what that could be used for, but it is incredibly powerful and speaks a lot about the way object-oriented programming is presented. Subtle things like this, mixed with the fact that it is the most elegant object-oriented model I've ever encountered, make me think that Io would be the perfect introductory language for an undergrad computer science major, or even a non-major taking an exploratory course.

That thought, combined with the high I have from finishing my thesis, gave me an idea. My professional goal is to become a college professor, as I find where I am in life to be absolutely fascinating and the best place for me. To help with that goal, I imagine that if I manage to write an introductory programming book focusing on the object-oriented paradigm, it couldn't hurt me any. So, I've started down the road towards writing a book... a lofty goal for an undergrad senior, perhaps, but one I'm excited to tackle. I've run my tentative table of contents by a few professors, and they're all for it, so here's hoping! Io would be a perfect language to use in introducing many situations in object-oriented programming, with very few exceptions which can easily be explained with a small bit of imagination. You can monitor my progress on this blog. I'll update whenever I have a decent chunk written, and post the whole thing online.

That's all I've been doing, really. I say 'all' as if that isn't a lot, but eh. I always feel like I have to be doing more than I am, but that's just who I am, I suppose.

Oh, I promised you some Io code! This code is very verbose, and probably not the 'Io' way of doing things, but it works, it's readable, and it makes sense.

Here's some simple data structures in Io:

  - [LinkedList.io](https://github.com/gatesphere/blog-resources/raw/master/downloads/source/io/LinkedList.io) - a simple singly-linked list (from scratch, ignoring the inbult List object)
  - [Queue.io](https://github.com/gatesphere/blog-resources/raw/master/downloads/source/io/Queue.io) - a simple FIFO queue (a wrapper around the inbuilt List)
  - [Stack.io](https://github.com/gatesphere/blog-resources/raw/master/downloads/source/io/Stack.io) - a simple LIFO stack (again, a wrapper around List)
  - [Deque.io](https://github.com/gatesphere/blog-resources/raw/master/downloads/source/io/Deque.io) - a simple double-ended queue (again, wrapper around List)
  - [BinarySearchTree.io](https://github.com/gatesphere/blog-resources/raw/master/downloads/source/io/BinarySearchTree.io) - a binary search tree with several methods, including remove

Here's an implementation of an L-System in Io:

  - [LSystem.io](https://github.com/gatesphere/blog-resources/raw/master/downloads/source/io/LSystem.io) - an L-System for operating on strings

Here's a potentially dangerous implementation of a non-reentrant style lock in io:

  - [Lock.io](https://github.com/gatesphere/blog-resources/raw/master/downloads/source/io/Lock.io) - proven to deadlock when appropriate, but untested otherwise

Here's a small sequence of classes designed to figure out functional-style programming in Io:

  - [SequenceGenerator.io](https://github.com/gatesphere/blog-resources/raw/master/downloads/source/io/SequenceGenerator.io) - A class to generate numbers, non-functionally
  - [SequenceGenerator2.io](https://github.com/gatesphere/blog-resources/raw/master/downloads/source/io/SequenceGenerator2.io) - A class to generate numbers, approaching functional programming
  - [SequenceGenerator3.io](https://github.com/gatesphere/blog-resources/raw/master/downloads/source/io/SequenceGenerator3.io) - A class to generate numbers, finally functionally (genSeq takes a parameter named next, which is a block(..))

That's it for me, I have a test or 3 to finish. Thanks for reading!

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5148"></t>
<t tx="peckj.20140929120632.5149"></t>
<t tx="peckj.20140929120632.5150">@language md
---
title: Quick update, and introducing iobin!
date: 2011-11-04

Hello all,

Just a quick update on things. I've began making some progress on the Io Book, more about that to come. It's not much progress, bit it's a start. I'm on a roll, actually :)

Another Io-related project that I'm much more excited for is the initiation of the iobin collection. More info on that in the top bar, but suffice it to say these few quick words: one click binary installers for Io.

Check it out!

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5151"></t>
<t tx="peckj.20140929120632.5152">@language md
---
title: iobin is official, and other musings
date: 2011-11-10

Hello all,

Another "quick update post" incoming...

So, my server had a disk failure Sunday morning. That took the entire suspended-chord.info domain offline (except email) for roughly 38 hours. But obviously it's up and running again. It should be back to normal, but I apologize in advance to anyone who happens upon a rogue 404 due to permissions errors. Sorry for the inconvenience.

In other news, I've been having discussions with Steve Dekorte, the progenitor of the Io programming language. He is just an awesome guy. We discussed my [iobin](http://iobin.suspended-chord.info/) project, and he ended up making them official! My binaries are linked on the front page of the [Io Language site](http://iolanguage.com/)! Happiness.

As for the rest of life... I'm currently working on some school projects and some small personal endeavors (like a web-based CV), but after that, I can get back to chipping away at the Io book, and preparing for the GREs. And developing an empirical boardgame balance tester. Interesting things, you know.

Anyways, just wanted to share.

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5153"></t>
<t tx="peckj.20140929120632.5154"></t>
<t tx="peckj.20140929120632.5155">@language md
---
title: Iobook update, and other things
date: 2011-12-05

Hello all,

Wow, I do seem to go ages between posts, don't I?

Just a few little updates: I've started writing the book in earnest. I have the intro and chapters one and two done in draft form, just awaiting editing from a few friends and a professor. As far as that goes, I've been making awesome progress.

I've decided that at least three days a week, I will try to write a small, interesting program in Io. I'm calling these "mini code jams" and I've already written a few. The past few nights have been cellular automata implementations... I implemented a generic Wolfram code one-dimensional cellular automata on Sunday, and tonight I wrote a simple, inefficient, text-based version of Conway's Game of Life. I'm going to set up a github repo and keep my jams uploaded for the world to see. I'll link back here later.

That's about it, really. Thanks for reading!

Keep tweaking~

**EDIT:** Code Jam repo is here: &lt;https://github.com/gatesphere/io-codejams&gt;. </t>
<t tx="peckj.20140929120632.5156"></t>
<t tx="peckj.20140929120632.5157"></t>
<t tx="peckj.20140929120632.5158"></t>
<t tx="peckj.20140929120632.5159">@language md
---
title: Introducing jedi
date: 2012-01-10
tags: [code-dump]

Hello everyone,

It's been a while again. But I've been up to interesting things!

The book has been placed on hold for the time being, as I have been working on a few other things. I've started a project called [io-koans](https://github.com/gatesphere/io-koans), which is designed to be an interactive way to learn the Io programming language, through fill-in-the-blank puzzles, in the style of [4clojure](http://www.4clojure.com/). I've also worked my way through the entire [Seven Languages in Seven Weeks](http://pragprog.com/book/btlang/seven-languages-in-seven-weeks) (in significantly fewer than seven weeks...), and I feel I've grown tremendously as a programmer from it. It inspired me, in fact. So much that I've begun probably my most ambitious project to date: the [jedi programming language](https://github.com/gatesphere/jedi). I'll let the github page speak for itself, but I'm having a lot of fun with it.

That's... that, I suppose. Yeah.

Thanks for reading!

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5160"></t>
<t tx="peckj.20140929120632.5161"></t>
<t tx="peckj.20140929120632.5162">@language md
---
title: Introducing silica
date: 2012-02-14
tags: [code-dump]

Hello all,

I just wanted to quickly introduce my latest project, silica. silica is an extremely domain specific language designed to help develop one's musical intuitions and possibly aid in composition. In silica, the featured data type is a note, leading to a language suitable for melodic modelling. It's a bit hard to explain, but here, check out [silica on github](https://github.com/gatesphere/silica/).

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5163"></t>
<t tx="peckj.20140929120632.5164"></t>
<t tx="peckj.20140929120632.5165">@language md
---
title: steg.io, A brief example of steganography
date: 2012-03-20
tags: [code-dump]

Hello all,

Thought I'd give you a short introduction to the process of hiding data in plain sight, also called steganography.

First, a bit of theory. The script I'm going to introduce here hides data in a 24-bit uncompressed bitmap image. That sounds awfully specific, but don't worry... it's the most common type of bitmap. The reasons I went with this format are as follows:

  - Simple header and data format.
  - Enough wiggle room to store a relatively large amount of data.

So, let's get started. In a 24-bit uncompressed bitmap image, there are two headers (back to back, for a total of 54 bytes). Within these headers are data containing the resolution of the image, the image's filesize in bytes, etc. We're interested in the resolution, but we'll see why later.

After the header is the image data, 24 bits (3 bytes) per pixel. The data is stored in the RGB format, and it's stored in the order blue (1 byte), green (1 byte), and red (1 byte). With a full byte for each color, this allows for extremely subtle, hard to visually detect, variations in shade.

So, since the human eye is not as good as we'd like to think, this actually gives us some wiggle room in terms of how to store data. It turns out that the human eye is far more sensitive to green than red or blue, and in any case, manipulating the least significant bits of this data is almost inperceptible. The idea here, is to turn a 24 bit image into a 16 bit image, giving us 8 bits to store data.

Using the following scheme, we are able to fit a full byte of data per pixel in the image file! If we take the 3 LSB of blue, 2 LSB of green, and 3 LSB of red, we have 8 bits. So now it's simply a matter of bitshifting.

Of course, it's not that simple, but it's close. If we were simply shoving 1 byte per pixel, when decoding, how would we know where to stop? So we need to hide another header, within the data. I propose a 4 byte (therefore 4 pixel) header, which is simply a 32-bit integer signifying how many bytes long the hidden data is. This is stored least significant byte first, to mirror the way that the bitmap format handles data. After this, we have the rest of the file to hide data. When decoding, we read the first 4 hidden bytes, and use that to determine how much further to read. This means that we have (height * width) - 4 bytes of storage within any particular image file.

That's about it, for now. If you'd like to check this out, please go see my example (in Io) on github: [io-codejams](https://github.com/gatesphere/io-codejams/tree/master/2012/03/20120310_bmp_steganography).

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5166"></t>
<t tx="peckj.20140929120632.5167"></t>
<t tx="peckj.20140929120632.5168">@language md
---
title: "demi-16: a dcpu-16 emulator"
date: 2012-04-28
tags: [code-dump]

Hello all,

Just wanted to let you know that I'm writing an emulator for the DCPU-16 architecture. Check out the project on github: [here](https://github.com/gatesphere/demi-16).

Keep tweaking~ </t>
<t tx="peckj.20140929120632.5169"></t>
<t tx="peckj.20140929120632.5170"></t>
<t tx="peckj.20140929120632.5171">@language md
---
title: Welcome to a-&gt;ab.
date: 2012-06-01
tags: [welcome, new name, new focus, explanation, history]

Well, I've done a bit of changing things up around here, and I figured I'd explain what and why I've done with this blog.

This blog used to serve primarily as a place for me to discuss software development from the viewpoint of a computer science student writing personal projects for my own use, and this is reflected by the first fifty posts (from 23Aug2010 to 28Apr2012). During that period, the blog was known as the completely unimaginative "~suspended-chord dev blog" (boring), and was running on a PHP script that I wrote called "blahgger" (fitting).

As you can see, the name has been changed to "a-&gt;ab". This blog will still function as a place for me to discuss my software development endeavors, however with this new name comes a broadening of scope. The subtitle "computation, math, science, and thought" says it all: instead of just development journals, I will be posting some articles on wide reaching topics in computation, mathematics, science, psychology, philosophy, music, and cognition. This is more of a breathing space now, where I can just sit down and type out my ideas. And I've needed something like this for a while. Oh, and it's running on a different engine now: [toto](https://github.com/gatesphere/toto).

So, about the name (a-&gt;ab). How is it pronounced? You could say "a maps to a b", or "a implies a b", or "a right-facing arrow a b", or "a to a b", or even "a a b". The first option was my intended choice, but I realized that with the new, wider scope of this blog, any of them are valid. So, what does it mean? Well, going by the first option, this is either a rewrite rule in a context-free grammar, or a production in a L-system. Or perhaps it's a production rule in a Post canonical system. Or a state transition in a finite state machine. Or part of a configuration of a specialized Turing machine. Or, to bring it all back to software, a key-value pair, or a functional dependency in a relational database. Or in the field of logic (in particular the sequent calculus), we have some statement a which metaimplies a or b, which equates to a true statement. Or in mathematics and Markov analysis, there is a likelyhood that a will be followed by b. Or in genetics, there is a base pair denoted a, which is followed immediately by another a and then b. It's really however you choose to see it or think about it. But most of all, I just thought it was a cool name.

Now, why the switch from blahgger to toto?  There are many reasons.  Blahgger was never really well thought out, and was quite honestly hacked together.  Toto on the other hand was written by [someone who knows what they're doing](http://cloudhead.io).  Also, blahgger was rather lacking: no category/tag support (though it was coming along), no templating support, ugly (non-SEO friendly) URLs, no image support(!), no easy to use markup, and overall ugly manual linking throughout the whole app.  Oh, and I never finished the backend.  So, posts are made by manually editing SQL.  Fun.  Now, toto suffers from none of these limitations out of the box (aside from tags, which are taken care of by the wonderful plugin [karakuri](https://github.com/5v3n/karakuri)), is deployable on heroku, is easily modified, and is wonderfully organized.  Plus, I make posts by pushing via git, so the blog has automatic version control.  This is a win all around.

As for blahgger, and my other older project ceekrt, the code for their initial versions should see the light of day somewhere.  I will probably put them up on github sometime soon, but don't hold me to that.  They're pretty poorly written, but they might be of use to someone.

As for this blog, I hope you enjoy the ride.  I'm going to love it.

Welcome to a-&gt;ab.</t>
<t tx="peckj.20140929120632.5172"></t>
<t tx="peckj.20140929120632.5173">@language md
---
title: ! 'Computer Science for Mere Mortals: An introductory course in CS theory (with
  some programming)'
date: 2012-06-04
tags: [computer science, computation, csmm, theory, course, syllabus, mere mortals]

Hello everyone,

So, something I've always wanted to do is put together a theory-first approach to
getting into computer science and programming.  While many people think that there's
no harm in getting into a programming language right away, I feel that there is a 
lot to be gained by understanding the theory behind programming and computing before
you ever touch a programming language.  To that end, and with my significant-other as my
guinea-pig student *and* educational-advisor, I will be running an impromptu course
here on my blog and in person with her.  The planned course outline is as follows:

  1. Models of Computation
      1. \\(\lambda\\)-calculus
          1. Intro ([Lesson 1.1](/2012/06/07/csmm---lesson-11-introduction-to-the-lambda-calculus/))
          2. Arithmetic ([Lesson 1.2](/2012/06/14/csmm---lesson-12-arithmetic-in-the-lambda-calculus/))
          3. Boolean Logic ([Lesson 1.3](/2012/06/26/csmm---lesson-13-boolean-logic-in-the-lambda-calculus/))
          4. Advanced Logic and Arithmetic ([Lesson 1.4](/2012/06/29/csmm---lesson-14-advanced-logic-and-arithmetic-in-the-lambda-calculus/))
          5. Flow-control and recursion ([Lesson 1.5](/2012/07/03/csmm---lesson-15-flow-control-and-recursion-in-the-lambda-calculus/))
      2. Grammars and Languages
          1. Natural Languages vs. Formal Languages
          2. Context Free Grammars
          3. L-Systems
      3. Formal Machines and Automata Theory
          1. Finite State Machines
          2. Stack Machines
          3. Turing Machines
          4. Register Machines
          5. Memory Machines (RAM machines)
  2. Number Systems
      1. Decimal (review)
          1. Place-value system
          1. Base Conversion
      2. Binary
          1. Bit vs. Byte vs. Word
          2. Basic arithmetic
              1. Overflow
          3. 2's compliment encoding
              1. More arithmetic
          4. Shannon's Information Theory
              1. ASCII
      3. Hexadecimal
          1. Utility
      4. Octal
          1. Utility
  3. Selected Topics in Graph Theory
      1. What is a graph?
      2. Complete graphs vs. Sparse graphs
      3. Directional graphs vs. non-directional graphs
      4. Paths and cycles
      5. Edge weights
      6. The DAG (directed acyclic graph)
  4. Intro to Programming
      1. Intro to Io
          1. Some basic programs
      2. The Object Oriented Paradigm
          1. The standard object model
              1. Data and Behavior
              2. Inheritance
              3. Polymorphism
          2. The prototype object model (as used by Io)
          3. The interface/trait model
      3. The Functional Paradigm
          1. The \\(\lambda\\)-calculus strikes again!
          2. Functional-style programming in Io
  5. Intro to Data Structures
      1. Lists
          1. Linked-list
          2. Stack
          3. Queue
          4. Deque
      2. Maps/Hashes
          1. Key-Value pairs
          2. Representation as lists of lists
          3. Hashing
      3. Trees
          1. Binary tree
              1. Binary search tree
              2. Intro to algorithmic complexity (big-O, big-\\(\Omega\\), big-\\(\Theta\\))
          2. n-ary tree
          3. Trie (binary)

That's a lot of stuff to cover, so as you can guess, there will be a lot of material
generated through the course of this.  I'm hoping it turns out nicely.

So, how will this run?  I'll be posting lessons (textual lectures, I guess), and at
the end of each lesson will be some homework along with some recommended reading.
The answers to the homeworks will be linked to in PDF format along with the lesson.
To really get the most out of this course, you should really try to do all of the
homework questions.  But, it's your education, so it's really your call.  I won't 
make any of them too difficult, though.

As for a course prerequisite, I would suggest some basic mastery of college-level
algebra, as well as some foundational set-theory, though you can pick that up later.

Here's to hoping I don't give up on this halfway through!</t>
<t tx="peckj.20140929120632.5174"></t>
<t tx="peckj.20140929120632.5175">@language md
---
title: ! 'CSMM - Lesson 1.1: Introduction to the Lambda Calculus'
date: 2012-06-07
tags: [lambda calculus, csmm]

Hello everyone.

Today marks the first lesson in the "Computer Science for Mere Mortals" lecture series.  In this lesson, we'll go over the basics of the \\(\lambda\\)-calculus, preparing you for some more advanced work in the next lesson.

So, where to begin?

What is the \\(\lambda\\)-calculus?
-----------------------------------
Well, simply put, the \\(\lambda\\)-calculus is a formal mathematical system which consists solely of applying functions to each other.  Everything in the pure \\(\lambda\\)-calculus is a function, including numbers and truth values.  But more on that later.  First, some basics.

Functions and Variables
-----------------------
A good starting place to learning the \\(\lambda\\)-calculus is discussing the definitions of the terms function and variable.

In general terms, a variable is a placeholder for something else.  In the \\(\lambda\\)-calculus, that's as much as you need to know about variables, for the most part.  We'll get into bound vs. free variables later, but for know, just think about variables as holding a spot for something.

A function is a rule for taking one or more things and converting them to another thing.  In the \\(\lambda\\)-calculus, functions operate on functions to create new functions.  Think "I N C E P T I O N".

Simple enough, right?

A look at a simple function
---------------------------
Alright, let's look at a simple function in normal mathematical notation, the identity function.  This is a function which simply returns whatever you give it.  In normal mathematical notation, it looks like this:

$$f(x) = x$$

Where \\(f\\) is the function name, and \\(x\\) is some variable that it works upon.  In the \\(\lambda\\)-calculus, the same function would be written as follows:

$$\lambda x.x$$

And would be read something like "\\(x\\) maps to \\(x\\)".  There are a few things to notice here, first and foremost is that the function has no name (i.e., it's not called \\(f\\) anymore).  Secondly, there are a few interesting things going on with this notation.  Turns out, in the \\(\lambda\\)-calculus, only four symbols have any defined meaning, and they are as follows:

  * \\(\lambda\\) - "this is a function"
  * \\(.\\) - "maps to"
  * \\((\\) and \\()\\) - for grouping and overriding associativity

For simplicity when manipulating these functions, people working with the \\(\lambda\\)-calculus often give these functions equivalent placeholder symbols.  For the purposes of my lessons, I will write such definitions as follows:

$$I := \lambda x.x$$

This states that the symbol \\(I\\) is just a placeholder for the \\(\lambda\\)-expression \\(\lambda x.x\\).  Wherever we can write that expression, we can now write the simpler and shorter \\(I\\), and vice-versa.

It's also worth noting now a property of functions in the \\(\lambda\\)-calculus.  Variable names are inconsequential so long as ordering remains the same within a given \\(\lambda\\)-expression, such that \\(\lambda x.x = \lambda a.a\\).  This is called \\(\alpha\\)-equivalence.

A first function application
----------------------------
So, in the \\(\lambda\\)-calculus, to apply a function to another function, you simply concatenate them (place them next to each other).  For example, in the following example, I will be applying the generic variable \\(a\\) to the identity function, \\(I\\).  This is written like this:

$$Ia$$

To figure out what the value of this expression is, we should replace \\(I\\) with it's long-form companion:

$$(\lambda x.x)a$$

Now, we have a function which takes a single variable, and a value which to give it.  We use \\(a\\) for the value \\(x\\), and we get the following result:

$$a$$

As you can see, \\(Ia = a\\), so it acts as the identity function should.  What we just did is called a \\(\beta\\)-reduction, one of the few operations that the \\(\lambda\\)-calculus uses to provide all of it's various facilities.  \\(\beta\\)-reduction is simply the process of simplifying the \\(\lambda\\)-expressions we are working with.  When an expression can no longer be simplified, it is said to be in "normal form".

Another example, for kicks
--------------------------
To play around with this a bit more, and for practice, let's apply \\(I\\) to itself.  The result is as follows:

$$II$$
$$(\lambda x.x)I$$
$$I$$

So, here we see that the identity function applied to itself gives us the identity function.  This is no surprise, since it simply gives us back what we put in.

Getting tricky: functions of multiple variables
-----------------------------------------------
So, functions of more than one variable in the \\(lambda\\)-calculus work just as you would expect them to work.  For example, here's a function which takes two arguments and returns them in the opposite order:

$$\lambda xy.yx$$

Applying this to two variables \\(a\\) and \\(b\\), we get:

$$(\lambda xy.yx)ab$$
$$(\lambda y.ya)b$$
$$ba$$

No surprises, right?

Well, this actually demonstrates an important concept in the \\(\lambda\\)-calculus, called Currying.

Making things simpler: Currying
-------------------------------
Currying, named after Haskell Curry, the mathematician who first wrote about the concept, is a rather simple idea.  Basically, Curry proved that when dealing with functions of multiple variables, it is *always* possible to decompose said function into multiple functions, each of a single variable.  For example, take the following function in mathematical notation:

$$f(x,y) = x + y$$

Given \\(3\\) and \\(4\\), we get:

$$f(3,4) = 3 + 4 = 7$$

This function can be rewritten as the composition of two functions:

$$g(x) = x + h(y), h(y) = y$$

Given the same \\(3\\) and \\(4\\), we can see that the functions are equivalent:

$$g(3) = 3 + h(y)$$
$$3 + h(4) = 3 + 4 = 7$$

In the \\(\lambda\\)-calculus, it turns out that Currying is dreadfully simple.  Taking the function above, it can be shown that the following are equivalent:

$$\lambda xy.yx = \lambda x.\lambda y.yx$$

To prove it, here is the full application of the same \\(a\\) and \\(b\\) to the second (Curried) form:

$$(\lambda x.\lambda y.yx)ab$$
$$(\lambda y.ya)b$$
$$ba$$

Because the normal form of this version is the same the normal form of the original version (as demonstrated in the previous section), the are equivalent.  In other words, it could simply be stated that \\(\lambda abc.cab\\) is *shorthand* for writing \\(\lambda a.\lambda b.\lambda c.cab\\).

A note about associativity
--------------------------
The previous section ended with a note on shorthand.  There is one other convention in the \\(\lambda\\)-calculus that is shorthand, and that is the assumption of left-associativity.  The following expressions are equivalent:

$$abcdefg = ((((ab)c)d)e)f$$

The parentheses are often left off when writing things down so as to save time and space.  However, when they are used, pay special attention to them, because they often override the assumed left-associativity.  One example is the following function:

$$\lambda wyx.y(wyx) = \lambda wyx.y((wy)x)$$

Here we see that \\(w\\) and \\(y\\) are associated with each other, then \\(x\\) is associated with that quantity, and finally \\(y\\) is associated with the whole quantity.  However, the same function sans parentheses tells a different story:

$$\lambda wyx.ywyx = \lambda wyx.((yw)y)x$$

Depending upon what is provided for \\(w\\), \\(y\\), and \\(x\\), these two forms may very well have extremely different normal forms, and therefore not be equivalent forms.

A few diversions: \\(\omega\\) and \\(\Omega\\)
-----------------------------------------------
Now I'd like to introduce a few functions: first \\(\omega\\) (the lowercase Greek letter omega), and then \\(\Omega\\) (the uppercase Greek letter omega).  Why use the same symbol in different cases to represent the two functions?  Because one is defined in terms of the other!  But enough about that for now.  First, \\(\omega\\).

$$\omega := \lambda x.xx$$

So, \\(\omega\\) takes a single variable, and produces two of that variable, or in other words, that variable *applied to itself*.  This is incredibly cool.  As an example, here's \\(I\\) applied to \\(\omega\\):

$$\omega I$$
$$(\lambda x.xx)I$$
$$II$$
$$(\lambda x.x)I$$
$$I$$

It produced \\(I\\) applied to \\(I\\), which further reduced to simply \\(I\\) (remember, \\(I\\) simply repeats what it is given).

So, what about \\(\Omega\\)?  Here's the definition:

$$\Omega := \omega \omega$$

So, \\(\Omega\\) is \\(\omega\\) applied to itself.  What is the normal form of \\(\Omega\\)?

$$\omega \omega$$
$$(\lambda x.xx)\omega$$
$$\omega \omega$$
$$(\lambda x.xx)\omega$$
$$\omega \omega$$
$$...$$

It reduces forever, without ever coming to a stop!  Such a function is said to have no normal form.  Another interesting property of \\(\Omega\\) is that it will *never* respond to another function being applied to it, due to the left-association rule.  This means that an expression like \\(\Omega I\\) also will not have a normal form.  To prove it to yourself, give it a shot.

Getting ahead of ourselves
--------------------------
Okay, so what I've given you thus far is the basics of the \\(\lambda\\)-calculus.  Before we get too far ahead, I'd like to take this opportunity to provide some homework for you.  It's not much, just 8 simple questions, but you should be prepared to work them out by paper and pencil until you're satisfied with your results.  Don't fret too much though, answers are also provided.

The homework is available as a PDF file, and it you can view it [here](https://github.com/gatesphere/blog-resources/raw/master/downloads/csmm/lesson1-1.pdf).  Answers are on the last page.

Closing
-------
Hope you've enjoyed this!  In the next session, we'll learn a bit about arithmetic and how to represent numbers in the form of a function.

Next lesson: [here](/2012/06/14/csmm---lesson-12-arithmetic-in-the-lambda-calculus/)</t>
<t tx="peckj.20140929120632.5176"></t>
<t tx="peckj.20140929120632.5177">@language md
---
title: ! 'CSMM - Lesson 1.2: Arithmetic in the Lambda Calculus'
date: 2012-06-14
tags: [csmm, lambda calculus, arithmetic]

Where we left off
-----------------
Welcome back.  This is lesson two in the \\(\lambda\\)-calculus unit.  Last time
we left off discussing the basics of working with the \\(\lambda\\)-calculus, including
some interesting functions.  This time, we'll move forward into the universe of 
representing numbers and arithmetic in \\(\lambda\\) terms. Fun stuff.  So, let's 
get started!

Church notation for numerals
----------------------------
Alonzo Church, the progenitor of the \\(\lambda\\)-calculus, devised a wonderful
way of encoding the natural numbers as \\(\lambda\\) terms.  Here are the first
few numbers in what is known as "Church encoding":

$$0 := \lambda sz.z$$
$$1 := \lambda sz.sz$$
$$2 := \lambda sz.s(sz)$$
$$3 := \lambda sz.s(s(sz))$$

As you can probably see, the pattern is pretty simple: a number of occurrences of
\\(s\\) which is equal to the number being represented, followed by a single \\(z\\),
all of which is right-associative.  Using this, we can easily define any of the natural
numbers.  Here's \\(6\\) for example:

$$6 := \lambda sz.s(s(s(s(s(sz)))))$$

It's long and tedious, but we could define any natural number in this fashion.  \\(100\\)
would be 100 \\(s\\)'s followed by a single \\(z\\).

Explanation of the encoding scheme
----------------------------------
Why did Church choose this way of encoding numerals?  Well, it's actually quite
ingenious.  Providing a function as the first term to a number \\(n\\) encoded in Church 
encoding applies that function \\(n\\) times to the second term.  Let's see an example\
(remembering the definition of \\(I\\) from the previous lesson):


$$3Ic$$
$$(\lambda sz.s(s(sz)))Ic$$
$$(\lambda z.I(I(Iz)))c$$
$$I(I(Ic))$$
$$I(Ic)$$
$$Ic$$
$$c$$

This example is pretty mundane, but it gets the point across.  The identity function
was applied to \\(c\\) three times, finally reducing to \\(c\\).  We will use this
property in defining addition and multiplication.

The successor function
----------------------
This next function is fundamental to Church encoding, as it will allow us to derive
*any* Church numeral so long as we start with a definition of \\(0\\).  This function
is called the successor function, and it's defined as follows:

$$S := \lambda wyx.y(wyx)$$

Judging from the name, it's a safe bet to assume that this function gives us the
Church numeral that immediately follows the one it is given.  Let's try this out 
(careful, this is the most tricky derivation we've done yet... follow closely):

$$S0$$
$$(\lambda wyx.y(wyx))0$$
$$\lambda yx.y(0yx)$$
$$\lambda yx.y((\lambda sz.z)yx)$$
$$\lambda yx.y((\lambda z.z)x)$$
$$\lambda yx.y(x) = \lambda yx.yx = \lambda sz.sz = 1$$

That last line has a few tricky points.  First, the parentheses are removed as per
convention, then \\(\alpha\\)-equivalence states that \\(y\\) and \\(x\\) can be 
rewritten as \\(s\\) and \\(z\\), and finally we see that this is equivalent to \\(1\\).
We gave \\(S\\) the Church numeral \\(0\\) and it provided us with the Church numeral
\\(1\\), the successor to \\(0\\).  This property of \\(S\\) holds true for any Church
numeral you provide to \\(S\\), allowing us to derive *every* natural number from
only \\(S\\) and \\(0\\)!

Adding things together
----------------------
At this point, we have everything we need to define addition.  How?  Well, it's 
actually pretty simple if you stretch your mind a bit and think of addition only
in the realm of natural numbers.  How do you add two numbers?  For example, two 
and three... you're finding the **second number** *after* **three**, or the *second
successor of three*.

We already have \\(S\\), so we're in luck!  Adding two and three together is as
simple as the following:

$$2S3$$
$$(\lambda sz.s(sz))S3$$
$$(\lambda z.S(Sz))3$$
$$S(S3)$$
$$S(4)$$
$$5$$

Here, I'm assuming that \\(S\\) works, and not bothering to write out the long-form
of the reduction.  Verifying that this is true is left as an exercise to the reader,
if you wish to gain more practice in long-form reduction.  I'm also using the property
of Church numerals such that the numeral \\(n\\) applies it's first term \\(n\\) times
to the second term.

So, There's addition.  Just because we can, we should define a function for addition.
Let's call it \\(+\\):

$$+ := \lambda ab.aSb$$

This function takes two variables, and adds them together using the same technique
we used above.  Now, we can add two and three like so:

$$+23$$

And it will work as expected.  Try it!

Multiplication
--------------
Now we're moving along nicely.  How about multiplication?  Again, we have everything
we need already at our disposal.  Think about multiplying two natural numbers.  Let's
use two and three again, for example's sake.  When multiplying two by three, we're actually
seeing what the value would be of *adding* **two** *to zero* **three times** and summing 
it all together, or vice-versa. A bit convoluted, I know, but hear me out.  Here's 
what I'm trying to explain in traditional mathematical notation:

$$2 \times 3 = (2+0) \times 3 = (2+0) + (2+0) + (2+0) = 2 + 2 + 2 = 6$$

How about this:

$$3(+2)0$$
$$(\lambda sz.s(s(sz)))(+2)0$$
$$(\lambda z.(+2)((+2)((+2)z)))0$$
$$(+2)((+2)((+2)0))$$
$$(+2)((+2)2)$$
$$(+2)4$$
$$6$$

Note the parentheses, and their effect upon associativity.

For completeness, let's define a multiplication function too, called \\(\times\\):

$$\\times := \lambda ab.a(+b)0$$

Exponentiation
--------------
Turns out, exponentiation is much simpler than multiplication, in theory.  Since 
the Church numerals have the application property that I've mentioned a few times, where
they apply their first term multiple times, exponentiation is pretty straightforward.

Let's attempt this with one and two, for simplicity.  We'll do both one squared and 
two to the first, to show that the different results are adequately represented.

To take the \\(b\\)th power of \\(a\\), the application is simple:

$$ba$$

That is, just reverse the typical written order of the numbers.  one squared is:

$$21$$
$$(\lambda sz.s(sz))1$$
$$(\lambda z.1(1z))$$
$$(\lambda z.1((\lambda ab.ab)z))$$
$$(\lambda z.1(\lambda b.zb))$$
$$(\lambda z.(\lambda cd.cd)(\lambda b.zb))$$
$$(\lambda z.(\lambda d.(\lambda b.zb)d))$$
$$(\lambda z.(\lambda d.zd))$$
$$\lambda zd.zd = 1$$

And here's two to the first:

$$12$$
$$(\lambda sz.sz)2$$
$$\lambda z.2z$$
$$(\lambda z.(\lambda ab.a(ab))z)$$
$$(\lambda z.(\lambda b.z(zb)))$$
$$\lambda zb.z(zb) = 2$$

For completeness, here's the \\(E\\) function:

$$E := \lambda ab.ba$$

The first example would be written \\(E12\\) and the second \\(E21\\).

*(edit: the \\(E\\) function above was originally called \\(P\\), but was renamed
to avoid a conflict with lesson 1.4)*

Wrapping it up
--------------
We've covered basic arithmetic in the \\(\lambda\\)-calculus today, and we have
begun to see the power that this simple system holds within it.  In the next lesson,
we'll cover the basics of boolean logic.  Stay tuned!

Alright, that's more than enough for today.  Your homework is available
[here](https://github.com/gatesphere/blog-resources/raw/master/downloads/csmm/lesson1-2.pdf) (PDF).  8 questions, answers on the second
page, as last time.

It's been great, hope you agree. :)

Next lesson: [here](/2012/06/26/csmm---lesson-13-boolean-logic-in-the-lambda-calculus/)</t>
<t tx="peckj.20140929120632.5178"></t>
<t tx="peckj.20140929120632.5179">@language md
---
title: jliquid - the jedi backend, in Java
date: 2012-06-18
tags: [jedi, java, jliquid, github, finite state machines]

Hello all,

Thought I'd take a second to mention that I've begun porting my [jedi 
programming language](http://jedi.suspended-chord.info/) backend to Java.  I'm
not entirely sure why, but it's been fun, and it's shown me how flawed my object-
oriented thinking is sometimes, if I dive into projects without a defined spec
ahead of time.  While the current version of jliquid works, it is lacking several
important features, for which I *must* redesign to accomodate.  Chief among them
is the inability to output *anything* to the output ports from within the machine
(JLiquidTask).  Ah well.  We shall see where it goes from here.

If you're interested, you can check out the [jliquid Github repo](https://github.com/gatesphere/jliquid).</t>
<t tx="peckj.20140929120632.5180"></t>
<t tx="peckj.20140929120632.5181">@language md
---
title: The Enigma, a look at the WW2 German cypher machine
date: 2012-06-19
tags: [enigma, ww2, german, cypher, cryptology, code-dump, github]

As of late, my fascinations have been turned toward the physical machines used
to encrypt messages in wartime, particularly during World War II.  Chief among
such machines lies [The Enigma](http://en.wikipedia.org/wiki/Enigma_machine).  
The Enigma has a sort of air of legend surrounding it, at least among cryptologists,
mathematicians, computer scientists with a hankering for history, and WW2 intelligence
buffs.  But how did it actually work?  This article will attempt to explain, an
an easy to understand manner, how the Enigma managed to encode it's messages, and
at the end, I will provide a link to a program I wrote yesterday simulating the 
workings of an Enigma-style machine.

Before we get started, it's worth noting that whenever I refer to "The Enigma" as
a singular, I'm referring to any of a class of cypher machines that went by the name
Enigma.  There were several different models of Enigma machines produced for different
branches of the German military, each with subtle differences, but they all operate
on the same basic principles which I lay out below.

So, hopefully, most of us have created simple cyphers as kids.  You know the kind,
you write down a little key somewhere (1=A, 2=B, etc.) and then use your key to encode
a message.  Then you send your message and key to a friend and they decode it.  Simple,
insecure, but fun.  Believe it or not, this is the same principle that the Enigma
machine uses, but evolved a bit to make it *much* more secure.

The scenario above describes what's known as a substitution cypher, where one symbol
in the coded message maps to one character in the decoded message, and the mappings
between symbols and characters never change.  In essence, you're substituting one
alphabet for another, and so long as your friend knows how to determine your mapping,
your friend can read your message.  Simple as pie.  Below is a key and an encoding of
a message in such a system:

    key         original message        encoded message
    ----        ----------------        -------------------------
     1=A        HELLO WORLD             8-5-12-12-15 23-15-18-12-4
     2=B
     3=C
     4=D
     5=E
     6=F
     7=G
     8=H
     9=I
    10=J
    11=K
    12=L
    13=M
    14=N
    15=O
    16=P
    17=Q
    18=R
    19=S
    20=T
    21=U
    22=V
    23=W
    24=X
    25=Y
    26=Z

This code is pretty simple to break, and not just because the mapping is 1=A, 2=B,
etc., but because for example, every L is encoded to 12.  If someone figured out 
just that one bit, they'd be able to see 3 letters of the above message, and with
a bit of finagling, they could probably work out the rest.  Simple substitution 
cyphers are fragile and insecure.

Now suppose you wanted to increase the security of your substitution cypher a bit.
One thing you could do is make your cypher *rotate*, or have a new mapping apply
for *each* character in the source text.  One way you could do this is by shifting
the encoding alphabet one position forward each time you encode a character.  For 
example, starting with the key above, we would encode the `H` as `8`, like we expect,
but then we shift the indexes up one position, so that `2=A`, `3=B`, `...`, `26=Y`, `1=Z`.
Now when we encode the `E`, we encode it as `6` instead of `5`.  The whole message,
encoded with a rotating substitution cypher is now:

    original message     encoded message
    ----------------     --------------------------
    HELLO WORLD          8-6-14-15-19 2-21-25-20-13
    
Here, we see that this cypher is much more secure, as every L is encoded as a
different symbol, first `14`, then `15`, and finally `20`.  In fact, you'd have
to go 25 characters between L's to have them encode to the same symbol.  This kind
of cypher is harder to crack, because you've now shifted it from a single substitution
to a polyaphabetic substitution, meaning that you've used multiple, unique alphabets
to encode a single message.

The Enigma machine operates on this rotating substitution cypher principle, but adds
several layers of obfuscation to the mix just for added security.  One of these layers
is having *multiple* rotating cyphers that a single message is sent through.  The enigma
machine accomplished this with a series of interchangable rotors, each of which implemented
a very complex mapping of wires internally, with markings on the outer rings to inform
the operator of the number and orientation of the rotor.

The most widely used Enigma machines came with 5 rotors, of which 3 were used at a time in series, 
in any combination.  The rotors themselves were marked with a roman numeral, identifying 
them as either I, II, III, IV, or V.  The Enigma came with one each of these, and they 
are unique with respect to one another, but every I rotor is identical, as is every II, 
every III, and so on.  These rotors were also marked on the outside with a ring of the
letters of the alphabets, which were used as an index when the operator was setting up
the machine.  In this way, an operator could write down a key extremely simply and concisely
as follows: I-IV-II K-C-S means left-to-right ordering of the rotors is I, IV, and then
II, and they are indexed at K, C, and S, respectively.  In this way, the key could be
transmitted to the decoder.

To the far left of the rotors is a part known as the reflector, which is hard-wired
in identical fashion on every machine of the same model.  The reflector's purpose is
two-fold: first, it re-encodes the character through the three rotors a second time
by a different pathway, making for 6 total transformations (three in, reflect, three out),
and second, it allowed a message to be decoded by setting up the machine identically
to the way it was set up when the message was encoded.

So, to encode a message, the operator selects three rotors and their positions,
places them in the machine, and types the message, one character at a time.  As he
types each character, a light is lit, indicating the encoded character.  This character
is written down, becoming the encoded message as the last character is encoded.  Simple
operation, but what's happening inside the machine to make this secure?

When the operator presses a key, an electrical signal is sent through a wire in the 
right-most rotor, which is wired so that another wire in the middle rotor is powered,
which is wired to another wire in the left-most rotor.  Upon leaving the left-most rotor,
the reflector re-routes the signal to another path in the left-most rotor, which
powers another path in the middle rotor, which powers another path in the right-most
rotor, which finally powers a tiny lamp.  This is nice, but there's a step missing
here, and it's vital.  Before any of the electrical pathways are formed, the right-most
rotor is rotated forward one position, just like in the rotating cypher earlier.  And,
if the first rotor has advanced enough, the second rotor is turned as well.  And
if the second rotor has advanced enough, the third rotor is also turned.  All this
variation makes the rotating cypher *many orders of magnitude stronger* than a
simple rotating cypher.  This is where the Enigma's strength lies. The following 
diagram hopefully explains this
better (from Wikipedia, original [here](http://en.wikipedia.org/wiki/File:Enigma-action.svg))

![Enigma action](http://upload.wikimedia.org/wikipedia/commons/6/6c/Enigma-action.svg)

Here, we see an A being encoded to a G, and then, the next key press, the A is encoded
to a C instead.  Note also that the pathways work just as well backwards as forwards thanks
to the reflector, such that encoding GC with the initial setup will result in AA--the original
text!

Now, the Enigma is *already* an extremely strong machine with this form of operation,
but just to throw a wrench into the works, there was another component of the machine
designed to scramble the letters before and after encoding, called the plugboard.
The plugboard was filled with as many as 13, but usually 10, pairs of plug cables,
which paired two letters together.  These letters were switched both before going
into the first rotor, and after coming out of the first rotor before switching on
the light.  The following diagram shows an example encoding with the plugboard
populated (from Wikipedia, original [here](http://en.wikipedia.org/wiki/File:Enigma_wiring_kleur.svg))

![Enigma with plugboard](http://upload.wikimedia.org/wikipedia/commons/5/53/Enigma_wiring_kleur.svg)

Following along with the numbers, we can trace the electrical signal from (1) the 
battery, to (2) the depressed switch of the A key, to (3) the plugboard (notice how
there is no plug in A, so it is not transformed), to (4,5,6) the rotor/reflector
assembly (went in as A, came out as S), to (7) the plugboard again, to (8) the plug
cord (S was matched with D, so S becomes D), finally to (9) the light for D.

All of this complexity, and the Enigma machine was still cracked thanks to some serious
efforts put forward by the mathematicians at Bletchley Park and also independent
Polish researchers.  It turns out that there are still two flaws with the Enigma,
but only one of them is inherent with in the design.  Firstly, due to the reflector,
no symbol will *ever* be encoded to itself.  If there's an X in some position in the
cyphertext, you know it cannot possibly be an X in the cleartext.  Secondly, user
error, compounded with the stresses of war and captured equipment, helped the Allies
crack the code.  Turns out that for all the obfuscation the plugboard was included
to add, the Germans didn't use it correctly, causing patterns to arise in encoded
messages.  It is estimated that if the plugboard was used correctly, the Enigma
codes would have been uncrackable.  But, hey, who's to say for certain?

Anyways, I'll leave you with a bit of code.  I hope you've enjoyed this post,
as I had a lot of fun writing it, and it's an incredibly fascinating topic to me.

My Enigma machine simulator in Io is available on github.  Get it [here](https://github.com/gatesphere/io-codejams/blob/master/2012/06/20120618_enigma/enigma.io).
It's not a 100% accurate simulation, and a lot of it is guesswork.  Most notably
missing is the double-step feature of the Enigma.  But it was fun to write.

Thanks for reading!</t>
<t tx="peckj.20140929120632.5182"></t>
<t tx="peckj.20140929120632.5183">@language md
---
title: ! 'CSMM - Lesson 1.3: Boolean Logic in the Lambda Calculus'
date: 2012-06-26
tags: [csmm, lambda calculus, boolean logic, predicates, logic]

Welcome back
------------
Last time we left off with basic arithmetic in the \\(\lambda\\)-calculus.  In this
lesson, we'll show the fundamental building blocks for boolean logic, which will 
be vitally important as we approach our first program!  Let's get started.

Truth values
------------
Before we get into the nitty gritty, I'm going to briefly explain the basics of
boolean logic.  If you have a good handle on mathematical logic, feel free to skip
this section completely.

So, what is boolean logic?  To be concise, it's the field of mathematical logich
where every statement has a value of either true, or false, with no in between.
Boolean logic, so named after George Boole, allows us to evalute the truth of statements
by combining these truth values with very simple operators which have well-defined
return values--in other words, functions.

So, we have two values (\\(T\\) for true, and \\(F\\) for false), and a number of
operators.  Which operators?  We'll start with negation (\\(\neg\\)).

The \\(\neg\\) operator simply negates whatever it is applied to.  \\(\neg T = F\\)
and \\(\neg F = T\\).  Simple, right?

The and (\\(\land\\)) operator takes two operands, and returns \\(T\\) only if
both operands are \\(T\\), otherwise it returns \\(F\\).  Here's  all possible
combinations:

$$T \land T = T$$
$$T \land F = F$$
$$F \land T = F$$
$$F \land F = F$$

The or (\\(\lor\\)) operator also takes two operands, and returns \\(T\\) if either
of the operands are \\(T\\), or both are \\(T\\), and returns \\(F\\) only if both
operands are \\(F\\).  Here's the full defintion:

$$T \lor T = T$$
$$T \lor F = T$$
$$F \lor T = T$$
$$F \lor F = F$$

Using these three operators, we can figure out rather complex statements.  For example:

$$\neg (T \land \neg ((T \lor F \lor T) \land F))$$
$$\neg (T \land \neg ((T \lor T) \land F))$$
$$\neg (T \land \neg (T \land F))$$
$$\neg (T \land \neg F)$$
$$\neg (T \land T)$$
$$\neg T$$
$$F$$

Some abstraction
----------------
So, now we're ready to start with boolean logic in the \\(\lambda\\)-calculus.  A
good place to start--indeed, the only place to start--is how to define the truth
values.  As with everything else in the \\(\lambda\\)-calculus, \\(T\\) and \\(F\\)
are simply functions.  And, as a bonus, you already know \\(F\\)!

$$F := \lambda xy.y$$
$$T := \lambda xy.x$$

As you might recall, \\(0\\) is defined as \\(\lambda sz.z\\), which is \\(F\\).
\\(T\\) is pretty simple as well--Instead of returning it's second input, it returns
the first, ignoring the second.

Now, let's define some operators.

That's not me!
--------------
As above, we'll start with negation.

$$\neg := \lambda x.xFT$$

We can see that this holds with the definition of negation.  First, \\(\neg T\\):

$$\neg T$$
$$(\lambda x.xFT)T$$
$$TFT$$
$$(\lambda xy.x)FT$$
$$(\lambda y.F)T$$
$$F$$

And now \\(\neg F\\):

$$\neg F$$
$$(\lambda x.xFT)F$$
$$FFT$$
$$(\lambda xy.y)FT$$
$$(\lambda y.y)T$$
$$T$$

This definition is pretty clever.  It uses the fact that both \\(T\\) and \\(F\\)
return one of the two inputs they recieve.  \\(T\\) returns the first input it recieves,
so \\(\neg\\) makes sure that the first input will be \\(F\\).  \\(F\\) on the other
hand returns the second input it recieves, so \\(\neg\\) makes sure it will recieve
\\(T\\) second.  Simple, sweet, but functional and powerful.

Don't forget me!
----------------
How about and?  And is defined as follows:

$$\land := \lambda xy.xyF$$

Let's test this out:

$$\land TT$$
$$(\lambda xy.xyF)TT$$
$$(\lambda y.TyF)T$$
$$TTF$$
$$(\lambda xy.x)TF$$
$$(\lambda y.T)F$$
$$T$$

How about another?

$$\land FT$$
$$(\lambda xy.xyF)FT$$
$$(\lambda y.FyF)T$$
$$FTF$$
$$(\lambda xy.y)TF$$
$$(\lambda y.y)F$$
$$F$$

I won't bore you with the other two cases, in fact, I'll let you work those out 
in the homework.

This function works in much the same way as \\(\neg\\) does, by relying upon the
work that \\(T\\) and \\(F\\) do.  If the first operand to \\(\land\\) is \\(T\\),
then it will return whatever the second operand is.  If the first operand to \\(\land\\)
is \\(F\\), then it will always return \\(F\\).  This ensures that the only time \\(\land\\)
will return \\(T\\) is if both operands equal \\(T\\).

Anyone at all?
--------------
The third operator we need is or.  Or is defined as follows:

$$\lor := \lambda xy.xTy$$

And, some examples:

$$\lor TT$$
$$(\lambda xy.xTy)TT$$
$$(\lambda y.TTy)T$$
$$TTT$$
$$(\lambda xy.x)TT$$
$$(\lambda y.T)T$$
$$T$$

And another:
$$\lor FT$$
$$(\lambda xy.xTy)FT$$
$$(\lambda y.FTy)T$$
$$FTT$$
$$(\lambda xy.y)TT$$
$$(\lambda y.y)T$$
$$T$$

Again, the other two cases will be in your homework.

This function is analogous to \\(\land\\), in that it relies upon the first input
to determine the return value.  If the first input is \\(T\\), it returns \\(T\\)
no matter what, and if the first input is \\(F\\), it returns the value of the
second input.  In this way, \\(\lor\\) will only return \\(F\\) if both inputs
are \\(F\\).

Wrapping up
-----------
This lesson was rather short, but only because the next lesson will involve mixing
boolean logic with arithmetic to create a few advanced functions, which will lead
us to be able to define a subtraction function.  But, enough about that.  Your 
homework is available as a PDF [here](https://github.com/gatesphere/blog-resources/raw/master/downloads/csmm/lesson1-3.pdf).  As always,
questions on page 1 and answers on page 2.

See you soon for lesson 1.4!

Next lesson: [here](/2012/06/29/csmm---lesson-14-advanced-logic-and-arithmetic-in-the-lambda-calculus/)</t>
<t tx="peckj.20140929120632.5184"></t>
<t tx="peckj.20140929120632.5185">@language md
---
title: ! 'CSMM - Lesson 1.4: Advanced Logic and Arithmetic in the Lambda Calculus'
date: 2012-06-29
tags: [csmm, lambda calculus, boolean logic, predicates, logic, arithmetic]

Where we were
-------------
Last time, we went over the basics of boolean logic and it's manifestation in the
\\(\lambda\\)-calculus.  This time, we'll move those basics into the realm of numbers
and start testing for things such as equality and difference.  We'll also see the 
first hint of a data structure: the pair.  And we'll provide the missing subtraction
function, along the way (division is still too difficult, but we'll get there in time).

A bit of review
---------------
Before we start this lesson, it's probably a good idea to collect the various
named functions we've encountered up until this point.

First, some basic ones:

$$I := \lambda x.x$$
$$\omega := \lambda x.xx$$
$$\Omega := \omega \omega$$

Next up, the Church numerals:

$$0 := \lambda sz.z$$
$$1 := \lambda sz.sz$$
$$2 := \lambda sz.s(sz)$$
$$3 := \lambda sz.s(s(sz))$$
$$...$$

And some arithmetic functions for working with Church numerals:

$$S := \lambda wyx.y(wyx)$$
$$+ := \lambda ab.aSb$$
$$\times := \lambda ab.a(+b)0$$
$$E := \lambda ab.ba$$

And finally, some boolean logic:

$$T := \lambda xy.x$$
$$F := \lambda xy.y$$
$$\neg := \lambda x.xFT$$
$$\land := \lambda xy.xyF$$
$$\lor := \lambda xy.xTy$$

Keep these handy, we'll be using most of them for the rest of the \\(\lambda\\)-calculus
lessons.

They come in twos
-----------------
Alright, moving on to pairs.  Pairs are useful for many things, and are fairly
simple to use in the \\(\lambda\\)-calculus.

As with everything else in the \\(\lambda\\)-calculus, a pair is just a function.
Say you wanted to make a pair containing \\(3\\) and \\(1\\).  The function representing
this pair would be as follows:

$$\lambda f.f31$$

There is a helper function to create such pairs, called \\(\Phi\\).  It is defined
like this:

$$\Phi := \lambda abf.fab$$

Such that creating the pair above would be as simple as:

$$\Phi 31$$
$$(\lambda abf.fab)31$$
$$(\lambda bf.f3b)1$$
$$\lambda f.f31$$

So we can see that we can write a pair of elements \\(x\\) and \\(y\\) as \\((\Phi xy)\\),
with the parentheses serving to ensure the correct associativity.

So, we know how to create pairs now.  How do we get their parts?  Turns out, we already
have the tools for this in the form of \\(T\\) and \\(F\\).  For example, to get the first
part of \\((\Phi 31)\\), we do the following:

$$(\Phi 31)T$$
$$((\lambda abf.fab)31)T$$
$$((\lambda bf.f3b)1)T$$
$$(\lambda f.f31)T$$
$$T31$$
$$(\lambda xy.x)31$$
$$(\lambda y.3)1$$
$$3$$

And to get the second, we do this:

$$(\Phi 31)F$$
$$((\lambda abf.fab)31)F$$
$$((\lambda bf.f3b)1)F$$
$$(\lambda f.f31)F$$
$$F31$$
$$(\lambda xy.y)31$$
$$(\lambda y.y)1$$
$$1$$

So, \\(T\\) extracts the first element of a pair, and \\(F\\) can pull out the second.
Neat.

So, why the seemingly random diversion?  Well... we're about to create a few functions
that use pairs to perform some tricky work.

What comes before...
--------------------
This section will actually step through two functions, one which takes in a pair
\\((m, n)\\) and returns \\((n, n+1)\\), and one which finds the predecessor of a
given Church numeral.

The first function, \\(\oplus\\), operates on pairs, providing a sort of climbing
upwards.

$$\oplus := \lambda x.\Phi(xF)(S(xF))$$

Let's test this out.  We're going to provide it the pair \\((\Phi 11)\\) and it
should return the pair \\((\Phi 12)\\).  As we've already seen how \\(F\\) works
on pairs and how \\(S\\) works on Church numerals, I will not be writing the complete
long-form of this \\(\beta\\)-reduction, rather I will be substituting results in
where they belong.

$$\oplus (\Phi 11)$$
$$(\lambda x.\Phi(xF)(S(xF)))(\Phi 11)$$
$$\Phi((\Phi 11)F)(S((\Phi 11)F))$$
$$\Phi(1)(S((\Phi 11)F))$$
$$\Phi(1)(S(1))$$
$$\Phi 12$$

And we see it works!  For good measure, let's plug that result in, hoping for 
\\((\Phi 23)\\).

$$\oplus (\Phi 12)$$
$$(\lambda x.\Phi(xF)(S(xF)))(\Phi 12)$$
$$\Phi((\Phi 12)F)(S((\Phi 12)F))$$
$$\Phi(2)(S((\Phi 12)F))$$
$$\Phi(2)(S(2))$$
$$\Phi 23$$

So, now we can increment a pair of numbers.  How does this help us?  Well, now
we have an easy way to find the predecessor of a Church numeral!  There are other
formulations for the predecessor function, but this one is in my opinion the easiest
to understand once you have the fundamentals down.  It's defined like this:

$$P := \lambda x.(x \oplus(\Phi 00))T$$

So... what does this function mean?  How does it work?

It takes in a single Church numeral, \\(x\\), and applies the \\(\oplus\\) function
\\(x\\) times to the pair \\((\Phi 00)\\), and then takes the resulting function and
returns the first element.  Applying the \\(\oplus\\) function to \\((\Phi 00)\\)
one time gives us \\((\Phi 01)\\), applying it another time (for a total of two
applications) to that result gives us \\((\Phi 12)\\), and applying it \\(x\\) times
will give us a result of \\((\Phi yx)\\), where \\(y\\) is the Church numeral 
immediately preceeding \\(x\\).  Taking the first element of this pair will give
us \\(y\\), the predecessor of \\(x\\)!

Here it is in action, finding the predecessor of \\(3\\).  Again, I've omitted
certain details, including the applications of \\(\oplus\\).

$$P3$$
$$(\lambda x.(x \oplus(\Phi 00))T)3$$
$$(3 \oplus(\Phi 00))T$$
$$(\oplus (\oplus (\oplus (\Phi 00))))T$$
$$(\oplus (\oplus (\Phi 01)))T$$
$$(\oplus (\Phi 12))T$$
$$(\Phi 23)T$$
$$2$$

It works!

One thing to note is that Church encoding has no concept of negative numbers.  Our
\\(P\\) function handles this in the following way:

$$P0$$
$$(\lambda x.(x \oplus(\Phi 00))T)0$$
$$(0 \oplus(\Phi 00))T$$
$$(\Phi 00)T$$
$$0$$

That is, the predecessor of \\(0\\) is \\(0\\).  This will come in handy later.

Subtraction, at last
--------------------
With \\(P\\) under our belt at last, subtraction is pretty easy to define now.

$$- := \lambda ab.bPa$$

This works much like \\(+\\) does, in that to perform \\(3-2\\), you're actually
trying to find the second predecessor of three.

$$-32$$
$$(\lambda ab.bPa)32$$
$$(\lambda b.bP3)2$$
$$2P3$$
$$P(P3)$$
$$P2$$
$$1$$

And it's done.  Simple as cake.

A foundational predicate
------------------------
Alright, we're going to define our first predicate, which is a function which performs
some sort of test on its inputs, and returns either a \\(T\\) or a \\(F\\).  The
predicate we are going to define will test whether or not a given Church numeral is
equal to \\(0\\).  It's defined like so:

$$Z := \lambda a.aF\neg F$$

Let's test it out:

$$Z0$$
$$(\lambda a.aF\neg F)0$$
$$0F\neg F$$
$$(\lambda sz.z)F\neg F$$
$$(\lambda z.z)\neg F$$
$$\neg F$$
$$T$$

So, it returns \\(T\\) if you provide it \\(0\\), as it should.  How about other
cases?

$$Z2$$
$$(\lambda a.aF\neg F)2$$
$$2F\neg F$$
$$(\lambda sz.s(sz))F\neg F$$
$$(\lambda z.F(Fz))\neg F$$
$$(F(F\neg))F$$
$$(F((\lambda xy.y)\neg))F$$
$$(F(\lambda y.y))F$$
$$(FI)F$$
$$((\lambda xy.y)I)F$$
$$(\lambda y.y)F$$
$$IF$$
$$F$$

So, testing on \\(2\\), it returns \\(F\\), as it should.  But why?

This again relies upon the inherent properties of the Church numerals.  If you provide
\\(Z\\) a Church numeral \\(N\\), then it applies \\(F\\) a total of \\(N\\) times
to \\(\neg\\).  But \\(F\\) applied to anything provides you \\(I\\), the identity
function.  For any number \\(N\\) which is not \\(0\\), \\(ZN\\) will simplify to
\\(IF\\), which simplifies to \\(F\\).  When \\(N\\) equals \\(0\\), on the other
hand, \\(F\\) is never applied, allowing \\(Z0\\) to simplify to \\(\neg F\\), which
by definition simplifies to \\(T\\).  Pretty beautiful, huh?

Why did we define this predicate?  We'll see soon.  It is vital in defining subtraction
and many other useful predicates we'll need later.

More predicates, in rapid succession!
-------------------------------------
Alright, with \\(Z\\) defined, we're ready to make some more predicates.  These
will all build off of one another in a natural progression, so they shouldn't be
too hard to absorb.

Let's start with something that utilizes \\(P\\)'s property that \\(P0 = 0\\).  
How about \\(\leq\\)?

$$\leq := \lambda ab.Z(-ab)$$

This tests whether \\(a\\) is less than or equal to \\(b\\), by subtracting \\(b\\)
from \\(a\\).  If \\(-ab\\) is \\(0\\), then we know that \\(b\\) must be equal to
or greater than \\(a\\).  Pretty simple.

Here it is showing that \\(3\\) is greater than \\(1\\)
$$\leq 31$$
$$(\lambda ab.Z(-ab))31$$
$$(\lambda b.Z(-3b))1$$
$$Z(-31)$$
$$Z2$$
$$F$$

And here it is showing that \\(1\\) is less than or equal to \\(1\\).

$$\leq 11$$
$$(\lambda ab.Z(-ab))11$$
$$(\lambda b.Z(-1b))1$$
$$Z(-11)$$
$$Z0$$
$$T$$

As you might imagine, \\(\geq\\) is pretty similar:

$$\geq := \lambda ab.Z(-ba)$$

I'm not going to show \\(\geq\\) in action, as it's extremely similar to \\(\leq\\).

With both \\(\leq\\) and \\(\geq\\), we can now test for equality!  Since \\(m = n\\)
if and only if \\(m \leq n\\) and \\(m \geq n\\), we have what we need to define \\(=\\).

$$= := \lambda ab.\land(\leq ab)(\geq ab)$$

Let's test it:

$$=12$$
$$(\lambda ab.\land(\leq ab)(\geq ab))12$$
$$(\lambda b.\land(\leq 1b)(\geq 1b))2$$
$$\land(\leq 12)(\geq 12)$$
$$\land T(\geq 12)$$
$$\land TF$$
$$F$$

And on one that should pass:

$$=44$$
$$(\lambda ab.\land(\leq ab)(\geq ab))44$$
$$(\lambda b.\land(\leq 4b)(\geq 4b))4$$
$$\land(\leq 44)(\geq 44)$$
$$\land T(\geq 44)$$
$$\land TT$$
$$T$$

Cool.  So, now with \\(\leq\\), \\(\geq\\) and \\(=\\), we can define the last
two predicates: \\(&lt;\\) and \\(&gt;\\).  They're no surprise, if you realize that
a \\(m &lt; n\\) if and only if \\(m \leq m\\) and \\(\neg(m = n)\\).  \\(&lt;\\) reflects 
this:

$$&lt; := \lambda ab.\land(\neg(=ab))(\leq ab)$$

Let's give it a shot:

$$&lt;23$$
$$(\lambda ab.\land(\neg(=ab))(\leq ab))23$$
$$(\lambda b.\land(\neg(=2b))(\leq 2b))3$$
$$\land(\neg(=23))(\leq 23)$$
$$\land(\neg F)(\leq 23)$$
$$\land T(\leq 23)$$
$$\land TT$$
$$T$$

How about equality?

$$&lt;33$$
$$(\lambda ab.\land(\neg(=ab))(\leq ab))33$$
$$(\lambda b.\land(\neg(=3b))(\leq 3b))3$$
$$\land(\neg(=33))(\leq 33)$$
$$\land(\neg T)(\leq 33)$$
$$\land F(\leq33)$$
$$\land FT$$
$$F$$

Again, as you probably have guessed, \\(&gt;\\) is much the same:

$$&gt; := \lambda ab.\land(\neg(=ab))(\geq ab)$$

And with that, we have everything we need to keep moving closer to an actual program
in the \\(\lambda\\)-calculus!

Wrapping up
-----------
We sure blew through a lot of material with this lesson, and I hope it wasn't too
much.  But if you've been following along with the previous lessons, nothing here
should be too tricky to figure out with a bit of study.

I've posted your homework [here](https://github.com/gatesphere/blog-resources/raw/master/downloads/csmm/lesson1-4.pdf).

See you soon for lesson 1.5!

Next lesson: [here](/2012/07/03/csmm---lesson-15-flow-control-and-recursion-in-the-lambda-calculus/)</t>
<t tx="peckj.20140929120632.5186"></t>
<t tx="peckj.20140929120632.5187"></t>
<t tx="peckj.20140929120632.5188">@language md
---
title: ! 'CSMM - Lesson 1.5: Flow-control and Recursion in the Lambda Calculus'
date: 2012-07-03
tags: [csmm, lambda calculus, recursion, flow-control, fibonacci]

Remind me again?
----------------
Last time we left off with some high-level topics in the \\(\lambda\\)-calculus,
and this time we'll build upon them with two last concepts, and finally a functioning
program in the \\(\lambda\\)-calculus!  Be sure to refer to the previous lessons
for the definitions of functions, we're going to need them.  Let's get started.

Flow-control
------------
An important thing to be able to do in a computer program is make decisions based
on the state of some information.  In computer science, this is known as *flow-control*,
because it controls the flow of instructions.  The most simplistic (and indeed
elementary) model of flow-control is the *if-then-else* statement.

If-then-else is a simple instruction that checks the truth of a statement, and 
does one thing if it's true, and something else if it's false.  For example,
when deciding whether or not to go out to dinner, you could make the following
decision:

    if (I have enough money to go out) 
      then [go out to eat] 
      else [stay in tonight].
    
Thanks to our handy \\(T\\) and \\(F\\) functions, if-then-else is a piece of cake
in the \\(\lambda\\)-calculus:

$$G := \lambda abc.abc$$

Where \\(a\\) is some statement whose truth you are testing, \\(b\\) is what to
do if \\(a\\) is true, and \\(c\\) is what to do if \\(a\\) is false.  Here's
an example:

$$G(Z2)13$$
$$(\lambda abc.abc)(Z2)13$$
$$(\lambda bc.(Z2)bc)13$$
$$(\lambda c.(Z2)1c)3$$
$$(Z2)13$$
$$F13$$
$$3$$

This works because of the inherent functionality of \\(T\\) and \\(F\\), such
that \\(T\\) will return the first input it is given, and \\(F\\) will return
the second.  Should the \\(a\\) term evaluate to \\(T\\), the first branch is
evaluated, otherwise \\(a\\) is \\(F\\), so the second branch is evaluated.

Simple, right?

Recursion
---------
Moving on from if-then-else, we have another model of flow-control called recursion.
Recursion is defining something in terms of itself, and used correctly it's a very
powerful tool.  The poster-child example for recursion is the factorial (\\(!\\))
function in mathematics, whereby you can find the value of \\(5!\\) as follows:

$$5!$$
$$5(4!)$$
$$5(4(3!)$$
$$5(4(3(2!)))$$
$$5(4(3(2(1!))))$$
$$5(4(3(2(1(0!)))))$$
$$5(4(3(2(1(1)))))$$
$$5(4(3(2(1))))$$
$$5(4(3(2)))$$
$$5(4(6))$$
$$5(24)$$
$$120$$

In other words, \\(n! = n(n-1)!\\).  It is important to note here that every
recursive definition needs a *base case*, or a place for the recursion to 
stop.  With the factorial function, the base case is \\(0! = 1\\).  Without this
base case, the function would have recurred forever (so called *infinite recursion*)
and entered undefined territory (I dare you to find a real number that equals
\\(-1!\\))!  Unterminated recursion is almost always a bad thing, so be sure
to define things with a base case that will *always* be triggered when you
are looking to define something recursively.

What does recursion look like in the \\(\lambda\\) calculus?  Well... it's ugly.
We can't just define something in terms of itself, because we need a base case.
For example, what is the normal form of \\(X := \lambda a.aX\\)?  There is none,
as it will forever rewrite itself!

To get around this, we use what is called the the *Y-combinator*, but what it's
called isn't important.  What you should pay attention to is what it does.  First,
a definition:

$$Y := \lambda a.(\lambda b.a(bb))(\lambda b.a(bb))$$

Let's apply it to some generic function, \\(z\\).  It doesn't matter what \\(z\\)
is, the results are the same.

$$Yz$$
$$(\lambda a.(\lambda b.a(bb))(\lambda b.a(bb)))z$$
$$(\lambda b.z(bb))(\lambda b.z(bb))$$
$$z((\lambda b.z(bb))(\lambda b.z(bb)))$$
$$z(Yz)$$

This might be a bit confusing to understand just looking at the notation, but
basically what \\(Y\\) does is it provides a way for a function to repeat itself.
We provided \\(z\\) to \\(Y\\), and ended up with \\(z\\) applied to \\(Yz\\) again.
With \\(Y\\), and \\(G\\) from the previous section, we are able to provide a safe
way to define functions recursively!

To prove this, let's move on to writing our first program: a fibonacci number
generator.

Fibonacci, recursively
----------------------
The Fibonacci number sequence is a sequence of integers defined with the following
rules:

$$f(0) = 1$$
$$f(1) = 1$$
$$f(n) = f(n-1) + f(n-2)$$

That is, each number in the Fibonacci sequence is the sum of the two numbers that
proceeded it.  This makes the first few numbers in the sequence \\(1,1,2,3,5,8,13,21,...\\).
Simple enough, right?

Well, sense we have a nice recursive definition above, let's try to transform that
into the \\(\lambda\\)-calculus.  This is going to use many of the topics we've
covered up until this point, so take this section slowly and carefully.

Here's our Fibonacci function, written in a slightly unfamiliar way.

$$\chi := \lambda rn.G(\lor(=n0)(=n1))1(+(r (-n1))(r (-n2)))$$

So, here we have a function that takes two inputs, \\(r\\) which is eventually to
be \\(Y\chi\\), and \\(n\\), an index into the Fibonnaci number sequence, such that
if \\(n\\) were \\(5\\), \\(\chi\\) would return \\(8\\).

Why the \\(r\\) in \\(\chi\\)?  Well, we're going to be using \\(Y\\) here, and
\\(Y\\) applied to anything (as seen above) will always return another copy
of that anything.  Our function needs to be able to accept that copy and do 
something useful with it.

So, to calculate the second Fibonacci number, we do this:

$$(Y\chi)2$$
$$\chi(Y\chi)2$$
$$(\lambda rn.G(\lor(=n0)(=n1))1(+(r (-n1))(r (-n2))))(Y\chi)2$$
$$(\lambda n.G(\lor(=n0)(=n1))1(+((Y\chi)(-n1))((Y\chi)(-n2))))2$$
$$G(\lor(=20)(=21))1(+((Y\chi)(-21))((Y\chi)(-22)))$$
$$(\lor FF)1(+((Y\chi)1)((Y\chi)0))$$
$$F1(+((Y\chi)1)((Y\chi)0))$$
$$+((Y\chi)1)((Y\chi)0)$$
$$+(\chi(Y\chi)1)((Y\chi)0)$$
$$+((\lambda rn.G(\lor(=n0)(=n1))1(+(r (-n1)(r (-n2)))))(Y\chi)1)((Y\chi)0)$$
$$+((\lambda n.G(\lor(=n0)(=n1))1(+((Y\chi)(-n1))((Y\chi)(-n2))))1)((Y\chi)0)$$
$$+(G(\lor(=10)(=11))1(+((Y\chi)(-11))((Y\chi)(-12))))((Y\chi)0)$$
$$+((\lor FT)1(+((Y\chi)0)((Y\chi)0)))((Y\chi)0)$$
$$+(T1(+((Y\chi)0)((Y\chi)0)))((Y\chi)0)$$
$$+1((Y\chi)0)$$
$$+1(\chi(Y\chi)0)$$
$$+1((\lambda rn.G(\lor(=n0)(=n1))1(+(r (-n1)(r (-n2)))))(Y\chi)0)$$
$$+1((\lambda n.G(\lor(=n0)(=n1))1(+((Y\chi) (-n1))((Y\chi) (-n2))))0)$$
$$+1(G(\lor(=00)(=01))1(+((Y\chi) (-01))((Y\chi) (-02))))$$
$$+1((\lor TF)1(+((Y\chi)0)((Y\chi)0)))$$
$$+1(T1(+((Y\chi)0)((Y\chi)0)))$$
$$+11$$
$$2$$

Now, that's a lot of work, but as you can see, it does give the correct answer!
It should work for any other value of \\(n\\) you wish to try as well.  I will
assign a few more in your homework, to get you used to working with \\(Y\\).

Fibonacci, iteratively
----------------------
So... all of that work, and it turns out that there's a much easier way to find
Fibonacci numbers in the \\(\lambda\\)-calculus.  Call me a bully, but I wanted
to use that previous example to show you the power of \\(Y\\).  There are some
things that can *only* be accomplished recursively, and \\(Y\\) is your go-to
function when you need things done that way.  But sometimes there are simpler ways
to go about seemingly difficult problems, and Fibonacci numbers show this.

I'm going to present an iterative method for finding Fibonacci numbers, based upon
our work with \\(P\\).  In fact, the approach is going to be nearly identical.

First, we'll need a "ladder" function that will map a pair \\((m, n)\\) to the
pair \\((n, m+n)\\).  This is simple enough.

$$\delta := \lambda x.\Phi(xF)(+(xT)(xF))$$

Let's test it:

$$\delta(\Phi 23)$$
$$(\lambda x.\Phi(xF)(+(xT)(xF)))(\Phi 23)$$
$$\Phi((\Phi 23)F)(+((\Phi 23)T)((\Phi 23)F))$$
$$\Phi 3(+23)$$
$$\Phi 35$$

It works!

Now comes a slight cognitive leap.  To find the \\(n\\)th Fibonacci number, you'll
need to do \\(\delta\\) a total of \\(n\\) times to the pair \\(\Phi 01\\), and then
take the second element of that pair. Hmm.  How about this:

$$\chi_1 := \lambda n.(n\delta(\Phi 01))F$$

Let's find the fifth Fibonnaci number, which should be \\(8\\).

$$\chi_1 5$$
$$(\lambda n.(n\delta(\Phi 01))F)5$$
$$(5\delta(\Phi 01))F$$
$$((\lambda sz.s(s(s(s(sz)))))\delta(\Phi 01))F$$
$$((\lambda z.\delta(\delta(\delta(\delta(\delta z)))))(\Phi 01))F$$
$$(\delta(\delta(\delta(\delta(\delta (\Phi 01))))))F$$
$$(\delta(\delta(\delta(\delta(\Phi 11)))))F$$
$$(\delta(\delta(\delta(\Phi 12))))F$$
$$(\delta(\delta(\Phi 23)))F$$
$$(\delta(\Phi 35))F$$
$$(\Phi 58)F$$
$$8$$

Hooray!

Wrapping up
-----------
And with that, we've covered about everything that I wanted to cover with the 
\\(\lambda\\)-calculus.  We've gone from humble beginnings to writing our first
program (in two ways!) in five short lessons.  I hope this hasn't been too
much of a whirlwind tour for you.

As always, I have some homework for you, dealing with the things we've discussed
in this lesson.  It's available [here](https://github.com/gatesphere/blog-resources/raw/master/downloads/csmm/lesson1-5.pdf).

Next time
---------
Next time, we go abstract.  Away from the realm of doing things and towards the
realm of how to do things.  We'll learn what formal languages and grammars are,
which define the realm of computing in several ways.  See you soon!</t>
<t tx="peckj.20140929120632.5189"></t>
<t tx="peckj.20140929120632.5190">@language md
---
title: blix - a puzzle game
date: 2012-07-05
tags: [processing, blix, game]

Hello all,

Last week I wrote a quick puzzle game in processing.  You can download it here
(source included):

  * [Windows](https://github.com/gatesphere/blog-resources/raw/master/downloads/blix/blix-win32.zip)
  * [Mac](https://github.com/gatesphere/blog-resources/raw/master/downloads/blix/blix-mac.zip)
  * [Linux](https://github.com/gatesphere/blog-resources/raw/master/downloads/blix/blix-linux.zip)

And here's a screenshot!

![blix](https://github.com/gatesphere/blog-resources/raw/master/downloads/images/blix/blix.png)

Enjoy.</t>
<t tx="peckj.20140929120632.5191"></t>
<t tx="peckj.20140929120632.5192">@language md
---
title: ! 'CSMM - Lesson 2.1: Natural and Formal Languages'
date: 2012-07-13
tags: [csmm, languages, set theory]

An introduction
---------------
Hello all, and welcome to chapter 2 of CSMM.  This chapter is a short one, discussing
the various linguistic concepts as they relate to computer science.  First up is
a discussion of natural languages, and how they differ from formal languages, which
are what computer scientists think of when discussing languages.  Let's get to it!

Natural language
----------------
So, what is natural language?  To be quite blunt, a natural language is a language
spoken by humans, such as English, Spanish, German, etc.  Natural languages allow
us to express ourselves and communicate information to others who listen.  And they
have a lot going for them--they've worked for many thousands of years and they will
continue to work until we evolve past vocal communication.  But, for all their perks,
natural languages have some faults which make them unsuitable for discussing in a
computational sense.

Formal language
---------------
To move into the realm of discussing languages as a computer scientist, we need a
formalism of some sort.  A so-called formal language is just that formalism.

A formal language is defined as some set of words derived over an alphabet.  But
the terms "word" and "alphabet" probably have a different meaning than you're thinking.
The alphabet is a set of symbols which can be combined into words, and words are
a combination of zero or more symbols from the alphabet.  This makes sense, right?
Well, yes, except that if you were to map English, say, onto a formal language,
the alphabet would consist of every English word, and the words would consist of
every possible English sentence.  That is, the concept of a "sentence" in a natural
language is roughly equivalent to the concept of a "word" in a formal language, as
is "words" to "alphabet".

Business casual
---------------
In general, a language \\(L\\) is defined as a subset of the list of all possible 
words \\(\Sigma\\)\* over the alphabet \\(\Sigma\\).  In set theory terms, \\(\Sigma\\)\*
is the Kleene closure over \\(\Sigma\\), meaning that \\(\Sigma\\)\* contains *every*
possible combination of symbols from \\(\Sigma\\), including the null or empty word, 
usually denoted \\(\varnothing\\).

So the following language is perfectly valid:

$$L = \\{a, b, ab, aab, abb, aa, bb\\}$$
$$\Sigma = \\{a, b\\}$$

Using the same alphabet \\(\Sigma\\), so is this one:

$$L = \\{a, aa, aaa, aaaa, aaaaa\\}$$

As long as \\(L \subset \Sigma\\)*, \\(L\\) is a valid formal language.  However,
note that \\(\Sigma\\)\* is an infinite set so long as \\(\Sigma\\) has at least
one symbol.  There are infinite combinations of even a single symbol.  This means
that by definition, \\(L\\) may be an infinite subset of \\(\Sigma\\)\*, meaning 
\\(L\\) is an *infinite* language.  Surely writing out the entirety of \\(L\\) in
this situation is unfeasable.  Instead, we can define a number of rules that *define
legal words within \\(L\\)*.  

Keep it simple
--------------
Here's an example of an infinite language \\(L\\) defined over the alphabet 
\\(\Sigma = \\{a,b\\}\\):

  1. A word is in \\(L\\) if it begins with exactly one \\(a\\).
  2. A word which ends in any number of \\(b\\) symbols is in \\(L\\) *only if* it
     begins with another valid word in \\(L\\).
     
Following this, we see that the first few words we can define in \\(L\\) are:

$$L = \\{a, ab, abb, abbb, abbbb, \ldots\\}$$

We can see that this language is infinite, but we have a clear, complete discription
of \\(L\\) without performing a miracle and writing out the infinite set.  More 
often than not, as a computer scientist, you'll be interested in infinite languages,
and you'll be describing them in terms of a list of rules.

Wrapping up
-----------
Well, that was a short, sweet introduction to the world of formal languages.  Next
lesson, we'll see the concept of a grammar arise, giving us a formal way of writing
a set of rules upon which a formal language can be derived.  But until then, don't
forget your [homework](https://github.com/gatesphere/blog-resources/raw/master/downloads/csmm/lesson2-1.pdf)!</t>
<t tx="peckj.20140929120632.5193">@language md
---
title: pila - a stack based language
date: 2012-07-13
tags: [pila, language, io, stack, forth]

Hello everyone,

Just thought I'd let you know about my new pet language project: a stack based
language inspired by FORTH and Lisp.  I'm calling it pila, which is a controversial
name in Portuguese, but means "pile" or "stack" in Italian.

If you're at all interested, you can check it out on [github](https://github.com/gatesphere/pila).

Thanks!</t>
<t tx="peckj.20140929120632.5194">@language md
---
title: Reverse Engineering the Paper Jamz Pro instrument files
date: 2012-07-13
tags: [reversing, paperjamz, bits, bytes, markov, audio]

So, I'm working on a musical project, and I've decided to use only toy instruments.
Specifically, the Paper Jamz Pro series of instruments from Wowwee.  These are fun
toys to play with, but what had me interested in them is the fact that they're 
customizable, to a certain extent.

There are 3 instruments in the Pro series line, of which I'm interested in two 
(guitar and drums).  I was able to pick up mine relatively cheap as they're on 
clearance almost everywhere around where I live.  Bonus.  But, price aside, the
reason I'm interested in these two instruments specifically is that using the 
free app from the [Paper Jamz Pro website](http://paperjamzpro.com/), you can
change the voice of the instrument to one of a number of voices included with
the app.

I've decided that I'll try to reverse engineer these instrument voice files, to
see if I can manage to get my own samples onto these instruments.

Here's what I've gleaned so far.  The instrument files for both guitar and drums
seem to be structured similarly.  There is a large header, which starts with a
magic number (0xPJIG or 0xPJID) and several other bits of information that I
cannot decode yet.  Following that seems to be a series of audio frames.  Using
audacity's "import raw audio" feature, I've tinkered around and discovered that
importing these instrument files as ADPCM VOX files at 22,050Hz, you get a decent
sounding approximation of the sounds the instrument produces.  However, the frames
are filled with clicks, leading me to believe that there are interstitial headers
throughout the file, perhaps between every frame, which hold metadata for the 
instrument to use.

Either way, it's been fun so far.  Let's see what else I can figure out.</t>
<t tx="peckj.20140929120632.5195"></t>
<t tx="peckj.20140929120632.5196"></t>
<t tx="peckj.20140929120632.5197">@language md
--- 
date: 2012-09-10
title: A Monologue on API Flexibility
tags: [java, blackberry, api, ruby, verbosity, complexity, expression, language]

Hello everyone.

It's been a while since I've written here.  Sorry about that.  I've been working,
and getting accustomed to my new responsibilities.

Don't worry about CSMM, more lessons are forthcoming!  I really want to finish 
that course material.  I'm really excited about it.

But today, I want to write about a topic that has recently become a focal point
for me.  I'd like to discuss API design a bit.

This is a topic that has been beaten to death.  "Design simple APIs".  But, 
it's not that easy, apparently.

This past week I've been working with both Ruby on Rails, and the BlackBerry
Java Development Environment.  And let me tell you... one of those two is a
joy to work with.

Here's an example from Ruby on Rails which exemplifies the qualities of an
easy-to-use API that I'm looking for:

    1.day.from_now.in_time_zone('Eastern Time (US &amp; Canada)')
    
One line, and it tells you EXACTLY what it does.  Not only that, but the
API is simple, succinct, and elegant.  Compare that to the corresponding
Java:

    Calendar c = Calendar.getInstance(TimeZone.getTimeZone("EST"));
    c.setTime(new Date());
    c.add(Calendar.DATE, 1);
    
Atrocious.  But this highlights my main bone of contention between these
APIs.  Atomically, they're both *simple*.  The difference is that the RoR
API was built for *molecular simplicity*.  

When you put simple parts together in RoR, or in Ruby in general, you 
usually end up with something that is still pretty simple, reducing the 
cognitive load.  You build a simple molecule out of simple atoms.  Java,
on the other hand, suffers when making this leap.  As atomic parts of Java
calls are glued together, you get something that grows unweildy farily 
quickly.

Now, do not get me wrong here.  I enjoy programming in Java.  It is not my
favorite language by far, but it is nice.  And I also know that I am unfairly
comparing two different languages here, each with their own idioms that
support their unique uses.  But the problem remains... and is being added
to by professional APIs that are over-engineered and over-verbalized.

To prove my point further, here's an example from the BlackBerry Java API docs,
on how to scan a QR code:

    Hashtable hints = new Hashtable();
    Vector formats  = new Vector();
    formats.addElement(BarcodeFormat.QR_CODE);
    hints.put(DecodeHintType.POSSIBLE_FORMATS, formats);
    BarcodeDecoder decoder = new BarcodeDecoder(hints);

That's the setup code for initializing the decoder to read a QR code.  5 lines.

Now, this makes a lot of sense if you want to scan multiple different types,
or provide several different hints to the decoder, but let's look at what's
going on here if you want to scan just QR codes:

  1. Create an empty `Hashtable`
  2. Create an empty `Vector`
  3. Populate the `Vector` with a single entry
  4. Put that `Vector` into the `Hashtable` as it's only entry
  5. Hand that `Hashtable` to the `BarcodeDecoder`'s constructor
  
So, we've created two junk objects just to pass a single parameter to the
decoder.  This is unacceptible, in my opinion.  While allowing flexibility
is good, allowing clean, succinct code should also be a priority.  No one
will like using your API if it's simple to make misakes, just because you
decided that you want your api to allow people to shoot off their own leg.

I suppose my argument here is, if you design an API, the users will have
to bend to your will.  Make their life pleasant.  Design clean interfaces.
And don't be afraid to limit their flexibility in order to make their life
simpler.  Developers are an interesting bunch, but I don't know many who
prefer to write five lines for something that should be done in 1.  We are
lazy, and proud of it.  Allow us to work efficiently, and your API will 
prosper.</t>
<t tx="peckj.20140929120632.5198"></t>
<t tx="peckj.20140929120632.5199">@language md
--- 
tags: [processing, mobile processing, blackberry, development, rim]
date: 2012-09-12
title: Using Mobile Processing on the BlackBerry

Hello all,

I recently was able to get [Mobile Processing](http://mobile.processing.org/)
working for Java development on the BlackBerry plug-in for Eclipse, and it
works wonderfully.  I thought I'd share my process for anyone who is interested.
It even works intermingled with the BlackBerry API, aside from the UI classes.

What you need
-------------
To do this, you will need the following:

  - A copy of Eclipse with the [Java BlackBerry Plug-in](https://developer.blackberry.com/java/download/eclipse) installed
  - A copy of [Mobile Processing](http://mobile.processing.org/download/index.php)
  
That's it.  No need to download the WTK/CLDC, or JavaME, etc.

Using the following steps, you can create a project that uses Mobile Processing
targeting the BlackBerry.

Preliminaries
-------------
First, extract the Mobile Processing archive you downloaded.  Find the lib/ 
directory with all the .jars, and save it somewhere you know you'll be able
to find it later.  This is where the core of Mobile Processing lives.

Make a new project
------------------
From within Eclipse, do: File -&gt; New -&gt; New Project.  Select BlackBerry Project
and click Next &gt;.  On the next screen, give it a name, and choose the JRE
for the OS level you are targeting, and click Next &gt;.  On this next screen,
click on the Libraries tab up top, then click Add External JARs, navigate
to the lib/ directory you saved earlier, and select mobile.jar.  Now click
on the Order and Export tab up top, and make sure the checkbox next to mobile.jar
is checked (it most likely is not by default).  Click Next &gt; again, then
select Empty Application, and click Next &gt;.  Give it a package name and
a class name, and click Finish.

Configuration of the project
----------------------------
Open up the BlackBerry_App_Descriptor.xml file for your newly created
project.  Give it a proper title, version, vendor, and description.  Under
Application type, select MIDlet.  Then type the fully-qualified name of
your app's main class (i.e. suschord.processingtest.HelloWorld).  Save.

Code!
-----
To use the Mobile Processing API in your project, your main app class has
to `import processing.core.PMIDlet;`, and also be declared that it
`extends PMIDlet`.  You should get rid of any `main()` function... it cannot
be used here, `PMIDlet` includes a `main()` that does all the right things.
You should create at least two functions, `public void setup()` and `public
void draw()`.

At this point, you have a working Mobile Processing sketch.  Any code you 
place inside your main app class will work exactly as if you were coding
a Mobile Processing sketch.

Here's an example of an application that draws lines from the center of the
screen to random points across the screen, in random colors.

    package suschord.processingtest;

    import processing.core.PMIDlet;

    public class HelloWorld extends PMIDlet {
      int white;
      int x, y, center_x, center_y;
      int linecolor;
      
      public void setup() {
        white = color(255);
        background(white);
        center_x = width / 2;
        center_y = height / 2;
        framerate(15);
      }
      
      public void draw() {
        linecolor = randcolor();
        x = randx();
        y = randy();
        stroke(linecolor);
        line(center_x, center_y, x, y);
      }
      
      int randcolor() {
        return color(random(255), random(255), random(255));
      }
      
      int randx() {
        return random(width);
      }
      
      int randy() {
        return random(height);
      }
    }

The method definitions `randcolor()`, `randx()`, and `randy()` are unnecessary,
but I thought I'd throw them in to demonstrate that methods work the same
way here as they do in Mobile Processing.

Making it Exciting
------------------
Now that you have a Mobile Processing sketch running on your BlackBerry, it's
time to start working the RIM API to talk with the BlackBerry device.

Here's an example which uses accelerometer data to determine the colors of the lines
from the previous example:

    package suschord.processingtest;

    import net.rim.device.api.system.AccelerometerSensor;
    import net.rim.device.api.system.Application;
    import processing.core.PMIDlet;

    public class HelloWorld extends PMIDlet {
      int white;
      int x, y, center_x, center_y;
      int linecolor;
      AccelerometerSensor.Channel accl;
      short[] xyz = new short[3];
      
      public void setup() {
        accl = AccelerometerSensor.openRawDataChannel(Application.getApplication());
        white = color(255);
        background(white);
        center_x = width / 2;
        center_y = height / 2;
        framerate(15);
      }
      
      public void draw() {
        linecolor = accelcolor();
        x = randx();
        y = randy();
        stroke(linecolor);
        line(center_x, center_y, x, y);
      }
      
      public void destroy() {
        accl.close();
      }
      
      int accelcolor() {
        accl.getLastAccelerationData(xyz);
        return color(xyz[0], xyz[1], xyz[2]);
      }
      
      int randx() {
        return random(width);
      }
      
      int randy() {
        return random(height);
      }
    }

From my tests, this works with most of the RIM API, aside from the UI classes.
Even code that needs to be signed works.  There are some caveats with using
Mobile Processing, though.  One major issue is that MIDlets cannot automatically
start when the device does.  I'm looking for a workaround for this, or a way
to compile and deploy as a native app.  Time will tell if I can make this work,
however.  Future posts will explain how to listen for keyboard/trackball events, 
touchscreen events, etc.

Thanks for reading!</t>
<t tx="peckj.20140929120632.5200"></t>
<t tx="peckj.20140929120632.5201">@language md
--- 
date: 2012-09-21
tags: [raspberry pi, rpi, raspi, sysadmin, embedded, raspbian, io]
title: Adventures with a Raspberry Pi

Hello all,

When I came home Wednesday afternoon, I was surprised to see my Raspberry
Pi waiting for me.  Well, that's a lie, as I had been tracking it all
day online.  But I was happy that it was here!

One of my goals with the Raspberry Pi is assembling a small, cheap computing
cluster, so that I might understand more about distributed computing and 
clustering in general.  My initial plan is a 4+1 node cluster, running distributed
python software by built with the use of the [dispy framework](http://dispy.sourceforge.net/).
I have no real goals for what I want this software to do yet, but the idea
is that if I can get a cluster up and running and talking to each other
with dispy, I can find an embarrasingly parallel problem and tackle it.  
I'm already thinking of running huge Game of Life simulations and such, 
with each node rendering roughly a quadrant of the world.  And other things
too, but that's not important at the moment.

So, what do I mean by a 4+1 cluster?  Well, perhaps my recent system administration
leanings are kicking in here, but I would like there to be a dedicated 
administration and monitoring node, which controls and looks after the
other four nodes, and also acts as the central server which collects
the compute data from the other nodes and stitches it together, massaging
it into a form that's useful.  So there will be four compute nodes, and 
one command and control node.  This might be a bottleneck, and I'm aware
of that.  But I'm not looking for the absolute best performance, I'm looking
for something that's stable, managable, and scalable... plus, the 10/100
NIC on the RPi kind of prevents massive throughput anyway.  As for the
monitoring side of things, I'm writing a package of shell scripts
at the moment to collect system information and generate a webpage.  I
know there are packages out there to do this for me, but I want to write
it myself... it's fun.

So, the RPi I currently have, which I'm calling orison at the moment, 
will end up being the command control node, orison-locus.  The compute
nodes, orison-foci-1 throubh orison-foci-4, will need to be ordered.

Until I have a bit more cash to throw down for this,  I've decided to
play around with what I have.  So, here's a list of what I've done on 
orison so far, and what will probably make it into orison-locus and
orison-foci in the end.

  - Formatted SD card with most recent version of the official Raspian Wheezy distro
  - Enabled sshd to start on system startup
  - Enabled overclocking - Turbo mode (mine has Samsung ram, so it should be fine)
  - Tested overclocking - it works!
  - Set up wi-fi
  - Updated + upgraded all packages from the apt repositories
  - Set up the [watchdog timer](http://binerry.de/post/28263824530/raspberry-pi-watchdog-timer), so if my RPi is ever hung, it will reboot itself, tested this with a forkbomb
  - Changed hostname from 'raspberrypi' to 'orison'
  - Installed avahi-daemon, to allow connecting to the machine with orison.local
  - Installed sysstat
  - Installed gcc-4.7 (gcc-4.6, installed by default, is broken and buggy)
  - Installed git
  - Installed [rpi-update](https://github.com/Hexxeh/rpi-update)
  - Managed to get [Io](http://iolanguage.com/) to compile (iobin package coming later today!)
  - Changed password on the default 'pi' user
  - Created a new user account for myself (should delete the pi user)
  - Edited sudoers to require a password for sudo
  - Set up ssh keys for key-based auth

So I have a fairly stable, overclocking on-demand system now.  I'm happy.</t>
<t tx="peckj.20140929120632.5202"></t>
<t tx="peckj.20140929120632.5203"></t>
<t tx="peckj.20140929120632.5204">@language md
--- 
tags: [encryption, Diffie-Hellman, key, xor, shared secret, code-dump]
date: 2012-10-04
title: A Simplistic Introduction to Diffie-Hellman Key Exchange

So, recently, I've been getting into encryption.  In that vein, I thought
I'd give a quick overview of two topics: simple XOR encryption, and 
Diffie-Hellman key exchange.

XOR encryption
--------------
The first topic is almost mindnumbingly simple, but it is a simple, cheap,
easy to afford encryption algorithm which has several nice features: it's
symmetric, composable, and stupid fast.

So, for XOR encryption to work, you need two things: a payload (the 
'cleartext') and an encryption key.  The algorithm takes the key and uses
it to modify the payload, creating what is known as the 'cyphertext'.  
Both the key and payload are typically strings, but anything that can be 
converted to binary numbers will work.  To make things simple, I'm going 
to use numbers in my examples that follow, instead of strings, so as to 
avoid encoding concerns, which are really something that shouldn't be 
worried about when looking at encryption concepts, as they're more of an 
implementation detail.

Alright, so let's start off with an example.  Say that I want to encrypt
the payload '117' with the encryption key '18'.  These are arbitrary numbers
chosen for the purpose of this example.

First we start by converting these to binary numbers:

    payload = 117 = 0b01110101
    key     =  18 = 0b00010010
    
Then, to create the cypertext, we simply XOR the numbers together:

        01110101          117  cleartext
    XOR 00010010      XOR  18  key
    ------------      -------
        01100111          103  cyphertext
        
So we've successfully encrypted the payload to the cyphertext.  Decryption
is simply XORing the cyphertext with the same key.  This is why it's a 
so-called symmetric encryption scheme--encryption and decryption are the
exact same operation.

        
        01100111          103  cyphertext
    XOR 00010010      XOR  18  key
    ------------      -------
        01110101          117  cleartext
        
What does it mean then, that this algorithm is composable?  Well, what
would happen if I were to encrypt the data with one key, and then a
second, different key?  Would it matter which order I applied the decryption?
Composable encryption algorithms work regardless of the order of decryption.
That is, the following works:

      cleartext  117  01110101
           key1   18  00010010
    --------------------------
    cyphertext1  103  01100111
           key2  201  11001001
    --------------------------
    cyphertext2  174  10101110
    
    Decrypt order: key2, key1:
    cyphertext2  174  10101110
           key2  201  11001001
    --------------------------
     cleartext1  103  01100111
           key1   18  00010010
    --------------------------
      cleartext  117  01110101
      
    Decrypt order: key1, key2:
    cyphertext2  174  10101110
           key1   18  00010010
    --------------------------
     cleartext1  188  10111100
           key2  201  11001001
    --------------------------
      cleartext  117  01110101
      
Cool huh?

Key Exchange
------------
Now, how do two people get the same key?  Surely, one could just tell
the other, and trust that they'll keep it secret.  But someone could
be listening (the walls have ears, you know!).  This won't work.

What does work is something called Diffie-Hellman key exchange.  It involves
both participants agreeing on a "shared secret", which will become part
of the key, as well as each individually choosing a secret number that
they won't tell anyone, not even each other.  They then do some simple
XORing on these and swap.  Because XOR is composable, as explained
above, both participants will be able to generate the same secret key
without ever sharing it with the other, allowing them to communicate
freely.

How does this work though?  Here are the steps (don't worry, there's a 
textual flowchart of this later in the post):

  1. Both participants agree on a shared secret.  Let's use 34.
  2. Each participant independently chooses a secret key.  Let's use 12 
     and 21.
  3. Each participant XORs their secret key with the shared secret. 
     This gives us 46 and 55.
  4. The participants swap these composed keys.
  5. The participants XOR their private keys with the coposed keys that
     they just recieved.  This gives us 59 and 59.
  6. They've generated the same key! They can communicate.
  
Diagrammed out a bit, here's how it looks:

    Person 1          Person2
          34  shared  34
          12  secret  21
          46 composed 55
          55   swap   46
          59   key!   59
          
This does not completely prevent man-in-the-middle attacks, but it does
a good bit to make it harder for people to find the encryption key.

Do note, however, that this implementation is highly flawed: Person 1 can
glean Person 2's secret key, and vice versa, after the swap!  It's a simple
matter of XORing by the shared secret.  True key exchange mechanisms use
stronger encryption schemes that prevent simple means of ascertaining the
private keys of other people.


Some code
---------
As always with these posts, I try to provide some working code to explain
what my words can't convey.  Here's an example in Io:

&lt;script src="https://gist.github.com/3835917.js"&gt; &lt;/script&gt;

Enjoy.
</t>
<t tx="peckj.20140929120632.5205"></t>
<t tx="peckj.20140929120632.5206">@language md
--- 
date: 2012-10-05
tags: [axio, functional, language, Turing, lambda]
title: A proposition for a small purely functional, typeless language

So, one of my favorite pasttimes is language design, and a few weeks ago
I whipped up the following grammar for a purely functional, typeless
language, which consistes solely of lambdas and symbols.  It's essentially
the \\(\lambda\\)-calculus, with global, immutable binds (much like 
substituting a symbol).

Anyways, here's the grammar:

    lam ::= (\ var1 ... varn :: exp)
    
    exp ::= lam
          | var
          | (prim exp1 ... expn)
          | (exp1 ... expn)
         
    prim ::= #bind | #halt

Aside from the grammar, comments are defined with double slashes and run
to the end of the line, C++/Java style.

The two primitives have the following meaning:

    (#bind sym val) =&gt; binds sym to val in the global symbol table
    (#halt exp)     =&gt; evaluates exp and returns that value to the 
                       calling context (OS level) as a string

As I mentioned, it's small.  Masochistically small, it appears.  There's
also absolutely no concept of I/O aside from return values.  But it fully 
supports the \\(\lambda\\)-calculus, and therefore is Turing complete.

However, in implementation, a few things would be pre-bound to make
the programmer's life simpler.  These would not be part of the grammar,
and therefore not a part of the syntax of the language, as they would be
stored like any other bound symbol internally.  There would be one exception
to these pre-bound values, and that's the storage of numbers.  Church numerals
would be auto-converted on the fly, and then cached into the global bind
table.

Semantically speaking, functions would be evaluated identically to the
\\(\lambda\\)-calculus.  Also, the interpreter would perform automated
currying internally.

    (\ a b :: b a) =&gt; (\ a :: (\ b :: b a))
    (\ a b :: b a) someval =&gt; (\ a :: (\ b :: b a)) someval =&gt; (\ b :: b someval)

Here's an example program in this small language, which I'd like to call
axio:

    // fibonacci generator
    // supporting functions
    (#bind succ (\ w y x :: y (w y x)))
    (#bind + (\ a b :: a succ b))
    (#bind phi (\ a b f :: f a b))
    (#bind sigma (\ x :: phi (x false) (+ (x true) (x false)))) 
    (#bind fib (\ n :: (n sigma (phi 0 1)) false))

    // fib
    (fib (fib 5))

    // exit
    (#halt)

This would calculate the 5th Fibonacci number, let's call it f_5, and then
would calculate the f_5th Fibonacci number.

There really isn't much purpose to this language, especially given the 
complete lack of I/O, other than it may be a neat challenge to implement,
and an excuse to write a state-machine interpreter.

Ah well, that's axio.

Thanks for reading!</t>
<t tx="peckj.20140929120632.5207">@language md
--- 
date: 2012-10-05
title: Blog resources now hosted on github
tags: [github, heroku, cloud, downloads]

Hi all,

This is a really short update, but I just wanted to let you know that
from now on, all my downloadables from this blog are going to be hosted
on github rather than on heroku.  So, don't be afraid if you see 
github in the download links--that's me, I did that on purpose.

Thanks for reading!</t>
<t tx="peckj.20140929120632.5208"></t>
<t tx="peckj.20140929120632.5209">@language md
---
title: ! 'Theory Time: A pure lambda-calculus foundation for prototype-based OOP'
date: 2012-10-19
tags: [theory, lambda calculus, lambda, prototype, oop, map, list, hash]

Hello all,

I'm excited to write this post today, because it's something that just kind of 
flowed to me as I was thinking about programming language paradigms.  I was wondering
about just how deeply related functional programming is to other methodologies,
and figured that if the \\(\lambda\\)-calculus is Turing complete, there must be
a way to model object-orientation on some level with it.  What follows is my attempt
at forming a mathemtatical bridge between functional and object oriented programming
paradigms, by showing that OOP is really just a subset of the functionalities provided
by the \\(\lambda\\)-calculus.

A bit of background
-------------------
Alright, I should probably start by defining a few things, such as what object model
I will be using, along with some notational conventions.

First, the object model.  I was looking for the absolute minimal model of what
an "object" is that I could use as a foundation for building in the \\(\lambda\\)-calculus.
It seems that a stripped down version of Io's object model fit the bill here.  In
Io, an object is just a collection of slots, each of which is a named reference to another
object.  There is no differentiation between classes and instances--everything is
a usable object.  And every new object extends and modifies a previously existing
object ("cloning" a "proto" in Io speak).  To interact with an object, you reference 
its slots by sending it a message, which acts as a key to an internal lookup table,
returning the value of the slot which is named the same as the message you sent.
So we have this graph-based relationship between objects tied together by names which
act as messages.  

This sounds to me like an easy thing to model abstractly.  We'll need some sort
of map to tie names to values, to act as an object's collection of slots.  We'll
also need a construct to bind that map to an ancestor object.  This construct will
be our object model.  To interact with it, we'll need some sort of a lookup method
to access the values from the map, and some sort of forwarding mechanism to look up
slots that were not found in the object in question's map, but may be in its
ancestor's slots.  And that, really, is all we need to model this.

But before I dive into details, let me explain my notation for the following
\\(\lambda\\)-terms a bit, as it does not follow the previous examples I've used
in this blog, simply for the sake of using more descriptive bound symbols.

Some conventions:
  
  - Lowercase letters are variables, and are exactly one letter each.
  - Words in UPPERCASE are bound symbols, which are simply aliases for longer \\(\lambda\\)-terms.
  - Words in camelCase are the "interface" that I want to expose as the end result
    of this work.  They are otherwise functionally identical to UPPERCASE aliases.
  - Symbols will be separated with a space for readability.
  
Also, for sake of easy editing, all terms will be typeset in a `fixed-width` font.

Alright, enough babbling, time to begin.

\\(\lambda\\) foundations: a list
---------------------------------
This article assumes you know how to use church numerals, and the definitions for
a few common functions, such as SUCC, TRUE, FALSE, etc.  I will provide definitions
when I remember to, but if I'm missing something, I apologize.

Anyways, a quick and dirty explanation of a list in the \\(\lambda\\)-calculus
follows closely the implementation of a list in LISP, in that a list is either 
the empty list (NIL), or a pair consisting of an element and a smaller list.

We can use the following definitions for creating and manipulating lists:

    TRUE  := λa b.a
    FALSE := λa b.b
    CONS  := λa b f.f a b
    NIL   := λf.TRUE
    NIL?  := λl.l (\a b.FALSE)
    HEAD  := λl.l TRUE
    TAIL  := λl.l FALSE
    
These functions are the building blocks for lists in the \\(\lambda\\)-calculus.

So, an example list could be:

    L := CONS a (CONS b (CONS c NIL))
    
Some operations on this list could be:

    HEAD L                                   -&gt; a
    TAIL L                                   -&gt; CONS b (CONS c NIL)
    HEAD (TAIL L)                            -&gt; b
    NIL? (TAIL (TAIL (TAIL L)))              -&gt; TRUE
    NIL? L                                   -&gt; FALSE
    CONS (HEAD L) (CONS (HEAD (TAIL L)) NIL) -&gt; CONS a (CONS b NIL)
    
Simple enough, right?

Moving on to maps
-----------------
Defining a mapping construct in the \\(\lambda\\)-calculus is simple once you have
a definition for lists down.  A map is simply a list of pairs, each pair being
a pairing between a key and a value.

One issue with maps is that unless your keys are guaranteed to be unique, you'll
have some collisions, resulting in either maps with more values than keys, or missing
elements.  For simplicity, we'll limit our maps to single-valued maps, wherein each
key maps to exactly one value.

An example map could be:

    M := CONS (CONS 1 x) (CONS (CONS 5 y) NIL)
    
So, here we have a map with 2 keys, here being Church numerals (you will see why
in a second), mapping to different values.

In order to make use of this map, we need a function to lookup the value related
to a given key.  This is why I chose Church numerals for the keys above--there
is an easily defined equality predicate for testing if two Church numerals are
the same.  Though, any class of \\(\lambda\\)-terms that you can define an equality
predicate for will work as the keys of a map.

The lookup function isn't to difficult to define:

    LOOKUP := λr m k.
      IF (= (HEAD (HEAD m)) k)
        (TAIL (HEAD m))
        (IF (NIL? (TAIL m))
          NIL
          (r (TAIL m) k))

That's a bit dense, but in pseudo-code, it reads a bit like this:

    lookup(map, key):
      if (the head of the first element of map == key)
        then [return the tail of the first element of map]
        else [
          if (the tail of map is the empty list)
            then [return the empty list]
            else [return lookup(tail(map), key)]
        ]
        
Actually using this involves the Y-combinator, a method of recursion in the \\(\lambda\\)-calculus:

    Y := λa.(λb.a (b b)) (λb.a (b b))
    
To perform a lookup of key k on map m, do this:

    (Y LOOKUP) m k
    
Easy as pie.

The object model
----------------
Our object construction is almost complete!  Now we just need to tie the map of
slots to an ancestor object in some construct, and define a getSlot function to
retrieve the value of a slot in an object or its ancestors.

Guess what it's going to be.

That's right, another pair.  We pair an ancestor to a map, and we have an object.
Pretty easy.

Here's an example object:

    O := CONS a (CONS (CONS 1 x) (CONS (CONS 5 y) NIL)

For the getSlot function, we need to be able to find the value of some slot s
in either the object's slot map, or failing that (a value of NIL returned), in 
the slots of its ancestor object, recursing further if it isn't found there either.

A definition for this is pretty simple as well:

    GETSLOT := λr s o.
      IF (NIL? ((Y LOOKUP) (TAIL o) s))
        (IF (NIL? (HEAD o))
          NIL
          (r (HEAD o) s))
        ((Y LOOKUP) (TAIL o) s)
        
Again, pseudo-code for those who would like it:

    getslot(slot, object):
      if (the returned value for lookup(tail(object), slot) is nil)
        then [
          if (the head of object is nil)
            then [return nil]
            else [return getslot(head(object), slot)]
        ]
        else [return lookup(tail(object),slot)]

Again, this makes use of the Y combinator, but because getSlot will be a part of
our clean interface to this model, I want to hide that detail for aesthetic
purposes.

    getSlot := Y GETSLOT
    
And our model is complete!

What this model does
--------------------
This model allows us to perform simple method chaining to adopt a very linear 
programming style.  Take the following line, for instance:

    a (getSlot 3) (getSlot 4) (getSlot 2)

This would retrieve the slot 3 from object a, then retrieve that returned object's
4 slot, then finally retrieve that returned object's 2 slot.  This closely mirrors
the idea of message passing in prototype-based object-oriented languages.  Because
everything in the pure \\(\lambda\\)-calculus is a function, there is no such
thing as an exception in the above statement.  However, the end result might be
absolutely meaningless if one of those slots didn't exist along the way.

What this model doesn't do
--------------------------
Multiple inheritence, for a reason.  Which order would the ancestors be visited?
Besides, you can emulate multiple inheritance by creating multiple objects that
chain together dependencies.

Self referencing, as there's no introspection in the \\(\lambda\\)-calculus.  Though
it can be achieved in much the same fashion as with the Y combinator:

    a (getSlot 3) a
    
That would pass a as a value to a's 3 slot.  Kind of python-like, but performed
manually.

Mutation, because I wanted to model this as a purely functional system, and further
wanted to stay strictly pure with my \\(\lambda\\)-terms.  Mutation is simply not
a concept that exists within the scope of this article.

Final thoughts
--------------
This was an interesting process of exploring and writing.  I'm not typically a theoretical
mathemetician, but something about the \\(\lambda\\)-calculus just gets me (as I'm
sure you've noticed).

Thanks for reading, and any suggestions/comments/criticisms are welcome in the comments
area below.</t>
<t tx="peckj.20140929120632.5210"></t>
<t tx="peckj.20140929120632.5211">@language md
--- 
title: A few quick blackberry apps
tags: [blackberry, apps, free]
date: 2012-10-30

Hello all,

I just thought I'd release a few quick BlackBerry apps I developed.  These are for BlackBerry OS 7.1.0.

Conway - a Conway's game of life animation

[Conway](https://rawgithub.com/gatesphere/blog-resources/master/downloads/bb-apps/conway/Conway.jad)

Source:

[Conway Source](https://github.com/gatesphere/blog-resources/tree/master/downloads/bb-apps/conway/source)

PocketRave - an accelerometer-based party in your pocket

[PocketRave](https://rawgithub.com/gatesphere/blog-resources/master/downloads/bb-apps/pocketrave/PocketRave.jad)

Source:

[PocketRave Source](https://github.com/gatesphere/blog-resources/tree/master/downloads/bb-apps/pocketrave/source)

That's all.
</t>
<t tx="peckj.20140929120632.5212"></t>
<t tx="peckj.20140929120632.5213">@language md
--- 
tags: [telnet, negotiation, protocol]
date: 2012-10-31
title: A tale of three telnets

Recently I've been building a telnet-compliant server in Io.  Well, 
pseudo-compliant, but that's another story.  But, in doing so, I've
had to overcome how three different popular telnet clients interpret
the standards, and had to work around these issues, especially with
respect to negotiation.

A primer on negotiation
-----------------------
Negotiation is the method that telnet clients and servers use to express
how they are going to behave to each other.  It consists of sending 
sequences of bytes back and forth, leading to an understanding between
the client and server.  In the traditional implementations, the server 
almost always initiated negotiation with the client, rather than 
vice-versa.

Well, at least in theory, that's how things should operate.  But in
the three common clients that I'm using to test, this is not the case.

`telnet` from GNU inetutils
-------------------------
This is the standard telnet client for unix-like operating systems, such
as Linux.  

This client likes to initiate negotiation, firing a stream off to the 
server as soon as it connects.  It will handle either \n or \n\r as
a newline character.  It also listens to renegotiations (i.e., asking
it to turn off it's local character echoing for entering a password,
and then turning it back on).

PuTTY
-----
PuTTY is a common and widely used ssh, telnet, and serial terminal client
for multiple platforms.  I prefer it over any of the others I've used,
but that's probably because I use it every day for hours at a time for
my job.

Much like the GNU `telnet` package, PuTTY likes to initiate negotiation
upon connection, though it sends fewer commands over the wire than
`telnet` does right off the bat.  However, it needs a \n\r for a newline
character.  It also handles renegotiations gracefully.

Windows `telnet`
----------------
This one is the ugly duckling of the group.  Included by default with
Windows, this one acts the strangest of the group.

This client does not initiate negotiation at all.  It needs a \n\r for 
the newline character.  It does *not* handle renegotiations at all.

Well, it actually does handle the negotiation itself, but it doesn't
listen to them.  The moment it recieves a negotiation stream, it shuts
off local character echoing permanently.  It will not re-enable it,
even though it replies that it will.

Just some observations.  Thought I'd share.</t>
<t tx="peckj.20140929120632.5214"></t>
<t tx="peckj.20140929120632.5215"></t>
<t tx="peckj.20140929120632.5216">@language md
--- 
tags: [bash, stupid tricks, hacks, code-dump]
date: 2012-11-12
title: "Stupid Tricks: bash"

This article showcases a few stupid bash tricks that I've gathered in my 
recent employment as a unix sysadmin.  Some of these aren't all that 
useful, but they are neat.

First up, a fun toy:

&lt;script src="https://gist.github.com/4061547.js?file=slash-r.sh"&gt;&lt;/script&gt;

Running this, you'll see a counter that rises from 1 to 100, overwriting 
itself as it goes.  You could use this with some trickery to give a 
visual indicator of how far done a process is, for example.

Next up, returning a value from a function:

&lt;script src="https://gist.github.com/4061547.js?file=return-value.sh"&gt;&lt;/script&gt;

You can scale this to return as many values as you want from a function.  
I use this one all the time.


Concatenate strings:

&lt;script src="https://gist.github.com/4061547.js?file=concat.sh"&gt;&lt;/script&gt;

It really is as simple as mushing them together like that.


That's all for now.  Thanks, for reading!</t>
<t tx="peckj.20140929120632.5217"></t>
<t tx="peckj.20140929120632.5218">@language md
--- 
title: WebTally - a stupid webapp
tags: [webtally, javascript, webapp]
date: 2012-11-13

Hello,

So, yesterday, I wrote a quick little webapp to allow someone with a smartphone
to count things without looking at the screen.  It's pretty simple, just using
javascript to listen for onClick events on a div, but it was a neat way to 
learn a bit of javascript, as I don't really use it.  As a plus, this is an 
extremely light load...  the entire app is a single html file, and all of
the processing is done clientside.  The interface is minimal to say the least,
and it's fairly intuitive.

If you want to check it out, go to [the WebTally page](http://webtally.suspended-chord.info/).

Thanks for reading!
</t>
<t tx="peckj.20140929120632.5219"></t>
<t tx="peckj.20140929120632.5220"></t>
<t tx="peckj.20140929120632.5221">@language md
--- 
date: 2012-12-26
tags: [blog, website, html, css, static site generator, redesign]
title: Blog and Website redesign

Hello everyone.

As you may have noticed, this blog has gone through a redesign.  It's just
visual, but I think it looks nicer.

The reason I did that is to bring the blog more in line with my in-progress
redesign and restructure of my main website.  I'm rebuilding the site from
scratch in order to make it more modern, clean, professional, and appealing.

To assist me in that goal, I've hacked together quite an easy and fun tool
for static site generation using Python, which I'm calling ptah.  It's 
available on my github account: [ptah](https://github.com/gatesphere/ptah).

So far, the site looks and acts nice, and has some fun features like 
a dynamically generated QR code for each individual page, breadcrumb 
navigation links, and responsive web design.  Overall, the whole thing 
is much more standards compliant, so it should render consistently across 
more browers than before.  Also, it's completely minimiized, so pageloads
should be much faster.  And, there will be no databases behind it anymore!
It's all static HTML that I can update by editing a markdown file!

I may eventually migrate this blog over to ptah instead of toto, but for 
the time being, I think toto is working nicely for my needs.

Thanks for reading!</t>
<t tx="peckj.20140929120632.5222"></t>
<t tx="peckj.20140929120632.5223"></t>
<t tx="peckj.20140929120632.5224"></t>
<t tx="peckj.20140929120632.5225">@language md
--- 
date: 2013-01-08
tags: [processing, prototyping, grid, code-dump]
title: A quick prototyping grid in Processing

First post of the new year!

This one is a quick one though, just wanted to share a quick little 
idea I whipped up in Processing that could help others make Processing
sketches.  It's kind of a meta-sketch.

Basically, it's a customizable gridline maker, so that you can easily 
line things up in your sketches without doing too much math, and just 
focus on making art.  When you don't want the grids anymore, just change 
the `GRID_DRAW` variable to `false`, and you're good to go!

Code is in this gist:

&lt;script src="https://gist.github.com/4486700.js"&gt;&lt;/script&gt;

It's in the public domain, so go mad.

Thanks for reading.</t>
<t tx="peckj.20140929120632.5226"></t>
<t tx="peckj.20140929120632.5227">@language md
--- 
tags: [Processing, sketch, art, creativity, code-dump]
date: 2013-01-14
title: A few artistic Processing sketches

Last Friday, I was at a pizza/tea party/gathering at a friend's house.  
Almost everyone that showed up was a creative type, so we did a sort of 
reverse-charades thing, where we picked ideas out of a hat and had to 
do something creative with them in 5 minutes, and then went around the 
room showing them off.

Being me, I decided to do short Processing sketches.

We only did two rounds of this... so here's what I came up with.

The first word was "beastly."

[code for "beastly"](https://github.com/gatesphere/blog-resources/tree/master/downloads/source/beastly)

The second was "scandalous."

[code for "scandalous"](https://github.com/gatesphere/blog-resources/tree/master/downloads/source/scandalous)

It was fun. :)</t>
<t tx="peckj.20140929120632.5228"></t>
<t tx="peckj.20140929120632.5229"></t>
<t tx="peckj.20140929120632.5230">@language md
---
date: 2013-02-01
tags: [leo, literate programming, text editor]
title: Leo is Love

Hello all.

Today I'm writing to evangelize my newest addiction, [Leo](http://leoeditor.com/).

Leo is a text editor, PIM tool, outliner, visual literate programming IDE, database, and way of life.  Since
discovering it a few days ago, I've started using it exclusively.  In fact, this very article was written with
it.

I thought I'd share a few tips on how to get it up and running on Windows systems, and then a few little 
snippets of fun that I've picked up along the way.

Installing Leo on Windows systems
---------------------------------
Getting Leo running on Windows systems isn't as difficult as it seems.  You do need a few things, though:

  1. Python 2.7, 32-bit.  Available [here](http://python.org/ftp/python/2.7.3/python-2.7.3.msi).  64-bit 
     Python does not work for PyEnchant, meaning that you won't have spellcheck if you go that route.  Also,
     there isn't a 64-bit setuptools package at the moment, so installing docutils will be difficult.  But Leo 
     doesn't need much RAM, so this isn't a problem.
  
  2. PyQT for 32-bit Python 2.7.  Available [here](http://sourceforge.net/projects/pyqt/files/PyQt4/PyQt-4.9.6/PyQt-Py2.7-x86-gpl-4.9.6-1.exe).
  
  3. PyEnchant for Python 2.7.  Available [here](http://pypi.python.org/packages/any/p/pyenchant/pyenchant-1.6.5.win32.exe).
  
  4. setuptools for Python 2.7.  Available [here](http://pypi.python.org/packages/2.7/s/setuptools/setuptools-0.6c11.win32-py2.7.exe#md5=57e1e64f6b7c7f1d2eddfc9746bbaf20).
  
  5. The latest Leo snapshot.  Available [here](http://www.greygreen.org/leo/leo-editor-latest.zip). 
  
  6. Optional: create-leo.bat, available [here](https://gist.github.com/4692706).

### Install Python, PyQT, PyEnchant, and setuptools, in that order.
Pretty straight forward.  Just accept the defaults and continue.

### Install pip and docutils
Open up a command prompt, and enter the following commands:

    cd C:\Python27\Scripts
    easy_install.exe pip
    pip install docutils
    
### Unzip the leo snapshot
Pick somewhere you'll remember it.

That's it.  You can now run Leo by doubleclicking `launchLeo.py`.  However, we can integrate it into 
the OS a bit more, making it much nicer to use.

### Optional: run create-leo.bat
Copy `create-leo.bat` to your Leo directory (the one with `launchLeo.py`).  Now open a command prompt,
and do the following:

    cd C:\path\to\leo
    create-leo.bat "C:\Python27\python.exe" register
    
That will do 2 things: create some .bat files, and register the .leo file extension to open with Leo.
You are free to move `leo.bat` and `leoc.bat` anywhere on your system... double-click them and Leo
will run (`leoc.bat` keeps the console open).  Sinde .leo was registered to open with Leo, you can
double-click on any .leo file to open it in Leo, too.

Congratulations, you have Leo on your system.

Some Leo Tricks
---------------
### Set up your myLeoSettings.leo file
Seriously, there's crazy power in this file.  It allows you to change the way most of Leo works.

Me? Mine's pretty simple at the moment.

    @settings
    - Plugins
    --- @enabled-plugins &lt;- I've disabled the nav_qt.py
                            plugin, as I find it annoying
    - Keyboard Shortcuts
    --- @shortcuts MyKeybindings &lt;- I've assigned `tab-cycle-previous` 
                                    and `tab-cycle-next` to 
                                    `ctrl+shift+tab` and `ctrl+tab`, 
                                    respectively, as it mimics how 
                                    Firefox and Chrome handle 
                                    tab-switching

### Make some @buttons with external script references
I wanted to make some @button nodes which would call a function with different parameters.  Due
to the way Leo scopes things, it wouldn't work to write the function in a separate script and
reference it with a `&lt;&lt; script reference &gt;&gt;` notation, as in a @file node -- it won't be expanded.

The solution, provided to me on the leo-editor Google group by the author of Leo himself, is brilliant.

&gt; Use exec to "inject" shared code into the namespace of the script being executed.   This is a cute trick, but it doesn't seem to be in the faq.  There are example of this trick in unitTest.leo:  search for "@common".
&gt; 
&gt; Do the following:
&gt; 
&gt; A. Put the common code somewhere, say in a node called "@common code".  Note that the node can be called anything: I use @common to draw they eye, but it's just my convention.
&gt; 
&gt; B. Start each script using the common code with::
&gt; 
&gt;     exec(g.findTestScript(c,'@common code'))
&gt; 
&gt; `g.findTestScript` returns the *expanded* code of the entire subtree whose head is the node "common code".  Thus, you can use @others and section references in the "common code" subtree! It's cute.

This translates into something like this:

    Node `@common code`:
      def foo(bar):
        g.es("Hiya, %s!" % bar)
        
    Node `@button george`:
      exec(g.findTestScript(c,'@common code'))
      foo('george')
      
    Node `@button clem`:
      exec(g.findTestScript(c,'@common code'))
      foo('clem')
    
2 buttons calling 1 script, without code repetition!  This is nice, and it shows the power that Leo has, by
giving you the ability to access your entire document programmatically.  Simply beautiful, in my book.

I've used what I've learned so far to begin creating a Leo workbook helpful for running tabletop RPGs.  It's
on Github if you're curious: [gatesphere/rpg.leo](https://github.com/gatesphere/rpg.leo).

Thanks for reading!</t>
<t tx="peckj.20140929120632.5231"></t>
<t tx="peckj.20140929120632.5232"></t>
<t tx="peckj.20140929120632.5233">@language md
---
date: 2013-03-19
tags: [news, leo, programming, rpgs]
title: A few bits of news

Hello all,

Just thought I'd update you on a few things I've been up to since the last time 
I posted (God! I'm bad at this keeping a schedule thing!).  In particular, I've 
coded up a few small tools, and launched the rebirth of ceekrt.  So... here's a 
short list of what I've done in the past month and a half plus change:

  - Submitted [grinder][1] to the February 2013 [PLTGames competition][2]
  - Wrote a small tabletop RPG manager within Leo: [rpg.leo][3]
  - Contributed a few small fixes to [easy6592][4] and [candelabra][5]
  - Added Markdown support to Leo: [leo-editor/markdown_support][6]
  - Wrote a minimaxing AI for the game [Button Up!][7] in [newLISP][8]: [fastendown][9]
  - Attempted to learn, and subsequently gave up on COBOL
  - Submitted [silica][10] to the March 2013 [PLTGames competition][11]
  - Wrote a small implementation of the [Mythic GM Emulator][12] in Python: [mythical-pie][13]
  - Wrote and relaunched a new version of my old pet project, [ceekrt][14], in Python with Flask
  - Launched the new version of [my portfolio pages][15]!
  
  [1]:https://github.com/gatesphere/grinder
  [2]:http://www.pltgames.com/competition/2013/2
  [3]:https://github.com/gatesphere/rpg.leo
  [4]:https://github.com/gatesphere/easy6502
  [5]:https://github.com/gatesphere/candelabra
  [6]:https://code.launchpad.net/~gatesphere/leo-editor/markdown_support
  [7]:http://www.boiteajeux.net/jeux/btu/aide_en.php
  [8]:http://www.newlisp.org/
  [9]:https://github.com/gatesphere/fastendown
  [10]:https://github.com/gatesphere/silica
  [11]:http://www.pltgames.com/competition/2013/3
  [12]:http://www.mythic.wordpr.com/page14/page9/page9.html
  [13]:https://github.com/gatesphere/mythical-pie
  [14]:http://ceekrt.suspended-chord.info/
  [15]:http://suspended-chord.info/
  
Looks like I've been busy.  Huh.

As for this blog, I swear it's not languishing... but I may be refocusing it once again, into sort of a catch-all for fun stuff.  Programming, science, math, game design, and observations and life musings will be the order of the day.  I still like the name a&amp;rarr;ab, so I'll keep that.

Anyways, thanks for reading!</t>
<t tx="peckj.20140929120632.5234"></t>
<t tx="peckj.20140929120632.5235"></t>
<t tx="peckj.20140929120632.5236">@language md
---
date: 2013-04-04
tags: [fudge, rpg, fate, dice, math, simulations, code-dump]
title: Fudge is logarithmic

Hello all,

I thought I'd take a second and explain something that I once read about
the tabletop RPG ruleset [Fudge](http://fudgerpg.com/).  A while back, I 
was looking for some space opera inspiration for a Fudge game I was going 
to run (though, it ended up taking a very different direction!), when I 
came across a set of draft rules called, appropriately, [Fudge Space Opera](http://www.sonic.net/~rknop/php/Omar/fudge/spop/spop_0.3.0.pdf).
Right in the introduction, it states:

&gt;Fudge ... is intrinsically a logarithmic system (although you don’t need 
&gt;to know that to play it!), and that together with the Scale mechanic lets 
&gt;you elegantly renormalize yourself to any range of sizes.

Now, I knew what the author was getting at here - the attribute scale
in Fudge is not linear as it seems.  In the Fudge rules, chapter 2, section
2.31, Strength and Scale are discussed.  Regarding relative strengths,
the rules state:

&gt;Each level of Strength (from Terrible to Superb) is defined to be 1.5 times 
&gt;stronger than the previous level. A character with Good Strength is thus 1.5 
&gt;times as strong as a character with Fair Strength.

And then further, about scale:

&gt;Strength Scale increases in the same way: a Scale 1, Fair Strength individual 
&gt;is 1.5 times stronger than a Scale 0, Fair Strength individual. This holds for 
&gt;each increase in Scale: a Scale 10 Superb Strength creature is 1.5 times stronger 
&gt;than a Scale 9 Superb Strength creature, for example.

So here, the rules give us two dimensions that act in a similar manner to increase
a variable by a relative degree.  If we were to give that variable a numerical 
value, starting at 1 for Terrible, Scale 0, and draw curves representing the
values at Scales 0 through 10, we'd get the following graph:

![Fudge power scales](https://rawgithub.com/gatesphere/blog-resources/master/images/fudge-power-scales.svg)

Each different colored line is a different scale, and each of the points on the 
x-axis is a trait rating, on the standard Fudge Terrible ... Superb ladder.

So, what does this graph tell us?

We see that the curves tend to diverge more wildly from each other at the far 
right of the graph, whereas they're more similar on the far left.  This fits the
profile for an exponential relationship.  Systems which are rated on a linear
scale overlaying an exponential true-value are logarithmic in nature.

Fudge is logarithmic.

It's simple things like this that make me truly appreciate the power of multiplication
when describing phenomena.

If you're curious, the graph was generated with [PLOTlet](http://www.plotlet.com/),
with data provided by a small Leo script, available on [gist](https://gist.github.com/gatesphere/fd9939474a5c5bb17da2).

Thanks for reading!</t>
<t tx="peckj.20140929120632.5237"></t>
<t tx="peckj.20140929120632.5238"></t>
<t tx="peckj.20140929120632.5239">@language md
--- 
title: It's been so long...
tags: [sorry, updates, plans]
date: 2013-09-20

So... here we are, 5 months without an update.  Man, I'm *really* bad at this whole blogging thing.

To the few readers I have, I'm sorry.  I have **not** fallen off the face of the Earth (at least
not yet!), I've just been busy.

Since it's been so long, I'd like to share a partial list of what I've been doing with myself
these past five months... I say partial because I haven't documented much of anything, so I can't
be sure that I'm gathering it all.  Oh well, here we go:

  - I've become a contributing member of the [Leo Editor](http://leoeditor.com/) team
    - Added markdown support to the viewrendered.py plugin
    - Added printing support with the printing.py plugin
    - Set up the automated API docs at [ReadTheDocs](http://readthedocs.org)
    - Set up the automated nightly [github mirror](http://github.com/leo-editor/leo-editor.git) of the source code
    - Contributed to the [Leo Blog](http://leo-editor.github.io) (earlier today, actually!)
  - I've become pretty enamoured with the game [Smite](http://smitegame.com/)
    - Thor, Xbalanque, and Nieth are ownage, by the way
  - I've picked up some game design projects
    - The main one is Mint Fudge, my hack of Fudge
      - Wrote the entire first version of the Mint Fudge book, threw it away
      - Rebuilt the whole system from scratch - whoo!
      - Writing the new book now
    - Working on getting a small print-on-demand publishing imprint going
    - Purchased a few related domains...
  - I've recently started playing with [libtcod](http://doryen.eptalys.net/libtcod/)
    - I think I'm going to resurrect my two dead roguelike projects, this time in python+libtcod
  - Wrote and released [Underwood Writer](https://github.com/gatesphere/underwood-writer)
  - Started writing creatively... knocked out a few short stories and working on some characters
  - Figured out how to bake kickass scones
  - A bunch of other fun stuff I can't remember at the moment, I'm sure...
  
Well, the fact that I can't remember this stuff bothers me.  Combined with a general lack of motivation
lately (you'd never be able to tell from the outside, apparently), I've decided to work out a new productivity
system for myself.  I'll be posting that in another article soon.

Additionally, I have a few other plans, both short-term and long-term:

  - Roguelikes!
  - RPGs!
  - Leo work!

...yeah.  I need to get busy.

Thanks for reading this ramble.  I'll keep this place more up to date, I swear!
</t>
<t tx="peckj.20140929120632.5240">@language md
---
date: 2013-09-20
tags: [leo, productivity, gamification, lifehack, experiment, moleskine]
title: Leo Things Done

# Introduction

Recently I've felt torn between the million and a half projects I have 
on the back burner at any given time.  I do too many things, and it's
becoming apparent.  I find myself needing a way to keep organized, and
to better motivate myself to balance the load.  I've read up on GTD,
ZTD, Pomodoro, etc, and found them lacking, or over structured.  Additionally
I failed to see how they would help me.  I've decided to come up with a
scheme that is tailored to the way *I* work, and the way *I* accomplish
things.

What I've come up with, and intend on starting soon, is a system I'm 
calling LTD, or Leo Things Done.  I know, catchy.  Whatever, it's just
a name.  This post describs the basics of what I'll be trying out over
the next month or so... and seeing whether or not it works for me.  I'm
*not* advocating this system for anyone else's use, but if you decide
to try it, let me know how it goes.

# The system
LTD is a combination of parts of ZTD and GTD, with some Gamification
bits thrown in.  On top of it all, it uses Leo to maintain itself.
Or, at least I hope it does.

## What you need
  - A computer with Leo
  - A small pocket notebook (I use Moleskine squared notebooks -- I'm not pretentious, they just fit nicely in my pocket, and I like grid paper)
  - Pen/pencil
  - Willpower

## Setting up Leo
The core of this system is Leo.  The todo.py plugin needs to be enabled, as it will be used for priority and due-date storage.

A .leo outline with the following chapters should be kept:

  - Recurring (for daily, weekly, monthly, etc. tasks)
  - Long-term Projects
  - Notes
  - Ideas
  - Points

Within each of those chapters, create the following 3 nodes:

  - Work
  - Responsibility
  - Leisure

## Using the system
Use the Notes chapter to scribble down notes that are related to tasks.  You can clone from notes to a child of a task if you wish, to keep
yourself organized.

Use the Ideas chapter to scribble down ideas that are unrelated to current tasks.  Ideas are always good to keep in mind, because in the
future they may be promoted to tasks, once you have the time to approach them, or the desire to do something new.

Use the Recurring chapter for daily, weekly, monthly, etc tasks.  I suggest using @daily, @weekly, etc directives in headlines to remind yourself.  Feel free
to use todo.py to set due dates and priorities, as well.  When you finish a task in the Recurring chapter, create a copy of the node you've finished, set the
due-date on that one to a proper value, and then set the priority to "done" with todo.py.  A priority sort may be in order.  

Use the Long-term Projects chapter to keep yourself on track with the long term projects you're working on.  Projects are made up of multiple tasks, so
each project should have a master node (i.e., Long-term Projects-&gt;Leisure-&gt;Write that novel), under which the tasks reside.

Additionally, each task is either @major or @minor.  When you complete a @major task, award yourself 3 points (in the "Points") chapter of that task's type 
(Work, Responsibility, Leisure).  When you complete a @minor task, award yourself 1 point.  Projects consisting of multiple tasks have an additional completion
bonus of 1 point for each task encompassed in the project itself (regardless of @major or @minor status) , but this is not earned until all tasks are completed.  
Should you let a task with a due date pass uncompleted, you lose 3 points if it was @major, or 1 point if it was @minor.

The notebook is to keep in your pocket at all times.  You use it to jot down notes and ideas.

Each day, your flow should be like this:

  - Skim through Recurring lists for applicible @daily, @weekly, etc. and do them
  - Skim through Long-Term Projects lists for something to work on, if you have the time.  Work first, then Responsibilies, then Leisure.
  - Transfer notes and ideas from your notebook to the outline
  - At the end of the day, write a short report consisting of completed tasks for the day, and change in Points values.  Feel free at this time to clear out "done" items.
  - Rescan and reprioritize/modifiy due-dates on tasks as necessary

Additionally, I'm going to try to do once a week consolidated reports on this blog, to give me a public platform.  Peer pressure is fantasitc, and I've always
wanted to get into journaling, but have never had the pressure or drive.

## Value of points
This needs work (as does the rest of the system, I'm sure), but points are good for two things: Time and Money.

When cashing points in for Time, each Work point is ~1 hour, and each Leisure and Responsibility point is ~30 minutes.

When cashing points in for Money, each Work point is $2, and each Leisure and Responsibility point is $1.

When you use points, deduct them from your outline totals.  Use common sense, though.  Time and Money are to be
used for things not in your task lists...  Time and Money spent in your task lists doesn't have to be accounted for.
Nor does sleep, or nightly entertainments (TV, video games, etc) -- those are beneficial.  Weekends are up to you
as to how you handle them.

## That's it, so far...
I'm going to get going with this starting next Monday, I think.  My first task will be inputting all my tasks... I think that's going to be a @major job.

Thanks for reading!</t>
<t tx="peckj.20140929120632.5241"></t>
<t tx="peckj.20140929120632.5242">@language md
---
date: 2013-09-30
tags: [ltd, productivity, reports]
title: LTD Week One

Alright, off to a good start.

This week has been pretty productive for me.  LTD might just work!  Well, with some adjustments.  Particularly the gamification bit.  Points are useless, so I'm probably going to ditch that bit as anything other than a weekly metric.

Anyways, here's a quick rundown of what I was able to accomplish last week, once LTD kicked me into gear:

  - Work:
    - A whole bunch of minor cleanup for outstanding jobs
    - Closed two long-standing tickets in my inbox
    - Worked on an upcoming (this week) apache upgrade
  - Responsiblity:
    - Got my oil changed (2 weeks late :()
    - Finished off a defensive driving course
    - Got LTD up and running (sans scripting)
  - Leisure:
    - Read (a lot... seriously, that never happens)
    - Updated some software on orison, my raspi
    - Worked on Mint Fudge
    - Worked on roguelike code
    - Started playing X: Beyond the Frontier
    
That's a lot more than I usually accomplish in a week, so it's nice seeing these reports and these early results.

Not that this particular post is interesting to anyone at all, but I promised myself I'd be writing these, so here I am.

Thanks for dealing with me :P</t>
<t tx="peckj.20140929120632.5243"></t>
<t tx="peckj.20140929120632.5244"></t>
<t tx="peckj.20140929120632.5245">@language md
---
date: 2013-10-07
tags: [decktet, game idea, game design, games, rules]
title: Decktet Game Idea

So, I had an idea for a game using the [Decktet](http://www.decktet.com/).  Seeing as most of the cards have multiple suits, the following might work.

The game would be a "tree-building" game, which much like [tableau builders](http://trollitc.com/tag/tableau-building/), would involve players taking turns building piles of cards.  The difference between a tableau builder and a tree-builder, is that the trees grow into multiple piles over time.

So, to start the game, take the extended Decktet, and take out the six Aces.  Shuffle those and place them face down in the center of the table.  These are your "root" cards.  Turn the top two over, and move them to spacious areas of the table.  These are the starter trees.

Shuffle the rest of the deck together, and deal 5 cards to each player to form the hand.

Gameplay is in turns, each turn a player either plays a card building on a tree, harvests a tree, or unroots a tree.  Regardless of what they do, they draw a card at the end of the turn.  There is no maximum hand size.

Playing a card on a tree involves playing a card which shares a suit and a higher rank than the card that you are playing on.  All cards aside from Crowns may be played off of, and all aside from Pawns and Courts may have two cards played off of them.  Pawns and Courts may have three cards played off of them.  For the purposes of this game, Pawns and Courts are considered of equal rank, and their rank lies between Ace and Two.   Crowns may not have any cards played off of them, and as such form ends of branches.

Harvesting a tree is how you score points.  A player scores points for the number of Crowns in a tree they harvest.  A tree with zero Crowns may not be harvested.  When they harvest a tree, they collect the Ace and place it in front of them, then return the rest of the cards to the discard pile.  When harvesting future trees, they gain bonus points if Crowns in those trees share suits with any aces they own.

If a player cannot play a card, nor can they harvest a tree, they *must* unroot a tree.  Additionally, unrooting cannot be a voluntary action.  Unrooting a tree involves shuffling that tree's Ace into the root pile, returning all other cards to the discard pile, and starting a new tree (see below).

Starting a new tree is done by shuffling the root pile and flipping the top card over to form a new root.  This is not an action and does not take a turn.  It is mandatory whenever there are less than two trees in play, and the root pile is not yet exhausted.

When a player must draw and there are no cards to draw, the discard pile is reshuffled to form a new draw pile.

The game is over when all six roots have been harvested.  The player with the most points wins.

I haven't played it yet, but it could be fun.  I'm sorry if the idea is clear as mud at the moment, but this is more of a ramble than a fully fleshed out ruleset.
</t>
<t tx="peckj.20140929120632.5246">@language md
---
date: 2013-10-07
tags: [ltd, productivity, reports]
title: LTD Week Two

So, here we are with week two of LTD.  The system is holding up nicely.  Here's what I did this week:

  - Work: finished up a small job dealing with a file transfer issue
  - Work: worked on another small file transfer job
  - Work: finished a major apache migration project
  - Work: pushed some configuration changes to an application
  - Work: did some research on bare-metal restores for our various server types
  - Leisure: finished reading "The Song"
  - Leisure: started writing a long-form poem... more on that later, perhaps
  - Leisure: wrote the [rss.py](http://leo-editor.readthedocs.org/en/latest/leo.plugins.html#module-leo.plugins.rss) plugin for Leo
  - Leisure: worked on Mint Fudge
  - Responsibility: minor errands
  - Responsibility: started a daily [Tabata](http://tabatatraining.org/) routine
  
Not bad.  I'm still working the kinks out of the system, but it's keeping me productive and on track for the most part.</t>
<t tx="peckj.20140929120632.5247">@language md
---
date: 2013-10-07
tags: [poetry, haiku, etheree, lune]
title: On Poetic Forms

Recently I've been thinking a lot about structured syllabic poetry, which is rank among my favorite media for expression.  I have written haiku, etc, before, but never did so with any strict adherence to the form.  I thought I'd do a quick comparison of the various forms I've come across that tickled my fancy, and perhaps include some examples.  It's an excuse to write a bit more...

Most of this post is informed by these two links:

  - [Poetic Forms: Haiku, Senryu, Tanka, and Lunes](http://lestersmith.com/2009/05/29/poetic-forms-haiku-senryu-tanka-and-lunes/)
  - [Next Up: Sijo](http://lestersmith.com/2009/06/30/next-up-soji/)

# Haiku

The most well known structured syllabic style, by far.  English Haiku are known for being three lines long, structured with five/seven/five syllables.  But that isn't a complete definition... no, haiku also need a seasonal word to ground them in nature, and a conceptual break after either the first or second line.  That second bit is much less known, but makes Haiku well formed -- a haiku is presented as two individual thoughts, around a common nature-tied theme.  Lets see if I can pull it off:

    rustling leaves flit
    passively down to wet soil;
    wind beckons my grin
    
# Senryu

Haiku which do not have a seasonal word but follow the other conventions of the haiku form are called senryu.  Here's a shot at one of those:

    "Be careful!" cried Shen,
    watching the boy run through cars,
    far too late to save.

# Tanka

An extended form of the senryu, the tanka is a syllabic poem split into lines of five/seven/five/seven/seven syllables.  The important idea is that the tanka encompasses a micro/macro structure, where each line has its own concept that builds within the larger piece as a whole.  Might as well give it a whack:

    I am gunslinger,
    terror of the dusty plains,
    my weapon is law
    ushered in with red hot lead.
    Under the sun, I am truth.
    
# Lune

A lune is a shortened version of a haiku, such that the three lines have five/three/five syllables.  Very short, very succinct.  Let's give it a go:

    somehow I got here,
    the coming
    remains confounding
    
# Sijo

Sijo is a Korean form of poetry that is somewhat like a more complex and longer form of senryu.  Sijo poems are three lines long, with each line serving a distinct purpose:  line one introduces a theme, line two develops the theme presented in line one, and line three provides a twist on the theme, and then resolves it within the context of the rest of the poem.  Each of these lines is
between fourteen and sixteen syllables, broken into smaller phrases of between three to five syllables each, lending the full poem fourty-four to fourty-six syllables to work with.  Sijo offer much more room to work with, so they are seen as more flexible than haiku or senryu.  I just discovered this form today, so here's an attempt at it that will probably leave a lot to be desired:

    Cool calculation, the machine rumbles doing its thing.
    Crunching numbers for a grand purpose among the chaos, 
    but wait! A bug shows, slowing us down to observe the code and fix.

# Etheree

Etheree poems are composed of ten lines, each with one more syllable than the last, with the first line starting with one syllable.  They're fun to write, and really give you something to think about with your syllable budget.  Variations on the etheree are the reversed form, where you start with ten syllables and work your way down to one, the double etheree, where you start with one, work up to ten, and then work back down to one, and the triple, quadruple, etc. etheree which just build on that theme.  Here's a standard, one-to-ten etheree I wrote a few weeks ago:

    You
    were small
    yet potent
    back when we, in
    no uncertain terms,
    believed that dragons breathed
    fire and ice; dancing warmth
    over our well-worn sheets, blankets
    and pillows aligned in perfect walls
    to keep the world tucked away from our hearts.
    
# Why do all of this?

Poetry is fun, and a great way to unravel the mind.  We all need a break, and poetry reminds us of that.  It is a deeply human experience, and one that I feel everyone should give a passing try at.
    </t>
<t tx="peckj.20140929120632.5248"></t>
<t tx="peckj.20140929120632.5249">@language md
---
date: 2013-10-15
tags: [decktet, game idea, game design, games, rules]
title: Decktet Game Idea Revised

What follows is a revision of the Decktet Game Idea I posted [last week](http://blog.suspended-chord.info/2013/10/07/decktet-game-idea/), after a playtest showed some flaws with the original idea.  Changes are in **boldface**.

So, I had an idea for a game using the [Decktet](http://www.decktet.com/).  Seeing as most of the cards have multiple suits, the following might work.

The game would be a "tree-building" game, which much like [tableau builders](http://trollitc.com/tag/tableau-building/), would involve players taking turns building piles of cards.  The difference between a tableau builder and a tree-builder, is that the trees grow into multiple piles over time.

So, to start the game, take the extended Decktet, and take out the six Aces.  Shuffle those and place them face down in the center of the table.  These are your "root" cards.  Turn the top two over, and move them to spacious areas of the table.  These are the starter trees.

Shuffle the rest of the deck together, and deal 5 cards to each player to form the hand.

Gameplay is in turns, each turn a player either draws a **card from the draw pile,** plays a card building on a tree, harvests a tree, or unroots a tree.  Regardless of what they do, they draw **an additional** card at the end of the turn.  There is no maximum hand size.

**Drawing a card eats up your action for your turn.  However, since you draw a card at the end of each turn, you effectively draw two cards this turn.**

Playing a card on a tree involves playing a card which shares a suit and a higher rank than the card that you are playing on.  All cards aside from Crowns may be played off of, and all aside from Pawns and Courts may have two cards played off of them.  Pawns and Courts may have three cards played off of them.  For the purposes of this game, Pawns and Courts are of **any rank, even half ranks, such that they may be played in between two cards of any rank that they share a suit with**.   Crowns may not have any cards played off of them, and as such form ends of branches.  **The Excuse counts as any rank of a single suit, chosen by the player who played it.**

Harvesting a tree is how you score points.  A player scores points for the number of Crowns in a tree they harvest.  A tree with zero Crowns may not be harvested.  When they harvest a tree, they collect the Ace and place it in front of them, then return the rest of the cards to the discard pile.  When harvesting future trees, they gain bonus points if Crowns in those trees share suits with any aces they own.  **To harvest a tree, that player must discard at least one of each suit from their hand that matches the crowns in the tree.  Alternative scoring:  Players score points for the longest branch in the tree, and additional points for crowns matching their owned aces.**

If a player cannot play a card, nor can they harvest a tree, they *must* unroot a tree.  Additionally, unrooting cannot be a voluntary action.  Unrooting a tree involves shuffling that tree's Ace into the root pile, returning all other cards to the discard pile, and starting a new tree (see below).

Starting a new tree is done by shuffling the root pile and flipping the top card over to form a new root.  This is not an action and does not take a turn.  It is mandatory whenever there are less than two trees in play, and the root pile is not yet exhausted.

When a player must draw and there are no cards to draw, the discard pile is reshuffled to form a new draw pile.

The game is over when all six roots have been harvested.  The player with the most points wins.</t>
<t tx="peckj.20140929120632.5250">@language md
---
date: 2013-10-15
tags: [ltd, productivity, reports]
title: LTD Week Three

Here's what I accomplished this past week:

  - Work: added a new disk to a server for backup space
  - Work: fixed a failed FTP job
  - Work: general maintainence
  - Responsibility: maintained my Tabata routine (man, that works well!)
  - Responsibility: bookkeeping
  - Responsibility: dug through some paperwork on the Affordable Care Act
  - Leisure: Prototyped a new type of Fudge die
  - Leisure: Updated my raspberry pi's software
  - Leisure: Scripted a "mark-task-done" button in Leo for LTD (difficult!)
  - Leisure: Did some minor updates to the rss.py Leo plugin
  - Leisure: Worked on a fantasy RPG campaign

A decent week, but room for improvement.</t>
<t tx="peckj.20140929120632.5251"></t>
<t tx="peckj.20140929120632.5252">@language md
---
date: 2013-10-21
tags: [ltd, productivity, reports]
title: LTD Week Four

Here's what I accomplished in my fourth week of using LTD:

  - Work: *several* disk issues resolved
  - Work: updated packages on our only Linux server
  - Work: some DNS work
  - Work: finished off an old issue involving cramped backup space
  - Work: implemented a new backup script for one of our databases
  - Work: a few manual FTP jobs
  - Work: created a new user account on one of our servers
  - Work: worked on some blackboard issues
  - Work: attempted to reorganize the innards of a server due to overheating -- failed due to short STAT cables
  - Work: filed request for networking stuff for new blackboard server install
  - Responsibility: continued Tabata routine
  - Leisure: wrote blog article on decktet game idea revised
  - Leisure: added some games to Steam
  - Leisure: updated orison's software
  - Leisure: performed the great gist purge of 2013 -- merged related gists and deleted old ones -- went from 120 to 23 or so
  - Leisure: purchased For The Crown and expansions with VPG's 15% discount...
  - Leisure: installed Market Helper on my tablet
  - Leisure: Read issues 1-3 of The Manor by Tim Shorts (GM Games)
  - Leisure: Read "The Devil in Iron" by R.E. Howard
  
That's a lot.  Man, I was busy this week.</t>
<t tx="peckj.20140929120632.5253">@language md
---
date: 2013-10-21
tags: [rpg, games, fiction, s&amp;s]
title: Modifying RPG Adventures for a Sword and Sorcery Feel

So I'm soon going to be running a campaign in my [Sword &amp; Sorcery](http://en.wikipedia.org/wiki/Sword_and_sorcery) world of Mur, and I've decided that I want to sprinkle in some pre-written adventures to make my life easier.  One small problem with that -- it's difficult to find adventures that 'fit' the feel of Mur or the fiction I'm trying to emulate.  But I'm going through them anyways, modifying them a bit to fit, and I thought I'd share a bit of my process.

First up, a small primer on Mur.  Mur is a world where the gods are real, but they rather dislike humans -- they're seen as playthings.  Mur is a world without the standard fantasy races, just humans populate the known lands.  It's a world where magic is dark, powerful, and abhorrent to nature, and whose practicioners pay the ultimate price: their very souls.  It's also a world teeming with ruins, ancient evils, and vast hordes of treasure in long forgotten buried cities.  It is, in a nutshell, a barbarian's wonderland.

So, the first problem with a lot of pre-written fantasy adventures is the inclusion of non-human characters.  That's problematic, but not terribly so -- Mur has a rich history and several powerful civilizations, each with their own national identities and strengths.  Substitute westlanders for gnomes, midlanders for elves, etc, and problem solved.

The next major problem is magic.  By GM fiat, I am disallowing any of the PCs from using magic, at least to begin with.  Additionally, the traditional spell system doesn't fit the milleu I'm aiming at, so magic in this campaign will be handled mostly through narrative, with long, elaborate, and evil rituals taking the place of the fire-and-forget style of magic in high fantasy.  As magic draws its power from Mur itself, and the energies of the gods, narrative black magic makes sense -- it's unique, twisted, and unpredictable, and I sincerely doubt I could convey the same sense of the unknown with tables, charts, and spellslots.  Additionally, it's reserved for the most evil of evils, not your everyday Joe Schmoe who had a semester at the academy and uses his fireball to help in the kitchen.  Magic demands extreme sacrifice that the ordinary man just cannot deign to afford.  As a result of this, most magic-using NPCs are simply stripped of their magic abilities, or given a subtle mutation instead... they were at one point too close to some magical corruption.

Next up is a big one -- standard monsters.  Monsters in Mur can be vaguely broken down into two categories: the wild and the weird.  Wild monsters are your usual creatures: lions, tigers, bears (oh my!), massive serpents, etc.  The weird monsters are what fills the niche of greenskins, kobolds, etc. in high fantasy.  In Mur, weird monsters are fairly unique -- adventurers will rarely come across the same thing twice... and if they do, it means their creator is back for a second round!  Weird creatures are brought into being by all sorts of nasty tricks, mostly involving sorcery, but sometimes as a jest of the gods.  They include all manner of nasties, like shadow creatures, iron giants, purple worms, ape-men, etc.  The trick here is to find the BBEG of the adventure, work on them first (see above Races and Magic points), and then extrapolate their themed creatures.  A necromancer will obviously have all manner of undead as their minions.  An undying, but fragile soul who encased himself in magical armor would likely have similarly armored pets.  But the key here is to not devolve into a slaughterfest of the weird -- sprinkle them in just enough to keep the players on their toes, but not enough to make their impact diminish.

Lastly, when s&amp;s-ifying an adventure module, one has to account for the scale of the adventure.  Most adventures as is rely on the PCs being either good people and willing to do things for their noblemen, or trying to help a poor hamlet somewhere afflicted by a strange malady.  This simply would not be enough to tempt a s&amp;s hero to action... no, they need gold, lotuses, and silks!  The finer things in life... they work for themselves, any good that comes out of it is purely coincidental.  To fix this, make the BBEG protect something extremely valuable, or give the village a semi-forgotten stash of finery and their collective life savings as an offer to sweeten the pot.  Or have them enslaved and force them to work for their freedom.  Additionally, make the BBEG larger than life... the PCs should feel like they truly accomplished something at the end of it all.  Lastly, make sure to take at least half of their earnings away between adventures, due to overzealous revelry upon returning to civilization.  Actually, there's a handy [generator for that](http://www.swordsmen-and-sorcerers.com/wp-content/uploads/2013/01/Drunken-Debauchery.pdf).

Thanks for sticking around to read my rambles.  Now, off to work on more adventures!</t>
<t tx="peckj.20140929120632.5254"></t>
<t tx="peckj.20140929120632.5255">@language md
---
date: 2013-10-28
tags: [ltd, productivity, reports]
title: LTD Week Five

This week was productive, I think.  Here's what I accomplished:

  - Work: committed a few DNS changes
  - Work: solved a mailing list administration issue
  - Work: removed some old LUNs from a server
  - Work: created a few user accounts
  - Work: general disk resizing stuff
  - Work: monitoring system fixes
  - Responsibility: maintained my tabata routine
  - Responsibility: reconciled my checkbook
  - Responsibility: did months of backlogged paper filing
  - Leisure: updated orison's software
  - Leisure: wrote a wikipedia plugin for [applesaucebot](https://github.com/gatesphere/applesaucebot)
  - Leisure: tweaked my LTD scripting in Leo
  - Leisure: added [c.createNodeHierarchy](http://leo-editor.readthedocs.org/en/latest/leo.core.html#leo.core.leoCommands.Commands.createNodeHierarchy) and [p.createNodeHierarchy](http://leo-editor.readthedocs.org/en/latest/leo.core.html#leo.core.leoNodes.position.createNodeHierarchy) to the Leo API
  - Leisure: wrote a quick 3d8 die-pool tree-skill RPG system
  - Leisure: Leoified the source files to my website
  - Leisure: reorganized a few bits on my website
  - Leisure: did some worldbuilding in Mur
  - Leisure: read [AFS Magazine Issue #1](http://hallsoftizunthane.blogspot.com/)

On top of that, I attended a wedding, and also celebrated 4 years with my girlfriend.  Phew!</t>
<t tx="peckj.20140929120632.5256">@language md
---
date: 2013-10-28
tags: [python, programming languages, stupid tricks, code-dump]
title: Passing a comparison operator in Python

So, earlier today I was refactoring some code to be more general purpose, and said code
involved a comparison operator.  I was already using the same code in two places, but copy-pasted
with different comparison operators switched in.  Eww.

I didn't quite know how to pull this off, given that I'm not that well versed on Python's introspection
faculties... but I gave it a whack.  My first thought was the nïave approach, of passing in a string
to specify mode...

&lt;script src="https://gist.github.com/gatesphere/7201086.js?file=approach_1.py"&gt;&lt;/script&gt;

Yuck.

Then I realized that functions are pretty much first class in python.  Additionally, lambdas are short
and sweet.  A few minutes later, I was rolling with this instead:

&lt;script src="https://gist.github.com/gatesphere/7201086.js?file=approach_2.py"&gt;&lt;/script&gt;

So much nicer.  Instead of passing a mode string, now you just pass one of those comparators, ala:

    myfun(4,7,comparator=cmp_lt)

**Update**: A friend pointed out a few other ways of accomplishing this -- one way more pythonic, and one incredibly unsafe.

The pythonic solution relies on the 'operator' module:

&lt;script src="https://gist.github.com/gatesphere/7201086.js?file=approach_3.py"&gt;&lt;/script&gt;

That's much like approach 3, but the call is now:

    myfun(4,7,comparator=operator.lt)

The unsafe way is to evaluate it as a string!  Here we go:

&lt;script src="https://gist.github.com/gatesphere/7201086.js?file=approach_4.py"&gt;&lt;/script&gt;

Man, I love Python.  We're not starved for options!


    
Hope this helps someone else!</t>
<t tx="peckj.20140929120632.5257"></t>
<t tx="peckj.20140929120632.5258"></t>
<t tx="peckj.20140929120632.5259">@language md
---
date: 2013-11-04
tags: [ltd, productivity, reports]
title: LTD Week Six

Good week.  Here's a recap:

  - Work
    - Helped with an Oracle issue
    - Created a few directories for people
    - Installed a new server in the rack
    - Moved a server to our DR location
    - Got the new server cabled and running
    - Patched the new server
    - Had my annual health assessment and flu shot
    - Re-registered my parking... (grr)
  - Responsibility
    - Continued tabata routine
    - The usual backups and such
  - Leisure
    - Refactored my LTD scripts (multiple times)
    - Created the nodewatch.py plugin for Leo (obsoleting the above scripts...)
    - Prepped "For The Crown" for playing
    - Played "For The Crown"
    - Worked on Mint Fudge a teeny tiny bit
    - Wrote a neat quick GM-less RPG system
    - Read AFS Magazine #2
    - Updated orison</t>
<t tx="peckj.20140929120632.5260">@language md
---
date: 2013-11-04
tags: [leo, nodewatch, plugin, ltd, productivity, code-dump]
title: Nodewatch for Productivity

Recently, I contributed the nodewatch.py plugin to Leo.  I wrote this as a way to keep myself productive, and have an at-a-glimpse look at important nodes in my workbook.leo file.  I thought I'd share the `@nodewatch` definitions I hacked together to help with this.

Some important notes:

  1. The snippets below are on gist, which does not to my knowledge allow syntax highlighting without a file suffix.  Ignore the .py in the filenames -- those are node headlines.
  2. These definitons require Terry Brown's todo.py plugin to be enabled, else they will throw exceptions and not work.
  3. These definitions use python-dateutil's relativedelta to make my life easier.  You'll need to `pip install python-dateutil` to get these scripts to work.

Some preliminaries first.  All four of the @nodewatch definitions I have below use the same `&lt;&lt; imports &gt;&gt;` and `get_tasks_by_date` nodes as children.  I used clones for this, to keep them all in sync.  Here's `&lt;&lt; imports &gt;&gt;`:

&lt;script src="https://gist.github.com/gatesphere/7306696.js?file=&lt;&lt;+imports+&gt;&gt;.py"&gt;&lt;/script&gt;

And here's `get_tasks_by_date`:

&lt;script src="https://gist.github.com/gatesphere/7306696.js?file=get_tasks_by_date.py"&gt;&lt;/script&gt;

Alright... now, get_tasks_by_date() returns a list of vnodes that are not marked 'done' by todo.py, but have a duedate or nextworkdate such that comparator(date,otherdate) is True.  That does *all* the hard work.  Next up is 4 very similar @nodewatch definitions:

&lt;script src="https://gist.github.com/gatesphere/7306696.js?file=%40nodewatch+Past+Due.py"&gt;&lt;/script&gt;

&lt;script src="https://gist.github.com/gatesphere/7306696.js?file=%40nodewatch+Due+Today.py"&gt;&lt;/script&gt;

&lt;script src="https://gist.github.com/gatesphere/7306696.js?file=%40nodewatch+Due+Tomorrow.py"&gt;&lt;/script&gt;

&lt;script src="https://gist.github.com/gatesphere/7306696.js?file=%40nodewatch+Due+This+Week.py"&gt;&lt;/script&gt;

Putting this all together under your `@settings` node, and clicking the Refresh button (or running the command `nodewatch-update`), you now have 4 categories in your Nodewatch GUI's drop-down box: 'LTD: 00 Past Due', 'LTD: 01 Due Today', 'LTD: 02 Due Tomorrow', and 'LTD: 03 Due This Week'.  This will help you get fast looks at what you need to focus on today, tomorrow, and this week.

Unfortunately, the `get_tasks_by_date` code is a bit ugly and really dense, and it required a read through of the todo.py source, and understanding of the operator module... but it packs a lot of filtering power into those lines, making other due-date sorting @nodewatch definitions easier in the future.  For example, you could define a `@nodewatch Due This Month` script with:

&lt;script src="https://gist.github.com/gatesphere/7306696.js?file=%40nodewatch+Due+This+Month.py"&gt;&lt;/script&gt;

Plenty of other things can be done with nodewatch, but this is my primary usage so far.</t>
<t tx="peckj.20140929120632.5261"></t>
<t tx="peckj.20140929120632.5262">@language md
---
date: 2013-11-12
tags: [programming language design, theory, jedi]
title: Jedi Reimagined

The past few weeks I've been thinking more about the dataflow paradigm, and how I would approach it after the lessons learned from jedi.  In my mind, I'd like to have the following features in any dataflow language I'd design or use:

  - Object orientation, on some level
  - Lambdas, for syntactic sugar
  - Hackable internal framework (i.e. metaprogrammability)

To elaborate a bit more, let's focus on each of these one at a time.

# Object orientation

An object at it's absolute core is simply a map, or a dictionary, or an associative array, whatever your language of choice calls them.  They are containers that accept names and return other objects based on the names passed to them.  Io calls the names 'slots', and I find that to be very fitting.

I'd most likely go with a prototype paradigm, akin to Io, rather than a class-based design, simply because I love the flexibility offered by prototypes.  As a result, the whole language would extend from a single Metaobject, and would use duck typing.  Perhaps a performance penalty, but I'm more interested in expressability and flexibility than type-safety.

Additionally, I'd like some sort of data-munging/mixin capability akin to [http://perl11.org/potion/](Potion)'s concept of the trait.  This would reduce the load on the duck-typing system.  As syntactic sugar, there would be a 'origtype' keyword that would de-munge a type after the last trait mixin, if needed.  This would rarely be used, though, I think.

There would be special named slots for each object.  These would be 'magic slots', akin to Python's 'magic methods'.  I'm sure more would pop up in implementation, but the only one I can think of now is:

   - current_node (the 'node' type object that is currently processing this object)

There would, aside from the Metaobject, be at least three other fundamental object types (all descending from Metaobject, of course):

  - lambda (a wrapper object that provides syntactic sugar around simple methods)
  - arc (an object with 'many ends', [de]muxer, splitting and copying objects to send from it's in_nodes to it's out_nodes)
  - node (an object with 'many holes', it connects lambdas with arcs, and lambdas act on objects.  It has in_arcs and out_arcs)

# Lambdas

Covered by the 'lambda' object above.

Imagine you had an accumulator object that could increment some internal count.  Now, imagine you wanted a node to perform this twice.  The body of the node would be contained in a lambda.  The following pseudo-code (inspired by Potion) would do the trick:

&lt;pre&gt;
# Create the Accumulator object
Accumulator = Metaobject ():
  .value = 0
  accumulate:: lambda (self) (self .value += 1)

# Create an instance of the accumulator
a = Accumulator ()

# create a node that operates on its input 
# by calling accumulate slot twice
n = Node (lambda (x) (2 times (x accumulate ())))

# some other code here to set up and run the node
&lt;/pre&gt;

# Metaprogramming

Being a prototype language, all bits and bob about the node, arc, lambda, and Metaobject definitions are hackable just by extending them!

Just some thoughts... I doubt it will ever happen, but this is where I'd like to see a workable Jedi system go.</t>
<t tx="peckj.20140929120632.5263">@language md
---
date: 2013-11-12
tags: [ltd, productivity, reports]
title: LTD Week Seven

Busy week.  Here's a recap:

  - Work
    - Made sure the DST time change didn't affect any machines/backup jobs
    - Created some DNS entries
    - Did some benchmarking on our new T5-2 hardware
    - Dealt with some disk issues
    - Fixed a few FTP jobs
    - Got our T5-2 on the SAN
    - Stayed up until 12:13 am patching blackboard... (*grumble grumble*)
    - Integrated our T5-2 into our backup and monitoring systems
    - Tweaked thresholds on a few monitoring jobs
  - Responsibility
    - Dropped the ball big-time on my Tabata routine...  I *will* fix this!
    - Set up a new laptop for my girlfriend, after her old one gave up the ghost
  - Leisure
    - Fixed a few bugs in nodewatch.py
    - Documented nodewatch.py
    - Fixed a small bug in stickynotes.py
    - Worked a bit on Mur worldbuilding
    - Wrote a Kahl adventure
    - Fixed a typo on my website
    - Read AFS Magazine #3
    - Read Crawl! Magazine #1
    - Read Crawl! Magazine #2
    - Designed 'Colonia', an abstract strategy game that I need to playtest
    - Made a set of randomizers for VPG's For The Crown
    - Updated orison's software</t>
<t tx="peckj.20140929120632.5264"></t>
<t tx="peckj.20140929120632.5265">@language md
---
date: 2013-11-18
tags: [tag, your, life, away]
title: Leo Things Done Revised

# Introduction

This is a rewrite of my earlier article [Leo Things Done](/2013/09/20/leo-things-done/),
explaining my LTD productivity system as it stands currently.  It is much simplified
from the original version, and now is pretty much just Leo, a few plugins, and
a few scripts.

# The system
LTD is a combination of parts of ZTD and GTD, and it uses Leo to maintain itself.

## What you need
  - A computer with Leo
  - Willpower

## Setting up Leo
The core of this system is Leo.  You'll need the following plugins enabled:
  
  - mod_scripting.py
  - todo.py
  - nodewatch.py
  - contextmenu.py
  
Additionally, you'll need at least the following python module installed:

  - python-dateutil

A .leo outline with the following LTD chapters should be kept:

  - Recurring (for daily, weekly, monthly, etc. tasks)
  - Long-term Projects
  - Notes
  - Ideas
  - Reports
  
I also have a few other chapters, as I run LTD from my workbook.leo file:

  - RSS Feeds (for rss.py plugin)
  - Web Bookmarks

Within each of those LTD chapters, create the following 3 nodes:

  - Work
  - Responsibility
  - Leisure

Within the 'main' chapter, create an '@settings' node.  This will store various LTD-centric
settings, buttons, and scripts.  The scripts themselves are in the ltd-barebones.leo file, 
[up on Github](https://github.com/gatesphere/ltd-barebones).

## Using the system
Use the Notes chapter to scribble down notes that are related to tasks.  You can clone from notes to a child of a task if you wish, to keep
yourself organized.

Use the Ideas chapter to scribble down ideas that are unrelated to current tasks.  Ideas are always good to keep in mind, because in the
future they may be promoted to tasks, once you have the time to approach them, or the desire to do something new.

Use the Recurring chapter for daily, weekly, monthly, etc tasks.  Tasks need a task-type directive (one of '@work', '@responsibility', or '@leisure') in their bodies.
Additionally, recurring tasks need a valid recurrance, one of '@daily', '@daily-weekdays', '@weekly', '@biweekly', '@monthly', '@bimonthly', '@quarterly', '@triannually', '@semianually', '@anually', '@yearly' (a synonym for @anually).  These two directives are used by the LTD scripts, and are very important.  Lastly, using the todo.py Task
tab, set a due date, next-work date, or both.  The scripts will take care of re-setting the dates for you when you complete a recurring task. 

Use the Long-term Projects chapter to keep yourself on track with the long term projects you're working on. Be sure to include a tasktype.  A due-date/next-work-date is not necessary, but supported.

Each day, your flow should be like this:

  - Skim through your Nodewatch 'LTD: 00 Past Due' list and do them -- you've slacked off!
  - Skim through your Nodewatch 'LTD: 01 Due Today' list and do them.
  - If you have time, skim through your Nodewatch 'LTD: 02 Due Tomorrow' or 'LTD: 03 Due This Week' nodes to prepare yourself.
  
When you complete a task, right click on the headline and select 'Mark task done'.  This does a few non-trivial actions for you:

  - Sends a copy of the node to your Reports chapter, under the correct date and category, marking it 'done'.
  - If the task recurrs, it sets the next work date according to the recurrence directive.

Additionally, once a week, write a summarized bullet point list of what you did.  I'm doing mine publicly on this blog.  LTD provides a script for this, too: select a week node in your Reports chapter, and right click on the ltd button, selecting 'generate-week-report'.  You'll now have a nice categorized report for your use of your week's activities.

Thanks for reading!</t>
<t tx="peckj.20140929120632.5266">@language md
---
date: 2013-11-18
tags: [ltd, productivity, reports]
title: LTD Week Eight

Another decently busy week:

  - Work
    - Created some unix users
    - Worked with some vendors on some file transfer jobs
    - Worked on getting a PHP module installed for our website
    - Worked a bit on our new t5-2 hardward w/r/t disk multipathing
  - Responsibility
    - Did my Tabata every day (yeah! back on track!)
    - Got my driver-side mirror fixed (it had a crack -- ice damage)
  - Leisure
    - Read MicroFudge
    - Read ERP ('Elegant Role Playing')
    - Fixed a 'huge font' issue in Leo
    - Patched Leo to make @rclick nodes create commands like @command and @button nodes
    - Refactored my @nodewatch definitions for LTD into a single script (keep it DRY)
    - Scripted an @rclick to create weekly reports for LTD progress
    - Worked on Kahl a bit
    - Read Crawl! #3
    - Removed ceekrt from my site... it's about time
    - Updated orison's software

Later on today, I intend to do an updated version of my original LTD article, explaining how it works now, and sharing my scripts at the moment.</t>
<t tx="peckj.20140929120632.5267"></t>
<t tx="peckj.20140929120632.5268">@language md
---
date: 2013-11-25
tags: [ltd, productivity, reports]
title: LTD Week Nine

Very busy week, work-wise.  Not much outside of work though...

  - Work
    - Got our new t5-2 hardware talking to the storage array
    - Scripted a few ftp jobs
    - Added a server to our monitoring system
    - Set up an install server for Solaris 10 01/13 SPARC
    - Added some new LUNs to several machines
    - Prepped for OS upgrades...
  - Responsibility
    - Maintained my tabata routine
  - Leisure
    - Fixed a minor DDOS attack (from Google's address space?!?) on my servers... wtf?
    - Read Crawl! #4
    - Read Crawl! #5
    - Rewrote the Mint Fudge sketchy-sketch
    - Updated orison's software

Doesn't look like much, but it was a lot of time consuming BS.  Also lots of planning.

    
</t>
<t tx="peckj.20140929120632.5269"></t>
<t tx="peckj.20140929120632.5270">@language md
---
date: 2013-11-26
tags: [acme, ui, ux, editors]
title: Exploring Acme

For this post, I want to try a little something different.  I'd like to examine the text editor [Acme](http://en.wikipedia.org/wiki/Acme_(text_editor\)) from [Plan 9 from Bell Labs](http://en.wikipedia.org/wiki/Plan_9_from_Bell_Labs) and [Inferno](http://en.wikipedia.org/wiki/Inferno_(operating_system\)).  I think Acme represents a fundamentally different way of interacting with a system than what the vast majority of users use today -- and one I wouldn't have even been inclined to give a shot if I hadn't already been mired in Leo's UI.

# What is Acme
Acme is one of the default text editors for the Plan 9 OS.  Plan 9 in itself is fascinating, and a real study on 'the future, yesterday' in OS design... but that's another topic altogether.

Acme is a mouse-heavy design, which has been optimized for developers, or at least that's what its author claims.  I find this approach of mouse-dependence to be refreshing in an increasingly keyboard-is-king UI world.  Acme actually *requires* a three button mouse... but it fully uses those three buttons to their fullest extent.

Acme also presents what I'm going to call a 'fluid UI'.  Everything in Acme is text, and editable text at that.  Gone are notions of tabs, widgets, controls, and other traditional UI trappings -- text is king.  And it works surprisingly well.

# Mouse functions
As mentioned above, Acme requires three mouse buttons to use.  This is due to each of these being assigned a specific action:

  - Left: move cursor (click), select (drag)
  - Middle: execute (click), select+execute (drag)
  - Right: get (click), select+get (drag)

The left mouse button operates as expected, moving the cursor around the screen and selecting text.  The other two are where it gets interesting.

The right mouse button performs a command called 'get'.  This is a combination of things, depending on what you're 'getting':
  
  - Scope: if nothing is highlighted, it's the nearest 'chunk' to the mouse pointer.  If something is highlighted and that is right-clicked on, the whole hightlighted item is what 'get' looks for.
  - Types: 
    - First, 'get' looks for the item as a file or directory.  If the item is a directory, 'get' dumps the contents of the dir into a new window.  If the item is a file, the contents of the file are dumped into a new window.  If the filename has a :linenumber, the cursor is automatically moved to that line.
    - Next, it checks if it's a manpage definition, i.e. 'cat(1)'.  If so, it loads the manpage in a new window.
    - Next, it checks if it's a URI, and if so dumps the contents of that into a new window.
    - Finally, if it's none of the above, it performs a wrap-around, case-sensitive search for the chunk in the current window.

Handy!

Middle mouse acts similar:

  - Scope: identical to 'get'
  - Types:
    - Shell command, like 'ls -l'.  Executes the selected code and dumps the result into a new window.
    - Acme command, which do various things:
      - 'Cut': as expected
      - 'Del': deletes the current window
      - 'Delcol': deletes the current column and all it's windows
      - 'Dump': saves the state of acme to a dumpfile
      - 'Edit': executes a [Sam](http://en.wikipedia.org/wiki/Sam_(text_editor\)) command in the current window
      - 'Exit': as expected
      - 'Get': load file
      - 'Load': load dumpfile created by 'Dump'
      - 'Look': see right-mouse 'get'
      - 'New': make a new window
      - 'Newcol': make a new column
      - 'Paste': as expected
      - 'Put': write a window to a file
      - 'Redo': as expected
      - 'Snarf': called copy in most other editors
      - 'Undo': as expected
      - 'Zerox': make a copy of the window with the selected text

It's important to note that as Acme provides a completely fluid interface, all of these are simply typed in and then middle-clicked.  No buttons!  The interface stays out of your way until you explicitly *tell* it to exist.

# Mouse chording
The last neat thing that Acme does to squeeze every ounce of utility out of the mouse is mouse-chording, or binding commands to combinations of mouse clicks.

Select some text with the left button, and while still holding left, middle click is a 'cut'.  Right click with left held down is a 'paste'.  Left held down, followed by middle then right click is a 'snarf'.

Double clicking left mouse allows for quick text selection.  Beginnings of lines when double clicked select the whole line.

Fun stuff.  I highly suggest giving it a whirl.  :)
  

  </t>
<t tx="peckj.20140929120632.5271"></t>
<t tx="peckj.20140929120632.5272"></t>
<t tx="peckj.20140929120632.5273">@language md
---
date: 2013-12-02
tags: [model, python, code-dump, segregation, complexity, schelling]
title: A Simplified Schelling Model

I coded up a simplified version of the [Schelling segregation model](http://en.wikipedia.org/wiki/Thomas_Schelling#Models_of_segregation) today.  I thought I'd share the code below.

&lt;script src="https://gist.github.com/gatesphere/7757287.js"&gt;&lt;/script&gt;

Here's some output (with `numcells` above changed to `40`):

&lt;pre&gt;
+.++++++ .+.+.....++.++....++...++....+..+.. ++.++
+.++++++ .+.+.....++.++....++...++....+..+.. ++.++
+.++++++ .+.+.....++.++....++...++....+..+.. ++.++
+.+++++++.+.+.....++.+ ....++...++....+..+.. ++.++
+.+++++++.+.+.....++.+ ....++...++....+..+.. ++.++
+.+++++++.+.+.....++.+ ....++...++....+..+.. ++.++
+.+++++++.+.+.....++.+ ....++...++....+..+.. ++.++
+.+++++++.+.+.....++.+ ....++...++....+..+.. ++.++
+.+++++++.+.+.....++.+ ....++...++....+..+. .++.++
+.+++++++.+.+.....++.+ ....++...++....+..+. .++.++
&lt;...snip...&gt;
+++++++++++++......++++....+ ... +............++++
+++++++++++++......++++....+ ... +............++++
+++++++++++++......++++....+ ... +............++++
+++++++++++++......++++....+ ... +............++++
Done
&lt;/pre&gt;

Pretty neat -- it works!  I love complexity.</t>
<t tx="peckj.20140929120632.5274">@language md
---
date: 2013-12-02
tags: [ltd, productivity, reports]
title: LTD Week Ten

Less than average productivity this week, but that's to be expected with the US Holidays.  Here's a recap:

  - Work
    - Performed OS upgrades and patches on some blackboard servers
    - Installed a PHP module on our webserver
    - Did a few DNS entries
    - Installed an emergency patch on blackboard right before Thanksgiving...
  - Responsibility
    - Looked at a new apartment (!)
    - Maintained my Tabata routine half-heartedly (meh... I'm getting bad about this.)
  - Leisure
    - Read The Manor #5
    - Read Crawl! #6
    - Read Crawl! #7
    - Fixed a few small Leo bugs (one related to quicksearch.py's theming, and one related to nodewatch.py's focusing behavior)
    - Updated orison's software
    - Played a crapton of Smite
    - Spent too much money online

Whoo!  Back to the grind.</t>
<t tx="peckj.20140929120632.5275"></t>
<t tx="peckj.20140929120632.5276">@language md
---
date: 2013-12-09
tags: [ltd, productivity, reports]
title: LTD Week Eleven

Busyish week.  Here we go:

  - Work
    - Migrated 4 out of 6 servers to the new hardware (whoo!)
    - Removed a few stale LUN paths on old machines
    - Figured out a confusing issue where a script was writing to "/dev/null 2&gt;&amp;1" as a file, rather than /dev/null
    - Accidentally rebooted a machine that needed a reboot since April (oops!)
    - Sent out a file that an FTP job missed
    - Began prepping the last 2 servers for migration to the new hardware
  - Responsibilities
    - Fixed a small typo on the blog
    - Examined som insurance info
    - Went to see an apartment
    - Continued my Tabata routine
  - Leisure
    - Read Wizards Mutants Laser Pistols #1
    - Updated orison's software
    - Wrote a Schelling model example (on this blog)
    - Did a lot of thinking about Mint Fudge and related projects</t>
<t tx="peckj.20140929120632.5277">@language md
---
date: 2013-12-09
tags: [python, garbage collector, gc, algorithms, code-dump]
title: Mark and Sweep in Python

Today I read a fantastic article on [mark and sweep garbage collectors](http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/), and thought I'd give replicating it in python a go.

I highly recommed reading the linked article -- it's a fascinatingly brief and simple look into one of the most misunderstood concepts in computer science.  And it's drop dead simple.

My [python version](https://gist.github.com/gatesphere/7878676) is all but useless, *unless* one plans on implementing a language in python!  Which I do, in the form of silica2.    Hmm.</t>
<t tx="peckj.20140929120632.5278"></t>
<t tx="peckj.20140929120632.5279">@language md
---
date: 2013-12-16
tags: [ltd, productivity, reports]
title: LTD Week Twelve

Not sure what kind of week it was... here's an overview though:

  - Work
    - Worked on a few FTP jobs
    - Made some accounts for one of our servers
    - Continued preparation for server migrations
    - Rescheduled a job across all of our servers -- it was waking us up with errors
  - Responsibility
    - Did a prune of my workbook.leo file
    - Got holiday shopping done!
    - Continued my Tabata routine
  - Leisure
    - Played a lot of [Race the Sun](http://flippfly.com/racethesun/)
    - Rewrote Mint Fudge aging rules, and played around with mechanics a bit
    - Fixed '@string view-rendered-default-kind' ignored in Leo
    - Fixed c.putHelpFor not defaulting to RST in Leo
    - Read a bit on Northern European (Norse and Germanic) myths
    - Read Wizards Mutants Laser Pistols #2
    - Switched from Chrome dev channel to stable (I was getting sick of bugs)
    - Updated orison's software
    - Wrote a mark+sweep garbage collector in python, for self-edification
    - Wrote a *lot* of Kahl campaign stuff...

  </t>
<t tx="peckj.20140929120632.5280"></t>
<t tx="peckj.20140929120632.5281">@language md
---
date: 2013-12-17
tags: [silica, pl theory, music, code]
title: Thoughts on Silica2

This post is really just a place for me to 'think in public' -- not meant to be terribly interesting to anyone but myself, but also to allow me to get my thoughts out there.

Silica2 (which will just be called Silica) will be the new version of my previous work on [silica](https://github.com/gatesphere/silica).  The original silica is written in Io, with a rendering engine in Java and Processing.  As my current language of choice is Python, Silica2 will be written in Python.  I intend on supporting the following features:

  - A good chunk of the Clay programming language (primitives, macros, commands, transforms, scales, modes, etc.).  I will be renaming some of these, however.  With Silica2, I'd like to draw a bit more of a distinction between Clay and Silica.
  - Namespaces, as silica implemented them
  - Functions, as silica implemented them
  - User-defined Scales + Modes, as silica implemented them
  - A plugin architecture
  - Multiple rendering modes (sonic, visual, score, text, MIDI, etc)
  - Embedded python
  - Scripting, with environment bootstrapping (ala .silicarc)
  - World images exportable and importable (as .leo files)
  - Multiple UI choices: cli (default), GUI, Leo-bridge

The embedded python feature is what I'm really interested in.  Allowing users to run python code *within* silica scripts will allow some very easy *runtime manipulation* of silica itself.  This Aha was inspired by my work with Leo, and I think it will be absolutely *vital* to silica2's adoption.  Silica2 will be perfectly capable of running without the embedded python scripting, but advanced users will be able to implement plugins in silica scripts!  The entire silica2 api will be exposed with a few simple objects (again, thanks to Leo for this idea), and can be manipulated as silica2 is running.  This includes adding stages to the parser, changing/adding new primatives, manipulating MIDI data directly, the whole shebang!

These are exciting times.  Very, very exciting times.

Oh, for technology:

  - Python 2.7 (perhaps also make it python3 compatible)
  - mingus
  - fluidsynth
  - PyQt4
  - pyparsing (perhaps -- I might roll my own parser instead)
  - Leo (optional)

I also intend to make easy installers for it all as well.  We'll see how it goes.

Thanks for reading!</t>
<t tx="peckj.20140929120632.5282"></t>
<t tx="peckj.20140929120632.5283">@language md
---
date: 2013-12-24
tags: [ltd, productivity, reports]
title: LTD Week Thirteen

Busy busy pre-holiday week:

  - Work
    - Added a database into our backup policy
    - Replaced a dead power supply on a server
    - Performed the final blackboard migration (in record time!)
  - Responsibility
    - Flundered big time on my Tabata routine.  Grr.
    - Reconciled my checkbook (a mammoth undertaking!)
    - Did some housekeeping on my LTD workbook
  - Leisure
    - Started work on silica!  Yes!
    - Read WMLP #3 and #4
    - Rewrote a good chunk of the Mint Fudge rules
    - Updated orison's software

Whee...

Oh, and yesterday was my birthday :)</t>
<t tx="peckj.20140929120632.5284"></t>
<t tx="peckj.20140929120632.5285">@language md
--- 
title: "Book Review - Dark Guest: Training Games for Cyber Warfare"
tags: [book, dark guest, wargames, network security, hacking, review]
date: 2013-12-30

I've decided to do something new here on the blog.  I think I'm going to take a crack at
short reviews of books I'm reading.  This first entry is on a book I received for Christmas,
that I quickly tore through, as it had been on my to-read list for a long while, and
hits nearly all of my interests: technology, professional wargaming, game design, and
self publishing.  How does it stack up?  Let's see.

# Vitals
**Title:** Dark Guest: Training Games for Cyber Warfare

**Author(s):** John Curry and Tim Price MBE

**Publisher:** lulu.com

**Pages:** 87

**ISBN:** 978-1-4710-8548-2 (Full color softcover), 978-1-4716-3415-4 (Black &amp; white softcover)

**Website:** [wargaming.co](http://www.wargaming.co/seriousgames/homepage.htm)

# Review
This is a book of four training exercises to stress the importance of IT security to non-technical staff.  In this aspect the book does well, especially for being very nearly alone in it's field -- this is perhaps the only widely-available text on the topic, at the moment, and I use 'widely' very loosely here.

The first of the four games included in the book, which happened to be the one I was least interested in, is a card game titled *'Hack This!'*. It's extremely simplistic, but absolutely dripping with good educational research. Unfortunately, it also occupies 2/3 of the pages of the book because it's a card game, and has far too many cards to be distributed in a printed book format. Ah well. It looks like it would be a very good teaching tool for non-technical managers, but one can't help but notice the distinct lack of governmental agency in the design -- this is likely due to the fact that prior to the PRISM and X-Keyscore, etc. revelations (this book was written in Summer 2011), people weren't necessarily thinking about governmental actions in cyberspace, but at the same time it feels like a serious oversight given that the book is subtitled "Training Games for Cyber Warfare", as in "That thing that governments do under cover of the net."

Game 2, *'Enterprise Defender'* is a business simulation thing, a very smooth 'what-if' scenario. Not too much to speak of in rules, but more as a way to help IT managers realize what they're missing in terms of policies and contingency plans. I might actually suggest this to my managers...

Game 3 is a simplified [Matrix Game](http://www.wargamedevelopments.org/matrix.htm) titled *'All Your Secrets Are Belong to Us'*, and it looks fantastic. The one sticking point I have with it is that it represents the hacker collective 'Anonymous' as a single player. But that can't necessarily be avoided. Good ideas and great execution. I'd love to give something like this a go sometime.

Game 4, *'Exercise Tallin Soldier'* is a [CPX](http://www.abbreviations.com/term/18266)-style game centering on the [Estonian Internet Crisis of late spring 2007](http://en.wikipedia.org/wiki/2007_cyberattacks_on_Estonia). It is modeled after a highly simplified version of the US' [Exercise Cyber Storm (2006)](http://en.wikipedia.org/wiki/Cyber_Storm_Exercise), reducing players from &gt;1000 to 4, and umpires from &gt;100 to 1. It is extremely railroady -- the exercise and events will unfold no matter what. As an educational tool, I see great use... as a game or a 'realistic' simulation, much less so. Still, a very useful model to grab ideas from... and it was a nice break from the norm with respect to involving the cyber-security realm heavily, as *all* of the attacks are purely infrastructurally targeted [DDoS](http://en.wikipedia.org/wiki/Ddos#Distributed_attack)s.

# My Score
It is a good read, but not without its blunders. For example, there are a large number of typos, and none of the images are scaled correctly, causing grainy, unclear artifacts in the text. But it is a self-published work, and that is to be expected -- it's such a niche work that no traditional publisher in their right minds would pick it up, as the profit margins are neigh non-existant. It is perhaps the best text in the field, simply because there are no other texts in the field... which is a shame, but it certainly gives me ideas.

Overall, I'd give it a **5/7**.</t>
<t tx="peckj.20140929120632.5286">@language md
---
date: 2013-12-30
tags: [ltd, productivity, reports]
title: LTD Week Fourteen

Being a holiday week -- and also containing my birthday -- I slacked off a bit this week.

  - Work
    - Install ghostscript 9.10 on blackboard server
    - Initial cleanup of old blackboard server stuff
    - Dead email address purging from several scripts
  - Responsibility
    - Applied for an apartment (whoo!)
    - That's about it...
  - Leisure
    - Worked a bit on silica ('modules' work now)
    - Worked on the beginnings of a Leo-Trello sync plugin
    - Designed 2(!) micro RPGs
    - Read "Dark Guest"
    - Read WMLP #5</t>
<t tx="peckj.20140929120632.5287"></t>
<t tx="peckj.20140929120632.5288"></t>
<t tx="peckj.20140929120632.5289"></t>
<t tx="peckj.20140929120632.5292"></t>
<t tx="peckj.20140929120632.5294"></t>
<t tx="peckj.20140929120632.5297"></t>
<t tx="peckj.20140929120632.5299"></t>
<t tx="peckj.20140929120632.5301"></t>
<t tx="peckj.20140929120632.5303"></t>
<t tx="peckj.20140929120632.5305"></t>
<t tx="peckj.20140929120632.5306"></t>
<t tx="peckj.20140929120632.5308"></t>
<t tx="peckj.20140929120632.5310"></t>
<t tx="peckj.20140929120632.5312"></t>
<t tx="peckj.20140929120632.5314"></t>
<t tx="peckj.20140929120632.5316"></t>
<t tx="peckj.20140929120632.5318"></t>
<t tx="peckj.20140929120632.5321"></t>
<t tx="peckj.20140929120632.5322"></t>
<t tx="peckj.20140929120632.5324"></t>
<t tx="peckj.20140929120632.5326"></t>
<t tx="peckj.20140929120632.5329"></t>
<t tx="peckj.20140929120632.5331"></t>
<t tx="peckj.20140929120632.5333"></t>
<t tx="peckj.20140929120632.5335"></t>
<t tx="peckj.20140929120632.5337"></t>
<t tx="peckj.20140929120632.5339"></t>
<t tx="peckj.20140929120632.5340"></t>
<t tx="peckj.20140929120632.5342"></t>
<t tx="peckj.20140929120632.5344"></t>
<t tx="peckj.20140929120632.5346"></t>
<t tx="peckj.20140929120632.5348"></t>
<t tx="peckj.20140929120632.5351"></t>
<t tx="peckj.20140929120632.5353"></t>
<t tx="peckj.20140929120632.5354"></t>
<t tx="peckj.20140929120632.5356"></t>
<t tx="peckj.20140929120632.5358"></t>
<t tx="peckj.20140929120632.5360"></t>
<t tx="peckj.20140929120632.5363"></t>
<t tx="peckj.20140929120632.5364"></t>
<t tx="peckj.20140929120632.5367"></t>
<t tx="peckj.20140929120632.5368">@language python

pages = g.findNodeAnywhere(c,'@path pages')

years = [pos.v for pos in pages.children()]

for yr in years:
  year = yr.h[6:]
  months = [v for v in yr.children]
  
  for mo in months:
    month = mo.h[6:]
    days = [v for v in mo.children]
    
    for day in days:
      daynum = day.h[6:]
      articles = [v for v in day.children]
      
      for a in articles:
        lines = a.b.splitlines()
        for idx,line in enumerate(lines):
          if 'date:' in line:
            newline = 'date: %s-%s-%s' % (year,month,daynum)
            lines[idx] = newline
          elif 'tags:' in line:
            newline = 'tags: [' + line[6:] + ']'
            lines[idx] = newline
        a.b = "\n".join(lines)
        c.vnode2position(a).setDirty()

g.es('done')</t>
<t tx="peckj.20140929120632.6871"></t>
<t tx="peckj.20150324125338.1"></t>
<t tx="peckj.20150324125826.1"></t>
<t tx="peckj.20150324125832.1"></t>
</tnodes>
</leo_file>
